url,message,api_url,c_why_in,c_why_in_expl,c_why_mw,c_why_mw_expl
https://github.com/junit-team/junit4/commit/3171c4b29cb207e71fc2f752f0fbcb235bc8e784,"Relicense JUnit from CPL to EPL  <enter> EPL is the successor version of the CPL this makes re-licensing possible without seeking the approval of all contributors. <enter> CPL is actively hurting JUnit adaptation, it the following cases the deciding factor against JUnit was CPL. In both cases EPL would have been fine. * Netbeans can't ship JUnit [4] * OpenJDK uses TestNG instead of JUnit [5] <enter> Mike Milinkovich from the Eclipse Foundation wrote [1] <enter> > Back in 2009, the CPL was superseded by the EPL. This means that the > EPL is the successor version of the CPL. It also means that using the > CPL is the licensing equivalent of using deprecated code. > > Because the EPL is the successor version to the CPL, the 'new version > re-licensing' clause in Section 7 of the CPL applies. In other words, > you can re-license your project without seeking the approval of all > of your contributors. > The CPL and EPL basically differ by about one sentence, which you can > see here. The difference relates to the scope of patent licenses > terminated should someone sue another party for patent infringement. > This is the kind of stuff that lawyers love, but most developers > don't really care about. <enter> On the migration from CPL to EPL Mike Milinkovich wrote [2] <enter> > There was a two step process that was followed to make this happen. > First, following the terms of the CPL, IBM assigned the > responsibility to serve as the Agreement Steward of the CPL to the > Eclipse Foundation. Second, the Eclipse Foundation officially > recognized the EPL 1.0 as the new version of the CPL 1.0. In OSI > license terminology, the EPL now supersedes the CPL. > > A quick read of the two licenses will quickly show that they are very > very close. Other than their names and (previously) their Agreement > Stewards, the only substantive difference is the breadth of the > patent license termination in the event of a patent law suit. (See > the second paragraph of Section 7.) For more information on the > relationship between the CPL and the EPL see the EPL FAQ. <enter> You can find more information about the difference at [3]. <enter> The new `LICENSE.txt` is based on a plain text version of the EPL with formatted so that the diff is a clean as possible. <enter> I'll submit another pull request for the gh-pages branch. <enter>  [1]  http://mmilinkov.wordpress.com/2013/02/13/jruby-moves-to-the-epl/   [2]  http://mmilinkov.wordpress.com/2009/04/16/one-small-step-towards-reducing-license-proliferation/   [3]  http://www.eclipse.org/legal/eplfaq.php#EPLDIFFER   [4]  https://netbeans.org/community/releases/70/relnotes.html#deprecated   [5]  http://openjdk.java.net/jtreg/build.html ",https://api.github.com/repos/junit-team/junit4/commits/3171c4b29cb207e71fc2f752f0fbcb235bc8e784,True,"The commit message explains the necessity of the changes by referencing the difference between the Common Public License (CPL) and the Eclipse Public License (EPL). The message states that the CPL is actively hurting JUnit adaptation, and that the EPL would have been fine in cases where the CPL was problematic. Additionally, the message mentions that the EPL is the successor version of the CPL, which means that re-licensing is possible without seeking the approval of all contributors.",True,The commit message clearly explains the reason for the change: the license of JUnit is being changed from CPL to EPL. This is a common practice in open source projects to ensure compatibility and avoid potential legal issues. The message also provides references to explain the difference between the two licenses and why the change is necessary.
https://github.com/spring-projects/spring-boot/commit/6c8f8c9d827a5340f9e6493c14d8c252d1f0d52a,"Better diagnotics when ESCF subclass breaks with custom management port  <enter> When a custom management.port is used, the child context is configured with an EmbeddedServletContainerFactory bean that has the same class as the parent context’s EmbeddedServletContainerFactory bean. This ensures that the child context uses the same type of embedded container as its parent when there are multiple embedded containers on the classpath. It also causes a failure when the custom EmbeddedServletContainerFactory subclass cannot be instantiated, for example because it’s an anonymous inner-class. <enter> This commit improves the diagnostics so that we fail fast with an information exception message when we detect that the embedded servlet container factory bean’s class cannot be instantiated. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/6c8f8c9d827a5340f9e6493c14d8c252d1f0d52a,True,"The commit message explains the necessity of changes by referencing a problem that occurs when a custom management.port is used and the child context's EmbeddedServletContainerFactory bean cannot be instantiated. This is improved in the commit by throwing a FatalBeanException with an informative message when this situation is detected, which helps to diagnose the problem more quickly.",False,"The commit message does not contain an expression that describes the necessity of changes in a concise manner. It provides a detailed explanation of the problem and the solution, which is not common sense or easily inferable from the code diff. The message explains why the change is necessary and how it improves the diagnostics, which is not a typical case of adding test cases, typographic fixes, text file changes, annotations, refactorings, or version management."
https://github.com/spring-projects/spring-boot/commit/6dc14af92dbfa7b5281072d9fdde241ce0da3679,"Update view of bean types when an override is detected  <enter> Previously, when a bean was overridden and its type changes, BeanTypeRegistry could be left with a stale view of the bean's type. This would lead to incorrect bean condition evaluation as conditions would match or not match based on the bean's old type. <enter> This commit updates the type registry to refresh its view of a bean's type when its definition changes. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/6dc14af92dbfa7b5281072d9fdde241ce0da3679,True,"The commit message refers to a convention regarding the handling of bean overrides. It explains that previously, when a bean was overridden and its type changed, the BeanTypeRegistry could be left with a stale view of the bean's type. This would lead to incorrect bean condition evaluation. The commit message then explains that the type registry is updated to refresh its view of a bean's type when its definition changes. This is a clear reference to a standard (correct behavior) that was not being followed prior to the commit.",True,"The commit message explains the necessity of changes by stating that previously, when a bean was overridden and its type changed, BeanTypeRegistry could be left with a stale view of the bean's type. This would lead to incorrect bean condition evaluation as conditions would match or not match based on the bean's old type. The commit message clearly explains the problem and the solution, which is to update the type registry to refresh its view of a bean's type when its definition changes."
https://github.com/square/okhttp/commit/868ee844458eda9ee7b1b6f9a5238b7c3f84c0e4,"Drop our one remaining DSS cipher suite.  <enter> Tracking Chrome and Firefox, which have also dropped this cipher suite. <enter> This is the only cipher suite change since the last update. See our cipher suites spreadsheet for a comparison:  https://goo.gl/dWXbi0  <enter>  Closes   <issue_link> ",https://api.github.com/repos/square/okhttp/commits/868ee844458eda9ee7b1b6f9a5238b7c3f84c0e4,True,"The commit message explains the necessity of changes by referencing a convention, in this case, the deprecation of a DSS cipher suite. It mentions that the change is made to align with Chrome and Firefox, which have also dropped this cipher suite. Additionally, the commit message refers to the date of the last update and provides a link to a spreadsheet for comparison. This shows that the change is based on improvements in prior versions and implemented features.",True,"The commit message explains the necessity of the changes by stating that the project is dropping a remaining DSS cipher suite to align with Chrome and Firefox. This is a common practice in software development to ensure compatibility and security. The code diff also clearly shows the removal of the DSS cipher suite, making it easy to infer the change's purpose."
https://github.com/spring-projects/spring-boot/commit/e233ea7f546fcbc5fccf972bc70c26373103444c,Fix undertow access_log file name  <enter> Undertow 1.3.2 changed the default access log file suffix from '.log' to just 'log'. Thus we need to adapt the file name pattern to include the missing dot. <enter>  Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/e233ea7f546fcbc5fccf972bc70c26373103444c,True,"The commit message refers to a change in Undertow 1.3.2, which changed the default access log file suffix from '.log' to just 'log'. The commit message explains that this change requires an adaptation in the file name pattern to include the missing dot. This shows that the commit message is describing the necessity of changes by referencing a change in a prior version and the need to adapt to it.",True,"The commit message 'Fix undertow access_log file name' clearly states the reason for the change. The code diff shows that the file name 'access_log' has been changed to 'access_log.'. The message explains that this change is necessary because Undertow 1.3.2 changed the default access log file suffix from '.log' to just 'log'. This is a clear and concise explanation of the necessity of the changes, making it unnecessary to provide further rationale."
https://github.com/spring-projects/spring-boot/commit/247c596f8ceb657800e86d0ca59d4816aa67026b,Remove duplicate console appender from Actuator sample's logback config  <enter> Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/247c596f8ceb657800e86d0ca59d4816aa67026b,False,"The commit message does not explicitly reference any conventions, standards, improvements in prior commits, or implemented features that necessitate the changes. It simply states that a duplicate console appender is being removed from the Actuator sample's logback config, which does not provide any context or explanation for why this change is necessary.",True,"The commit message 'Remove duplicate console appender from Actuator sample's logback config' clearly describes the change made in the code diff. The change is to remove a redundant console appender from the logback configuration, which is a common practice to avoid duplicate logging. This is not a trivial change and the necessity of the change is clearly explained in the commit message."
https://github.com/junit-team/junit4/commit/591fcae09c6470a03ade7d608773f8f633409bc2,Added more Javadoc to Assert for messages and when they are displayed.  <enter> Put versiontag back into Version. ,https://api.github.com/repos/junit-team/junit4/commits/591fcae09c6470a03ade7d608773f8f633409bc2,True,"The commit message refers to the necessity of changes by mentioning the addition of more Javadoc to the Assert class for messages and when they are displayed. This explains why the commit is modifying the Assert class methods to include a message parameter and throw an AssertionFailedError with the given message. Additionally, the commit message mentions the reintroduction of the version tag into the Version class, which could be seen as an improvement over a prior commit that removed it.",True,"The commit message does not explicitly state the reason for the changes, but it is easy to infer from the code diff. The changes are adding more Javadoc to the Assert class to explain when messages are displayed and what exceptions are thrown. This is a common practice to improve code readability and maintainability, and it does not require a specific rationale to be mentioned in the commit message."
https://github.com/junit-team/junit4/commit/870289f3272917f312de6902b8b6bdc43552d4b7,Simplify Filter implementation for backward compatibility ,https://api.github.com/repos/junit-team/junit4/commits/870289f3272917f312de6902b8b6bdc43552d4b7,True,"The commit message 'Simplify Filter implementation for backward compatibility' refers to the necessity of changes by mentioning 'backward compatibility'. The code diff shows that the filter implementation has been changed to improve backward compatibility. Specifically, the `removeIgnored()` method has been modified to return a `Filter` object, which is used to filter out ignored tests when running the JUnit 4 tests. This change ensures that the tests behave consistently when executed as JUnit 3 and JUnit 4, improving backward compatibility.",True,"The commit message 'Simplify Filter implementation for backward compatibility' does not explicitly state the reason for the changes. However, the code diff shows that the changes are made to simplify the Filter implementation and to ensure backward compatibility. This is a common reason for changes in code, especially in test cases or refactoring, and it is easy to infer from the code diff."
https://github.com/square/retrofit/commit/c0cc4cb5bbf688a11dda5531f009300b20005e61,RxJava 1.0.14 with an important Android fix.  <enter> Just in case someone is relying on the transitive dependency. ,https://api.github.com/repos/square/retrofit/commits/c0cc4cb5bbf688a11dda5531f009300b20005e61,True,"The commit message refers to an important Android fix in RxJava 1.0.14, which might have been a problem for someone relying on the transitive dependency. This could be considered a reference to a convention or standard, as it suggests that the update is necessary to maintain compatibility or functionality with a specific environment or dependency.",True,"The commit message refers to an 'important Android fix' in RxJava 1.0.14. However, it does not provide a specific explanation of what the fix is or why it is important. The diff only shows a version update from 1.0.13 to 1.0.14, which does not provide enough context to infer the necessity of the changes. Therefore, the commit message does not fully explain the reason for the changes, relying more on common sense and the context of the project to infer the importance of the update."
https://github.com/apache/dubbo/commit/e8d85386bc7869d3a6e5b27c12ec7784c74bc2d6,Format code ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/e8d85386bc7869d3a6e5b27c12ec7784c74bc2d6,True,"The commit message refers to the necessity of changes by mentioning 'Format code'. The code diff shows that the commit is changing the code style to follow a convention or standard, as it is adding 'final' modifiers to variables that are not reassigned.",True,"The commit message 'Format code' does not provide a clear rationale for the changes made. However, the changes in the diff are mostly related to code formatting, such as adding 'final' modifiers to variables and methods, which is a common practice to improve code readability and maintainability. Therefore, it can be inferred that the commit message describes the necessity of changes without explicitly stating the reason."
