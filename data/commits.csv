url,message,api_url,diff
https://github.com/junit-team/junit4/commit/3171c4b29cb207e71fc2f752f0fbcb235bc8e784,"Relicense JUnit from CPL to EPL  <enter> EPL is the successor version of the CPL this makes re-licensing possible without seeking the approval of all contributors. <enter> CPL is actively hurting JUnit adaptation, it the following cases the deciding factor against JUnit was CPL. In both cases EPL would have been fine. * Netbeans can't ship JUnit [4] * OpenJDK uses TestNG instead of JUnit [5] <enter> Mike Milinkovich from the Eclipse Foundation wrote [1] <enter> > Back in 2009, the CPL was superseded by the EPL. This means that the > EPL is the successor version of the CPL. It also means that using the > CPL is the licensing equivalent of using deprecated code. > > Because the EPL is the successor version to the CPL, the 'new version > re-licensing' clause in Section 7 of the CPL applies. In other words, > you can re-license your project without seeking the approval of all > of your contributors. > The CPL and EPL basically differ by about one sentence, which you can > see here. The difference relates to the scope of patent licenses > terminated should someone sue another party for patent infringement. > This is the kind of stuff that lawyers love, but most developers > don't really care about. <enter> On the migration from CPL to EPL Mike Milinkovich wrote [2] <enter> > There was a two step process that was followed to make this happen. > First, following the terms of the CPL, IBM assigned the > responsibility to serve as the Agreement Steward of the CPL to the > Eclipse Foundation. Second, the Eclipse Foundation officially > recognized the EPL 1.0 as the new version of the CPL 1.0. In OSI > license terminology, the EPL now supersedes the CPL. > > A quick read of the two licenses will quickly show that they are very > very close. Other than their names and (previously) their Agreement > Stewards, the only substantive difference is the breadth of the > patent license termination in the event of a patent law suit. (See > the second paragraph of Section 7.) For more information on the > relationship between the CPL and the EPL see the EPL FAQ. <enter> You can find more information about the difference at [3]. <enter> The new `LICENSE.txt` is based on a plain text version of the EPL with formatted so that the diff is a clean as possible. <enter> I'll submit another pull request for the gh-pages branch. <enter>  [1]  http://mmilinkov.wordpress.com/2013/02/13/jruby-moves-to-the-epl/   [2]  http://mmilinkov.wordpress.com/2009/04/16/one-small-step-towards-reducing-license-proliferation/   [3]  http://www.eclipse.org/legal/eplfaq.php#EPLDIFFER   [4]  https://netbeans.org/community/releases/70/relnotes.html#deprecated   [5]  http://openjdk.java.net/jtreg/build.html ",https://api.github.com/repos/junit-team/junit4/commits/3171c4b29cb207e71fc2f752f0fbcb235bc8e784,"@@ -1,8 +1,8 @@
 JUnit
 
-Common Public License - v 1.0
+Eclipse Public License - v 1.0
 
-THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS COMMON PUBLIC
+THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC
 LICENSE (""AGREEMENT""). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM
 CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.
 
@@ -173,11 +173,7 @@ terms of this Agreement, and without further action by the parties hereto, such
 provision shall be reformed to the minimum extent necessary to make such
 provision valid and enforceable.
 
-If Recipient institutes patent litigation against a Contributor with respect to
-a patent applicable to software (including a cross-claim or counterclaim in a
-lawsuit), then any patent licenses granted by that Contributor to such
-Recipient under this Agreement shall terminate as of the date such litigation
-is filed. In addition, if Recipient institutes patent litigation against any
+If Recipient institutes patent litigation against any
 entity (including a cross-claim or counterclaim in a lawsuit) alleging that the
 Program itself (excluding combinations of the Program with other software or
 hardware) infringes such Recipient's patent(s), then such Recipient's rights
@@ -198,7 +194,7 @@ order to avoid inconsistency the Agreement is copyrighted and may only be
 modified in the following manner. The Agreement Steward reserves the right to
 publish new versions (including revisions) of this Agreement from time to time.
 No one other than the Agreement Steward has the right to modify this Agreement.
-IBM is the initial Agreement Steward. IBM may assign the responsibility to
+The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to
 serve as the Agreement Steward to a suitable separate entity. Each new version
 of the Agreement will be given a distinguishing version number. The Program
 (including Contributions) may always be distributed subject to the version of
@@ -16,7 +16,7 @@
   <property name=""testsrc"" location=""src/test/java"" />
   <property name=""testbin"" location=""${target}/test/java"" />
   <property name=""unjarred"" 
-            value=""**/*.jar, ${testfiles}, doc/**, README.md, .classpath, .project, cpl-v10.html"" />
+            value=""**/*.jar, ${testfiles}, doc/**, README.md, .classpath, .project, epl-v10.html"" />
 
   <property name=""binjar"" value=""junit-${version}.jar"" />
   <property name=""srcjar"" value=""junit-${version}-src.jar"" />
@@ -170,7 +170,7 @@
     </copy>
     <copy file=""README.md"" tofile=""${dist}/README.md"" />
     <copy file=""BUILDING"" tofile=""${dist}/BUILDING"" />
-    <copy file=""cpl-v10.html"" tofile=""${dist}/cpl-v10.html"" />
+    <copy file=""epl-v10.html"" tofile=""${dist}/epl-v10.html"" />
     <copy file=""build.xml"" tofile=""${dist}/build.xml"" />
   </target>
 
@@ -34,8 +34,8 @@
     </mailingLists>
     <licenses>
         <license>
-            <name>Common Public License Version 1.0</name>
-            <url>http://www.opensource.org/licenses/cpl1.0.txt</url>
+            <name>Eclipse Public License Version 1.0</name>
+            <url>http://opensource.org/licenses/eclipse-1.0.txt</url>
         </license>
     </licenses>
     <scm>
@@ -26,8 +26,8 @@
     </mailingLists>
     <licenses>
         <license>
-            <name>Common Public License Version 1.0</name>
-            <url>http://www.opensource.org/licenses/cpl1.0.txt</url>
+            <name>Eclipse Public License Version 1.0</name>
+            <url>http://opensource.org/licenses/eclipse-1.0.txt</url>
         </license>
     </licenses>
     <scm>
@@ -1,125 +0,0 @@
-<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0//EN"">
-<HTML>
-<HEAD>
-<TITLE>Common Public License - v 1.0</TITLE>
-<meta http-equiv=""Content-Type"" content=""text/html; charset=iso-8859-1"">
-</HEAD>
-
-<BODY BGCOLOR=""#FFFFFF"" VLINK=""#800000"">
-
-
-<P ALIGN=""CENTER""><B>Common Public License - v 1.0</B>
-<P><B></B><FONT SIZE=""3""></FONT>
-<P><FONT SIZE=""3""></FONT><FONT SIZE=""2"">THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS COMMON PUBLIC LICENSE (""AGREEMENT"").  ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.</FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""><B>1.  DEFINITIONS</B></FONT>
-<P><FONT SIZE=""2"">""Contribution"" means:</FONT>
-
-<UL><FONT SIZE=""2"">a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and<BR CLEAR=""LEFT"">
-b) in the case of each subsequent Contributor:</FONT></UL>
-
-
-<UL><FONT SIZE=""2"">i)	 	changes to the Program, and</FONT></UL>
-
-
-<UL><FONT SIZE=""2"">ii)		additions to the Program;</FONT></UL>
-
-
-<UL><FONT SIZE=""2"">where such changes and/or additions to the Program originate from and are distributed by that particular Contributor.  </FONT><FONT SIZE=""2"">A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf.  </FONT><FONT SIZE=""2"">Contributions do not include additions to the Program which:  (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.  </FONT></UL>
-
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2"">""Contributor"" means any person or entity that distributes the Program.</FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2"">""Licensed Patents "" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.  </FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2"">""Program"" means the Contributions distributed in accordance with this Agreement.</FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2"">""Recipient"" means anyone who receives the Program under this Agreement, including all Contributors.</FONT>
-<P><FONT SIZE=""2""><B></B></FONT>
-<P><FONT SIZE=""2""><B>2.  GRANT OF RIGHTS</B></FONT>
-
-<UL><FONT SIZE=""2""></FONT><FONT SIZE=""2"">a)	</FONT><FONT SIZE=""2"">Subject to the terms of this Agreement, each Contributor hereby grants</FONT><FONT SIZE=""2""> Recipient a non-exclusive, worldwide, royalty-free copyright license to</FONT><FONT SIZE=""2"" COLOR=""#FF0000""> </FONT><FONT SIZE=""2"">reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.</FONT></UL>
-
-
-<UL><FONT SIZE=""2""></FONT></UL>
-
-
-<UL><FONT SIZE=""2""></FONT><FONT SIZE=""2"">b) 	Subject to the terms of this Agreement, each Contributor hereby grants </FONT><FONT SIZE=""2"">Recipient a non-exclusive, worldwide,</FONT><FONT SIZE=""2"" COLOR=""#008000""> </FONT><FONT SIZE=""2"">royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form.  This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents.  The patent license shall not apply to any other combinations which include the Contribution.  No hardware per se is licensed hereunder.   </FONT></UL>
-
-
-<UL><FONT SIZE=""2""></FONT></UL>
-
-
-<UL><FONT SIZE=""2"">c)	Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity.  Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise.  As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any.  For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.</FONT></UL>
-
-
-<UL><FONT SIZE=""2""></FONT></UL>
-
-
-<UL><FONT SIZE=""2"">d)	Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement. </FONT></UL>
-
-
-<UL><FONT SIZE=""2""></FONT></UL>
-
-<P><FONT SIZE=""2""><B>3.  REQUIREMENTS</B></FONT>
-<P><FONT SIZE=""2""><B></B>A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:</FONT>
-
-<UL><FONT SIZE=""2"">a)	it complies with the terms and conditions of this Agreement; and</FONT></UL>
-
-
-<UL><FONT SIZE=""2"">b)	its license agreement:</FONT></UL>
-
-
-<UL><FONT SIZE=""2"">i)	effectively disclaims</FONT><FONT SIZE=""2""> on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose; </FONT></UL>
-
-
-<UL><FONT SIZE=""2"">ii) 	effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits; </FONT></UL>
-
-
-<UL><FONT SIZE=""2"">iii)</FONT><FONT SIZE=""2"">	states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and</FONT></UL>
-
-
-<UL><FONT SIZE=""2"">iv)	states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.</FONT><FONT SIZE=""2"" COLOR=""#0000FF""> </FONT><FONT SIZE=""2"" COLOR=""#FF0000""></FONT></UL>
-
-
-<UL><FONT SIZE=""2"" COLOR=""#FF0000""></FONT><FONT SIZE=""2""></FONT></UL>
-
-<P><FONT SIZE=""2"">When the Program is made available in source code form:</FONT>
-
-<UL><FONT SIZE=""2"">a)	it must be made available under this Agreement; and </FONT></UL>
-
-
-<UL><FONT SIZE=""2"">b)	a copy of this Agreement must be included with each copy of the Program.  </FONT></UL>
-
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2"" COLOR=""#0000FF""><STRIKE></STRIKE></FONT>
-<P><FONT SIZE=""2"" COLOR=""#0000FF""><STRIKE></STRIKE></FONT><FONT SIZE=""2"">Contributors may not remove or alter any copyright notices contained within the Program.  </FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2"">Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.  </FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""><B>4.  COMMERCIAL DISTRIBUTION</B></FONT>
-<P><FONT SIZE=""2"">Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like.  While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors.   Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (""Commercial Contributor"") hereby agrees to defend and indemnify every other Contributor (""Indemnified Contributor"") against any losses, damages and costs (collectively ""Losses"") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering.  The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement.  In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations.  The Indemnified Contributor may participate in any such claim at its own expense.</FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2"">For example, a Contributor might include the Program in a commercial product offering, Product X.  That Contributor is then a Commercial Contributor.  If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone.  Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.</FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2"" COLOR=""#0000FF""></FONT>
-<P><FONT SIZE=""2"" COLOR=""#0000FF""></FONT><FONT SIZE=""2""><B>5.  NO WARRANTY</B></FONT>
-<P><FONT SIZE=""2"">EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is</FONT><FONT SIZE=""2""> solely responsible for determining the appropriateness of using and distributing </FONT><FONT SIZE=""2"">the Program</FONT><FONT SIZE=""2""> and assumes all risks associated with its exercise of rights under this Agreement</FONT><FONT SIZE=""2"">, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, </FONT><FONT SIZE=""2"">programs or equipment, and unavailability or interruption of operations</FONT><FONT SIZE=""2"">.  </FONT><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2""><B>6.  DISCLAIMER OF LIABILITY</B></FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2"">EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES </FONT><FONT SIZE=""2"">(INCLUDING WITHOUT LIMITATION LOST PROFITS),</FONT><FONT SIZE=""2""> HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""><B>7.  GENERAL</B></FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2"">If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.</FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2"">If Recipient institutes patent litigation against a Contributor with respect to a patent applicable to software (including a cross-claim or counterclaim in a lawsuit), then any patent licenses granted by that Contributor to such Recipient under this Agreement shall terminate as of the date such litigation is filed.  In addition, if Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed. </FONT><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2"">All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance.  If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable.  However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.  </FONT><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2"">Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted  and may only be modified in the following manner. The Agreement Steward reserves the right to </FONT><FONT SIZE=""2"">publish new versions (including revisions) of this Agreement from time to </FONT><FONT SIZE=""2"">time. No one other than the Agreement Steward has the right to modify this Agreement. IBM is the initial Agreement Steward.   IBM may assign the responsibility to serve as the Agreement Steward to a suitable separate entity.  </FONT><FONT SIZE=""2"">Each new version of the Agreement will be given a distinguishing version number.  The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new </FONT><FONT SIZE=""2"">version.  </FONT><FONT SIZE=""2"">Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, </FONT><FONT SIZE=""2"">by implication, estoppel or otherwise</FONT><FONT SIZE=""2"">.</FONT><FONT SIZE=""2"">  All rights in the Program not expressly granted under this Agreement are reserved.</FONT>
-<P><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2"">This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose.  Each party waives its rights to a jury trial in any resulting litigation.</FONT>
-<P><FONT SIZE=""2""></FONT><FONT SIZE=""2""></FONT>
-<P><FONT SIZE=""2""></FONT>
-
-</BODY>
-
-</HTML>
\ No newline at end of file
@@ -422,9 +422,9 @@ <h1>
     <p>
       JUnit is <a href=""http://www.opensource.org/"">Open Source
       Software</a>, released
-      under <a
-      href=""http://oss.software.ibm.com/developerworks/oss/license-cpl.html"">IBM's
-      Common Public License Version 0.5</a> and hosted
+      under the <a
+      href=""http://opensource.org/licenses/eclipse-1.0.html"">
+      Eclipse Public License Version 1.0</a> and hosted
       on <a
       href=""http://sourceforge.net/projects/junit/"">SourceForge</a>.
     </p>
@@ -56,7 +56,7 @@ <h2>
 
 <br><a href=""README.html"">Release notes</a>
 <br>&nbsp;&nbsp;&nbsp; Latest JUnit release notes
-<br><a href=""cpl-v10.html"">License</a>
+<br><a href=""epl-v10.html"">License</a>
 <br>&nbsp;&nbsp;&nbsp; The terms of the common public license used for JUnit.<br>
 </blockquote>
 The following documents still describe JUnit 3.8.
@@ -0,0 +1,261 @@
+<?xml version=""1.0"" encoding=""ISO-8859-1"" ?>
+<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
+<html xmlns=""http://www.w3.org/1999/xhtml"">
+
+<head>
+<meta http-equiv=""Content-Type"" content=""text/html; charset=ISO-8859-1"" />
+<title>Eclipse Public License - Version 1.0</title>
+<style type=""text/css"">
+  body {
+    size: 8.5in 11.0in;
+    margin: 0.25in 0.5in 0.25in 0.5in;
+    tab-interval: 0.5in;
+    }
+  p {  	
+    margin-left: auto;
+    margin-top:  0.5em;
+    margin-bottom: 0.5em;
+    }
+  p.list {
+  	margin-left: 0.5in;
+    margin-top:  0.05em;
+    margin-bottom: 0.05em;
+    }
+  </style>
+
+</head>
+
+<body lang=""EN-US"">
+
+<h2>Eclipse Public License - v 1.0</h2>
+
+<p>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE
+PUBLIC LICENSE (&quot;AGREEMENT&quot;). ANY USE, REPRODUCTION OR
+DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS
+AGREEMENT.</p>
+
+<p><b>1. DEFINITIONS</b></p>
+
+<p>&quot;Contribution&quot; means:</p>
+
+<p class=""list"">a) in the case of the initial Contributor, the initial
+code and documentation distributed under this Agreement, and</p>
+<p class=""list"">b) in the case of each subsequent Contributor:</p>
+<p class=""list"">i) changes to the Program, and</p>
+<p class=""list"">ii) additions to the Program;</p>
+<p class=""list"">where such changes and/or additions to the Program
+originate from and are distributed by that particular Contributor. A
+Contribution 'originates' from a Contributor if it was added to the
+Program by such Contributor itself or anyone acting on such
+Contributor's behalf. Contributions do not include additions to the
+Program which: (i) are separate modules of software distributed in
+conjunction with the Program under their own license agreement, and (ii)
+are not derivative works of the Program.</p>
+
+<p>&quot;Contributor&quot; means any person or entity that distributes
+the Program.</p>
+
+<p>&quot;Licensed Patents&quot; mean patent claims licensable by a
+Contributor which are necessarily infringed by the use or sale of its
+Contribution alone or when combined with the Program.</p>
+
+<p>&quot;Program&quot; means the Contributions distributed in accordance
+with this Agreement.</p>
+
+<p>&quot;Recipient&quot; means anyone who receives the Program under
+this Agreement, including all Contributors.</p>
+
+<p><b>2. GRANT OF RIGHTS</b></p>
+
+<p class=""list"">a) Subject to the terms of this Agreement, each
+Contributor hereby grants Recipient a non-exclusive, worldwide,
+royalty-free copyright license to reproduce, prepare derivative works
+of, publicly display, publicly perform, distribute and sublicense the
+Contribution of such Contributor, if any, and such derivative works, in
+source code and object code form.</p>
+
+<p class=""list"">b) Subject to the terms of this Agreement, each
+Contributor hereby grants Recipient a non-exclusive, worldwide,
+royalty-free patent license under Licensed Patents to make, use, sell,
+offer to sell, import and otherwise transfer the Contribution of such
+Contributor, if any, in source code and object code form. This patent
+license shall apply to the combination of the Contribution and the
+Program if, at the time the Contribution is added by the Contributor,
+such addition of the Contribution causes such combination to be covered
+by the Licensed Patents. The patent license shall not apply to any other
+combinations which include the Contribution. No hardware per se is
+licensed hereunder.</p>
+
+<p class=""list"">c) Recipient understands that although each Contributor
+grants the licenses to its Contributions set forth herein, no assurances
+are provided by any Contributor that the Program does not infringe the
+patent or other intellectual property rights of any other entity. Each
+Contributor disclaims any liability to Recipient for claims brought by
+any other entity based on infringement of intellectual property rights
+or otherwise. As a condition to exercising the rights and licenses
+granted hereunder, each Recipient hereby assumes sole responsibility to
+secure any other intellectual property rights needed, if any. For
+example, if a third party patent license is required to allow Recipient
+to distribute the Program, it is Recipient's responsibility to acquire
+that license before distributing the Program.</p>
+
+<p class=""list"">d) Each Contributor represents that to its knowledge it
+has sufficient copyright rights in its Contribution, if any, to grant
+the copyright license set forth in this Agreement.</p>
+
+<p><b>3. REQUIREMENTS</b></p>
+
+<p>A Contributor may choose to distribute the Program in object code
+form under its own license agreement, provided that:</p>
+
+<p class=""list"">a) it complies with the terms and conditions of this
+Agreement; and</p>
+
+<p class=""list"">b) its license agreement:</p>
+
+<p class=""list"">i) effectively disclaims on behalf of all Contributors
+all warranties and conditions, express and implied, including warranties
+or conditions of title and non-infringement, and implied warranties or
+conditions of merchantability and fitness for a particular purpose;</p>
+
+<p class=""list"">ii) effectively excludes on behalf of all Contributors
+all liability for damages, including direct, indirect, special,
+incidental and consequential damages, such as lost profits;</p>
+
+<p class=""list"">iii) states that any provisions which differ from this
+Agreement are offered by that Contributor alone and not by any other
+party; and</p>
+
+<p class=""list"">iv) states that source code for the Program is available
+from such Contributor, and informs licensees how to obtain it in a
+reasonable manner on or through a medium customarily used for software
+exchange.</p>
+
+<p>When the Program is made available in source code form:</p>
+
+<p class=""list"">a) it must be made available under this Agreement; and</p>
+
+<p class=""list"">b) a copy of this Agreement must be included with each
+copy of the Program.</p>
+
+<p>Contributors may not remove or alter any copyright notices contained
+within the Program.</p>
+
+<p>Each Contributor must identify itself as the originator of its
+Contribution, if any, in a manner that reasonably allows subsequent
+Recipients to identify the originator of the Contribution.</p>
+
+<p><b>4. COMMERCIAL DISTRIBUTION</b></p>
+
+<p>Commercial distributors of software may accept certain
+responsibilities with respect to end users, business partners and the
+like. While this license is intended to facilitate the commercial use of
+the Program, the Contributor who includes the Program in a commercial
+product offering should do so in a manner which does not create
+potential liability for other Contributors. Therefore, if a Contributor
+includes the Program in a commercial product offering, such Contributor
+(&quot;Commercial Contributor&quot;) hereby agrees to defend and
+indemnify every other Contributor (&quot;Indemnified Contributor&quot;)
+against any losses, damages and costs (collectively &quot;Losses&quot;)
+arising from claims, lawsuits and other legal actions brought by a third
+party against the Indemnified Contributor to the extent caused by the
+acts or omissions of such Commercial Contributor in connection with its
+distribution of the Program in a commercial product offering. The
+obligations in this section do not apply to any claims or Losses
+relating to any actual or alleged intellectual property infringement. In
+order to qualify, an Indemnified Contributor must: a) promptly notify
+the Commercial Contributor in writing of such claim, and b) allow the
+Commercial Contributor to control, and cooperate with the Commercial
+Contributor in, the defense and any related settlement negotiations. The
+Indemnified Contributor may participate in any such claim at its own
+expense.</p>
+
+<p>For example, a Contributor might include the Program in a commercial
+product offering, Product X. That Contributor is then a Commercial
+Contributor. If that Commercial Contributor then makes performance
+claims, or offers warranties related to Product X, those performance
+claims and warranties are such Commercial Contributor's responsibility
+alone. Under this section, the Commercial Contributor would have to
+defend claims against the other Contributors related to those
+performance claims and warranties, and if a court requires any other
+Contributor to pay any damages as a result, the Commercial Contributor
+must pay those damages.</p>
+
+<p><b>5. NO WARRANTY</b></p>
+
+<p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS
+PROVIDED ON AN &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS
+OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION,
+ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY
+OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely
+responsible for determining the appropriateness of using and
+distributing the Program and assumes all risks associated with its
+exercise of rights under this Agreement , including but not limited to
+the risks and costs of program errors, compliance with applicable laws,
+damage to or loss of data, programs or equipment, and unavailability or
+interruption of operations.</p>
+
+<p><b>6. DISCLAIMER OF LIABILITY</b></p>
+
+<p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT
+NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT,
+INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING
+WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR
+DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED
+HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>
+
+<p><b>7. GENERAL</b></p>
+
+<p>If any provision of this Agreement is invalid or unenforceable under
+applicable law, it shall not affect the validity or enforceability of
+the remainder of the terms of this Agreement, and without further action
+by the parties hereto, such provision shall be reformed to the minimum
+extent necessary to make such provision valid and enforceable.</p>
+
+<p>If Recipient institutes patent litigation against any entity
+(including a cross-claim or counterclaim in a lawsuit) alleging that the
+Program itself (excluding combinations of the Program with other
+software or hardware) infringes such Recipient's patent(s), then such
+Recipient's rights granted under Section 2(b) shall terminate as of the
+date such litigation is filed.</p>
+
+<p>All Recipient's rights under this Agreement shall terminate if it
+fails to comply with any of the material terms or conditions of this
+Agreement and does not cure such failure in a reasonable period of time
+after becoming aware of such noncompliance. If all Recipient's rights
+under this Agreement terminate, Recipient agrees to cease use and
+distribution of the Program as soon as reasonably practicable. However,
+Recipient's obligations under this Agreement and any licenses granted by
+Recipient relating to the Program shall continue and survive.</p>
+
+<p>Everyone is permitted to copy and distribute copies of this
+Agreement, but in order to avoid inconsistency the Agreement is
+copyrighted and may only be modified in the following manner. The
+Agreement Steward reserves the right to publish new versions (including
+revisions) of this Agreement from time to time. No one other than the
+Agreement Steward has the right to modify this Agreement. The Eclipse
+Foundation is the initial Agreement Steward. The Eclipse Foundation may
+assign the responsibility to serve as the Agreement Steward to a
+suitable separate entity. Each new version of the Agreement will be
+given a distinguishing version number. The Program (including
+Contributions) may always be distributed subject to the version of the
+Agreement under which it was received. In addition, after a new version
+of the Agreement is published, Contributor may elect to distribute the
+Program (including its Contributions) under the new version. Except as
+expressly stated in Sections 2(a) and 2(b) above, Recipient receives no
+rights or licenses to the intellectual property of any Contributor under
+this Agreement, whether expressly, by implication, estoppel or
+otherwise. All rights in the Program not expressly granted under this
+Agreement are reserved.</p>
+
+<p>This Agreement is governed by the laws of the State of New York and
+the intellectual property laws of the United States of America. No party
+to this Agreement will bring a legal action under this Agreement more
+than one year after the cause of action arose. Each party waives its
+rights to a jury trial in any resulting litigation.</p>
+
+</body>
+
+</html>
\ No newline at end of file
@@ -16,8 +16,8 @@
     </organization>
     <licenses>
         <license>
-            <name>Common Public License Version 1.0</name>
-            <url>http://www.opensource.org/licenses/cpl1.0.txt</url>
+            <name>Eclipse Public License 1.0</name>
+            <url>http://opensource.org/licenses/eclipse-1.0.txt</url>
             <distribution>repo</distribution>
         </license>
     </licenses>
"
https://github.com/spring-projects/spring-boot/commit/6c8f8c9d827a5340f9e6493c14d8c252d1f0d52a,"Better diagnotics when ESCF subclass breaks with custom management port  <enter> When a custom management.port is used, the child context is configured with an EmbeddedServletContainerFactory bean that has the same class as the parent context’s EmbeddedServletContainerFactory bean. This ensures that the child context uses the same type of embedded container as its parent when there are multiple embedded containers on the classpath. It also causes a failure when the custom EmbeddedServletContainerFactory subclass cannot be instantiated, for example because it’s an anonymous inner-class. <enter> This commit improves the diagnostics so that we fail fast with an information exception message when we detect that the embedded servlet container factory bean’s class cannot be instantiated. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/6c8f8c9d827a5340f9e6493c14d8c252d1f0d52a,"@@ -17,6 +17,7 @@
 package org.springframework.boot.actuate.autoconfigure;
 
 import java.io.IOException;
+import java.lang.reflect.Modifier;
 
 import javax.servlet.FilterChain;
 import javax.servlet.Servlet;
@@ -28,6 +29,7 @@
 import org.apache.commons.logging.LogFactory;
 
 import org.springframework.beans.BeansException;
+import org.springframework.beans.FatalBeanException;
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.BeanFactoryAware;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
@@ -188,20 +190,38 @@ private void createChildManagementContext() {
 	private void registerEmbeddedServletContainerFactory(
 			AnnotationConfigEmbeddedWebApplicationContext childContext) {
 		try {
-			EmbeddedServletContainerFactory servletContainerFactory = this.applicationContext
-					.getBean(EmbeddedServletContainerFactory.class);
 			ConfigurableListableBeanFactory beanFactory = childContext.getBeanFactory();
 			if (beanFactory instanceof BeanDefinitionRegistry) {
 				BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;
 				registry.registerBeanDefinition(""embeddedServletContainerFactory"",
-						new RootBeanDefinition(servletContainerFactory.getClass()));
+						new RootBeanDefinition(
+								determineEmbeddedServletContainerFactoryClass()));
 			}
 		}
 		catch (NoSuchBeanDefinitionException ex) {
 			// Ignore and assume auto-configuration
 		}
 	}
 
+	private Class<?> determineEmbeddedServletContainerFactoryClass()
+			throws NoSuchBeanDefinitionException {
+		Class<?> servletContainerFactoryClass = this.applicationContext
+				.getBean(EmbeddedServletContainerFactory.class).getClass();
+		if (cannotBeInstantiated(servletContainerFactoryClass)) {
+			throw new FatalBeanException(""EmbeddedServletContainerFactory implementation ""
+					+ servletContainerFactoryClass.getName() + "" cannot be instantiated. ""
+					+ ""To allow a separate management port to be used, a top-level class ""
+					+ ""or static inner class should be used instead"");
+		}
+		return servletContainerFactoryClass;
+	}
+
+	private boolean cannotBeInstantiated(Class<?> clazz) {
+		return clazz.isLocalClass()
+				|| (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers()))
+				|| clazz.isAnonymousClass();
+	}
+
 	/**
 	 * Add an alias for 'local.management.port' that actually resolves using
 	 * 'local.server.port'.
"
https://github.com/spring-projects/spring-boot/commit/6dc14af92dbfa7b5281072d9fdde241ce0da3679,"Update view of bean types when an override is detected  <enter> Previously, when a bean was overridden and its type changes, BeanTypeRegistry could be left with a stale view of the bean's type. This would lead to incorrect bean condition evaluation as conditions would match or not match based on the bean's old type. <enter> This commit updates the type registry to refresh its view of a bean's type when its definition changes. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/6dc14af92dbfa7b5281072d9fdde241ce0da3679,"@@ -76,7 +76,7 @@ final class BeanTypeRegistry implements SmartInitializingSingleton {
 
 	private final Map<String, Class<?>> beanTypes = new HashMap<String, Class<?>>();
 
-	private int lastBeanDefinitionCount = 0;
+	private final Map<String, RootBeanDefinition> beanDefinitions = new HashMap<String, RootBeanDefinition>();
 
 	private BeanTypeRegistry(DefaultListableBeanFactory beanFactory) {
 		this.beanFactory = beanFactory;
@@ -146,7 +146,7 @@ Set<String> getNamesForAnnotation(Class<? extends Annotation> annotation) {
 	public void afterSingletonsInstantiated() {
 		// We're done at this point, free up some memory
 		this.beanTypes.clear();
-		this.lastBeanDefinitionCount = 0;
+		this.beanDefinitions.clear();
 	}
 
 	private void addBeanType(String name) {
@@ -159,10 +159,23 @@ else if (!this.beanFactory.isAlias(name)) {
 	}
 
 	private void addBeanTypeForNonAliasDefinition(String name) {
+		addBeanTypeForNonAliasDefinition(name, getBeanDefinition(name));
+	}
+
+	private RootBeanDefinition getBeanDefinition(String name) {
+		try {
+			return (RootBeanDefinition) this.beanFactory.getMergedBeanDefinition(name);
+		}
+		catch (BeanDefinitionStoreException ex) {
+			logIgnoredError(""unresolvable metadata in bean definition"", name, ex);
+			return null;
+		}
+	}
+
+	private void addBeanTypeForNonAliasDefinition(String name,
+			RootBeanDefinition beanDefinition) {
 		try {
 			String factoryName = BeanFactory.FACTORY_BEAN_PREFIX + name;
-			RootBeanDefinition beanDefinition = (RootBeanDefinition) this.beanFactory
-					.getMergedBeanDefinition(name);
 			if (!beanDefinition.isAbstract()
 					&& !requiresEagerInit(beanDefinition.getFactoryBeanName())) {
 				if (this.beanFactory.isFactoryBean(factoryName)) {
@@ -176,15 +189,12 @@ private void addBeanTypeForNonAliasDefinition(String name) {
 					this.beanTypes.put(name, this.beanFactory.getType(name));
 				}
 			}
+			this.beanDefinitions.put(name, beanDefinition);
 		}
 		catch (CannotLoadBeanClassException ex) {
 			// Probably contains a placeholder
 			logIgnoredError(""bean class loading failure for bean"", name, ex);
 		}
-		catch (BeanDefinitionStoreException ex) {
-			// Probably contains a placeholder
-			logIgnoredError(""unresolvable metadata in bean definition"", name, ex);
-		}
 	}
 
 	private void logIgnoredError(String message, String name, Exception ex) {
@@ -199,15 +209,24 @@ private boolean requiresEagerInit(String factoryBeanName) {
 	}
 
 	private void updateTypesIfNecessary() {
-		if (this.lastBeanDefinitionCount != this.beanFactory.getBeanDefinitionCount()) {
-			Iterator<String> names = this.beanFactory.getBeanNamesIterator();
-			while (names.hasNext()) {
-				String name = names.next();
-				if (!this.beanTypes.containsKey(name)) {
-					addBeanType(name);
+		Iterator<String> names = this.beanFactory.getBeanNamesIterator();
+		while (names.hasNext()) {
+			String name = names.next();
+			if (!this.beanTypes.containsKey(name)) {
+				addBeanType(name);
+			}
+			else {
+				if (!this.beanFactory.isAlias(name)
+						&& !this.beanFactory.containsSingleton(name)) {
+					RootBeanDefinition beanDefinition = getBeanDefinition(name);
+					RootBeanDefinition existingDefinition = this.beanDefinitions.put(name,
+							beanDefinition);
+					if (existingDefinition != null
+							&& !beanDefinition.equals(existingDefinition)) {
+						addBeanTypeForNonAliasDefinition(name, beanDefinition);
+					}
 				}
 			}
-			this.lastBeanDefinitionCount = this.beanFactory.getBeanDefinitionCount();
 		}
 	}
 
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -139,6 +139,16 @@ public void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation() {
 		assertThat(this.context.getBeansOfType(ExampleBean.class)).hasSize(1);
 	}
 
+	@Test
+	public void conditionEvaluationConsidersChangeInTypeWhenBeanIsOverridden() {
+		this.context.register(OriginalDefinition.class, OverridingDefinition.class,
+				ConsumingConfiguration.class);
+		this.context.refresh();
+		assertThat(this.context.containsBean(""testBean"")).isTrue();
+		assertThat(this.context.getBean(Integer.class)).isEqualTo(1);
+		assertThat(this.context.getBeansOfType(ConsumingConfiguration.class)).isEmpty();
+	}
+
 	@Configuration
 	@ConditionalOnBean(name = ""foo"")
 	protected static class OnBeanNameConfiguration {
@@ -311,4 +321,35 @@ public String toString() {
 
 	}
 
+	@Configuration
+	public static class OriginalDefinition {
+
+		@Bean
+		public String testBean() {
+			return ""test"";
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnBean(String.class)
+	public static class OverridingDefinition {
+
+		@Bean
+		public Integer testBean() {
+			return 1;
+		}
+
+	}
+
+	@Configuration
+	@ConditionalOnBean(String.class)
+	public static class ConsumingConfiguration {
+
+		ConsumingConfiguration(String testBean) {
+
+		}
+
+	}
+
 }
"
https://github.com/square/okhttp/commit/868ee844458eda9ee7b1b6f9a5238b7c3f84c0e4,"Drop our one remaining DSS cipher suite.  <enter> Tracking Chrome and Firefox, which have also dropped this cipher suite. <enter> This is the only cipher suite change since the last update. See our cipher suites spreadsheet for a comparison:  https://goo.gl/dWXbi0  <enter>  Closes   <issue_link> ",https://api.github.com/repos/square/okhttp/commits/868ee844458eda9ee7b1b6f9a5238b7c3f84c0e4,"@@ -37,7 +37,7 @@
  */
 public final class ConnectionSpec {
 
-  // This is a subset of the cipher suites supported in Chrome 37, current as of 2014-10-5.
+  // This is a subset of the cipher suites supported in Chrome 46, current as of 2015-11-05.
   // All of these suites are available on Android 5.0; earlier releases support a subset of
   // these suites. https://github.com/square/okhttp/issues/330
   private static final CipherSuite[] APPROVED_CIPHER_SUITES = new CipherSuite[] {
@@ -53,7 +53,6 @@ public final class ConnectionSpec {
       CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
       CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
       CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
-      CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA,
       CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
       CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256,
       CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA,
"
https://github.com/spring-projects/spring-boot/commit/e233ea7f546fcbc5fccf972bc70c26373103444c,Fix undertow access_log file name  <enter> Undertow 1.3.2 changed the default access log file suffix from '.log' to just 'log'. Thus we need to adapt the file name pattern to include the missing dot. <enter>  Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/e233ea7f546fcbc5fccf972bc70c26373103444c,"@@ -384,7 +384,7 @@ private AccessLogHandler createAccessLogHandler(HttpHandler handler) {
 		try {
 			createAccessLogDirectoryIfNecessary();
 			AccessLogReceiver accessLogReceiver = new DefaultAccessLogReceiver(
-					createWorker(), this.accessLogDirectory, ""access_log"");
+					createWorker(), this.accessLogDirectory, ""access_log."");
 			String formatString = (this.accessLogPattern != null) ? this.accessLogPattern
 					: ""common"";
 			return new AccessLogHandler(handler, accessLogReceiver, formatString,
"
https://github.com/spring-projects/spring-boot/commit/247c596f8ceb657800e86d0ca59d4816aa67026b,Remove duplicate console appender from Actuator sample's logback config  <enter> Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/247c596f8ceb657800e86d0ca59d4816aa67026b,"@@ -1,7 +1,6 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <configuration>
 	<include resource=""org/springframework/boot/logging/logback/base.xml"" />
-	<include resource=""org/springframework/boot/logging/logback/console-appender.xml"" />
 	<root level=""INFO"">
 		<appender-ref ref=""CONSOLE"" />
 	</root>
"
https://github.com/junit-team/junit4/commit/591fcae09c6470a03ade7d608773f8f633409bc2,Added more Javadoc to Assert for messages and when they are displayed.  <enter> Put versiontag back into Version. ,https://api.github.com/repos/junit-team/junit4/commits/591fcae09c6470a03ade7d608773f8f633409bc2,"@@ -1,7 +1,7 @@
 package junit.framework;
 
 /**
- * A set of assert methods.
+ * A set of assert methods.  Messages are only displayed when an assert fails.
  */
 
 public class Assert {
@@ -59,20 +59,20 @@ static public void assertFalse(boolean condition) {
 		assertFalse(null, condition);
 	}
 	/**
-	 * Fails a test with the given message. 
+	 * Fails a test with the given message.
 	 */
 	static public void fail(String message) {
 		throw new AssertionFailedError(message);
 	}
 	/**
-	 * Fails a test with no message. 
+	 * Fails a test with no message.
 	 */
 	static public void fail() {
 		fail(null);
 	}
 	/**
 	 * Asserts that two objects are equal. If they are not
-	 * an AssertionFailedError is thrown.
+	 * an AssertionFailedError is thrown with the given message.
 	 */
 	static public void assertEquals(String message, Object expected, Object actual) {
 		if (expected == null && actual == null)
@@ -89,7 +89,8 @@ static public void assertEquals(Object expected, Object actual) {
 	    assertEquals(null, expected, actual);
 	}
 	/**
-	 * Asserts that two doubles are equal concerning a delta. If the expected
+	 * Asserts that two doubles are equal concerning a delta.  If they are not
+	 * an AssertionFailedError is thrown with the given message.  If the expected
 	 * value is infinity then the delta value is ignored.
 	 */
 	static public void assertEquals(String message, double expected, double actual, double delta) {
@@ -109,7 +110,8 @@ static public void assertEquals(double expected, double actual, double delta) {
 	    assertEquals(null, expected, actual, delta);
 	}
 	/**
-	 * Asserts that two floats are equal concerning a delta. If the expected
+	 * Asserts that two floats are equal concerning a delta. If they are not
+	 * an AssertionFailedError is thrown with the given message.  If the expected
 	 * value is infinity then the delta value is ignored.
 	 */
 	static public void assertEquals(String message, float expected, float actual, float delta) {
@@ -129,7 +131,8 @@ static public void assertEquals(float expected, float actual, float delta) {
 		assertEquals(null, expected, actual, delta);
 	}
 	/**
-	 * Asserts that two longs are equal.
+	 * Asserts that two longs are equal. If they are not
+	 * an AssertionFailedError is thrown with the given message.
 	 */
 	static public void assertEquals(String message, long expected, long actual) {
 	    assertEquals(message, new Long(expected), new Long(actual));
@@ -141,7 +144,8 @@ static public void assertEquals(long expected, long actual) {
 	    assertEquals(null, expected, actual);
 	}
 	/**
-	 * Asserts that two booleans are equal.
+	 * Asserts that two booleans are equal. If they are not
+	 * an AssertionFailedError is thrown with the given message.
 	 */
 	static public void assertEquals(String message, boolean expected, boolean actual) {
     		assertEquals(message, new Boolean(expected), new Boolean(actual));
@@ -153,7 +157,8 @@ static public void assertEquals(boolean expected, boolean actual) {
 		assertEquals(null, expected, actual);
 	}
 	/**
-	 * Asserts that two bytes are equal.
+	 * Asserts that two bytes are equal. If they are not
+	 * an AssertionFailedError is thrown with the given message.
 	 */
   	static public void assertEquals(String message, byte expected, byte actual) {
 		assertEquals(message, new Byte(expected), new Byte(actual));
@@ -165,7 +170,8 @@ static public void assertEquals(byte expected, byte actual) {
 		assertEquals(null, expected, actual);
 	}
 	/**
-	 * Asserts that two chars are equal.
+	 * Asserts that two chars are equal. If they are not
+	 * an AssertionFailedError is thrown with the given message.
 	 */
   	static public void assertEquals(String message, char expected, char actual) {
     		assertEquals(message, new Character(expected), new Character(actual));
@@ -177,7 +183,8 @@ static public void assertEquals(char expected, char actual) {
 		assertEquals(null, expected, actual);
 	}
 	/**
-	 * Asserts that two shorts are equal.
+	 * Asserts that two shorts are equal. If they are not
+	 * an AssertionFailedError is thrown with the given message.
 	 */
 	static public void assertEquals(String message, short expected, short actual) {
     		assertEquals(message, new Short(expected), new Short(actual));
@@ -189,7 +196,8 @@ static public void assertEquals(short expected, short actual) {
 		assertEquals(null, expected, actual);
 	}
 	/**
-	 * Asserts that two ints are equal.
+	 * Asserts that two ints are equal. If they are not
+	 * an AssertionFailedError is thrown with the given message.
 	 */
   	static public void assertEquals(String message, int expected, int actual) {
 		assertEquals(message, new Integer(expected), new Integer(actual));
@@ -207,10 +215,11 @@ static public void assertNotNull(Object object) {
 		assertNotNull(null, object);
 	}
 	/**
-	 * Asserts that an object isn't null.
+	 * Asserts that an object isn't null. If it is
+	 * an AssertionFailedError is thrown with the given message.
 	 */
 	static public void assertNotNull(String message, Object object) {
-		assertTrue(message, object != null); 
+		assertTrue(message, object != null);
 	}
 	/**
 	 * Asserts that an object is null.
@@ -219,14 +228,15 @@ static public void assertNull(Object object) {
 		assertNull(null, object);
 	}
 	/**
-	 * Asserts that an object is null.
+	 * Asserts that an object is null.  If it is not
+	 * an AssertionFailedError is thrown with the given message.
 	 */
 	static public void assertNull(String message, Object object) {
-		assertTrue(message, object == null); 
+		assertTrue(message, object == null);
 	}
 	/**
 	 * Asserts that two objects refer to the same object. If they are not
-	 * an AssertionFailedError is thrown.
+	 * an AssertionFailedError is thrown with the given message.
 	 */
 	static public void assertSame(String message, Object expected, Object actual) {
 		if (expected == actual)
@@ -242,7 +252,7 @@ static public void assertSame(Object expected, Object actual) {
 	}
  	/**
  	 * Asserts that two objects refer to the same object. If they are not
- 	 * an AssertionFailedError is thrown.
+ 	 * an AssertionFailedError is thrown with the given message.
  	 */
 	static public void assertNotSame(String message, Object expected, Object actual) {
 		if (expected == actual)
@@ -255,7 +265,7 @@ static public void assertNotSame(String message, Object expected, Object actual)
 	static public void assertNotSame(Object expected, Object actual) {
 		assertNotSame(null, expected, actual);
 	}
- 	
+
 	static private void failSame(String message, Object expected, Object actual) {
 		String formatted= """";
  		if (message != null)
@@ -1,14 +1,14 @@
-package junit.runner;   
-    
-/**   
- * This class defines the current version of JUnit   
- */   
-public class Version {   
-	private Version() {   
-		// don't instantiate   
-	}   
+package junit.runner;
 
-	public static String id() {   
-		return ""3.7"";   
-	}   
-} 
+/**
+ * This class defines the current version of JUnit
+ */
+public class Version {
+	private Version() {
+		// don't instantiate
+	}
+
+	public static String id() {
+		return ""@version@"";
+	}
+}
"
https://github.com/junit-team/junit4/commit/870289f3272917f312de6902b8b6bdc43552d4b7,Simplify Filter implementation for backward compatibility ,https://api.github.com/repos/junit-team/junit4/commits/870289f3272917f312de6902b8b6bdc43552d4b7,"@@ -28,7 +28,7 @@ public JUnit4TestAdapter(final Class<?> newTestClass,
 			JUnit4TestAdapterCache cache) {
 		fCache = cache;
 		fNewTestClass = newTestClass;
-		fRunner = Request.classWithoutSuiteMethod(newTestClass).getRunner();
+		fRunner = Request.classWithoutSuiteMethod(newTestClass).filterWith(removeIgnored()).getRunner();
 	}
 
 	public int countTestCases() {
@@ -50,20 +50,21 @@ public Class<?> getTestClass() {
 	}
 	
 	public Description getDescription() {
-		Description description= fRunner.getDescription();		
-		return removeIgnored(description);
+		return fRunner.getDescription();
 	}
 
-	private Description removeIgnored(Description description) {
-		if (isIgnored(description))
-			return Description.EMPTY;
-		Description result = description.childlessCopy();
-		for (Description each : description.getChildren()) {
-			Description child= removeIgnored(each);
-			if (! child.isEmpty())
-				result.addChild(child);
-		}
-		return result;
+	private Filter removeIgnored() {
+		return new Filter() {			
+			@Override
+			public boolean shouldRun(Description description) {
+				return !isIgnored(description);
+			}
+			
+			@Override
+			public String describe() {
+				return ""not ignored"";
+			}
+		};
 	}
 
 	private boolean isIgnored(Description description) {
@@ -13,6 +13,7 @@
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Request;
 import org.junit.runner.Result;
+import org.junit.runner.Runner;
 
 public class SuiteMethodTest {
 	public static boolean wasRun;
@@ -21,94 +22,108 @@ static public class OldTest extends TestCase {
 		public OldTest(String name) {
 			super(name);
 		}
-		
+
 		public static junit.framework.Test suite() {
 			TestSuite result= new TestSuite();
 			result.addTest(new OldTest(""notObviouslyATest""));
 			return result;
 		}
-		
+
 		public void notObviouslyATest() {
 			wasRun= true;
 		}
 	}
-	
-	@Test public void makeSureSuiteIsCalled() {
+
+	@Test
+	public void makeSureSuiteIsCalled() {
 		wasRun= false;
 		JUnitCore.runClasses(OldTest.class);
 		assertTrue(wasRun);
 	}
-	
+
 	static public class NewTest {
-		@Test public void sample() {
+		@Test
+		public void sample() {
 			wasRun= true;
 		}
 
 		public static junit.framework.Test suite() {
 			return new JUnit4TestAdapter(NewTest.class);
 		}
 	}
-	
-	@Test public void makeSureSuiteWorksWithJUnit4Classes() {
+
+	@Test
+	public void makeSureSuiteWorksWithJUnit4Classes() {
 		wasRun= false;
 		JUnitCore.runClasses(NewTest.class);
 		assertTrue(wasRun);
 	}
-	
 
 	public static class CompatibilityTest {
-		@Ignore	@Test
+		@Ignore
+		@Test
 		public void ignored() {
 		}
-		
+
 		public static junit.framework.Test suite() {
 			return new JUnit4TestAdapter(CompatibilityTest.class);
 		}
 	}
-	
-	@Test public void descriptionAndRunNotificationsAreConsistent() {
+
+	// when executing as JUnit 3, ignored tests are stripped out before execution
+	@Test
+	public void descriptionAndRunNotificationsAreConsistent() {
 		Result result= JUnitCore.runClasses(CompatibilityTest.class);
 		assertEquals(0, result.getIgnoreCount());
-		
-		Description description= Request.aClass(CompatibilityTest.class).getRunner().getDescription();
-		assertEquals(0, description.getChildren().size());
+
+		Runner runner= Request.aClass(CompatibilityTest.class).getRunner();
+		Description description= runner.getDescription();
+		assertEquals(1, description.getChildren().size());
+		assertEquals(""initializationError"", description.getChildren().get(0)
+				.getMethodName());
 	}
-	
+
 	static public class NewTestSuiteFails {
-		@Test public void sample() {
+		@Test
+		public void sample() {
 			wasRun= true;
 		}
-		
+
 		public static junit.framework.Test suite() {
 			fail(""called with JUnit 4 runner"");
 			return null;
 		}
 	}
-	
-	@Test public void suiteIsUsedWithJUnit4Classes() {
+
+	@Test
+	public void suiteIsUsedWithJUnit4Classes() {
 		wasRun= false;
 		Result result= JUnitCore.runClasses(NewTestSuiteFails.class);
 		assertEquals(1, result.getFailureCount());
 		assertFalse(wasRun);
 	}
-	
+
 	static public class NewTestSuiteNotUsed {
 		private static boolean wasIgnoredRun;
-		
-		@Test public void sample() {
+
+		@Test
+		public void sample() {
 			wasRun= true;
 		}
-		
-		@Ignore @Test public void ignore() {
+
+		@Ignore
+		@Test
+		public void ignore() {
 			wasIgnoredRun= true;
 		}
-		
+
 		public static junit.framework.Test suite() {
 			return new JUnit4TestAdapter(NewTestSuiteNotUsed.class);
 		}
 	}
-	
-	@Test public void makeSureSuiteNotUsedWithJUnit4Classes2() {
+
+	@Test
+	public void makeSureSuiteNotUsedWithJUnit4Classes2() {
 		wasRun= false;
 		NewTestSuiteNotUsed.wasIgnoredRun= false;
 		Result res= JUnitCore.runClasses(NewTestSuiteNotUsed.class);
"
https://github.com/square/retrofit/commit/c0cc4cb5bbf688a11dda5531f009300b20005e61,RxJava 1.0.14 with an important Android fix.  <enter> Just in case someone is relying on the transitive dependency. ,https://api.github.com/repos/square/retrofit/commits/c0cc4cb5bbf688a11dda5531f009300b20005e61,"@@ -54,7 +54,7 @@
     <animal.sniffer.version>1.14</animal.sniffer.version>
 
     <!-- Adapter Dependencies -->
-    <rxjava.version>1.0.13</rxjava.version>
+    <rxjava.version>1.0.14</rxjava.version>
 
     <!-- Converter Dependencies -->
     <gson.version>2.3.1</gson.version>
"
https://github.com/apache/dubbo/commit/e8d85386bc7869d3a6e5b27c12ec7784c74bc2d6,Format code ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/e8d85386bc7869d3a6e5b27c12ec7784c74bc2d6,"@@ -36,7 +36,7 @@
 public class RoundRobinLoadBalance extends AbstractLoadBalance {
     public static final String NAME = ""roundrobin"";
     
-    private static int RECYCLE_PERIOD = 60000;
+    private static final int RECYCLE_PERIOD = 60000;
     
     protected static class WeightedRoundRobin {
         private int weight;
@@ -47,7 +47,7 @@ public class ConditionRouter extends AbstractRouter {
     public static final String NAME = ""condition"";
 
     private static final Logger logger = LoggerFactory.getLogger(ConditionRouter.class);
-    protected static Pattern ROUTE_PATTERN = Pattern.compile(""([&!=,]*)\\s*([^&!=,\\s]+)"");
+    protected static final Pattern ROUTE_PATTERN = Pattern.compile(""([&!=,]*)\\s*([^&!=,\\s]+)"");
     protected Map<String, MatchPair> whenCondition;
     protected Map<String, MatchPair> thenCondition;
 
@@ -156,9 +156,9 @@ private Invoker<T> doSelect(LoadBalance loadbalance, Invocation invocation,
         if ((selected != null && selected.contains(invoker))
                 || (!invoker.isAvailable() && getUrl() != null && availablecheck)) {
             try {
-                Invoker<T> rinvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck);
-                if (rinvoker != null) {
-                    invoker = rinvoker;
+                Invoker<T> rInvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck);
+                if (rInvoker != null) {
+                    invoker = rInvoker;
                 } else {
                     //Check the index of current selected invoker, if it's not the last one, choose the one at index+1.
                     int index = invokers.indexOf(invoker);
@@ -43,7 +43,7 @@ public class QosProcessHandler extends ByteToMessageDecoder {
     // true means to accept foreign IP
     private boolean acceptForeignIp;
 
-    public static String prompt = ""dubbo>"";
+    public static final String prompt = ""dubbo>"";
 
     public QosProcessHandler(String welcome, boolean acceptForeignIp) {
         this.welcome = welcome;
@@ -44,9 +44,9 @@ public class HeaderExchangeHandler implements ChannelHandlerDelegate {
 
     protected static final Logger logger = LoggerFactory.getLogger(HeaderExchangeHandler.class);
 
-    public static String KEY_READ_TIMESTAMP = HeartbeatHandler.KEY_READ_TIMESTAMP;
+    public static final String KEY_READ_TIMESTAMP = HeartbeatHandler.KEY_READ_TIMESTAMP;
 
-    public static String KEY_WRITE_TIMESTAMP = HeartbeatHandler.KEY_WRITE_TIMESTAMP;
+    public static final String KEY_WRITE_TIMESTAMP = HeartbeatHandler.KEY_WRITE_TIMESTAMP;
 
     private final ExchangeHandler handler;
 
@@ -31,9 +31,9 @@ public class HeartbeatHandler extends AbstractChannelHandlerDelegate {
 
     private static final Logger logger = LoggerFactory.getLogger(HeartbeatHandler.class);
 
-    public static String KEY_READ_TIMESTAMP = ""READ_TIMESTAMP"";
+    public static final String KEY_READ_TIMESTAMP = ""READ_TIMESTAMP"";
 
-    public static String KEY_WRITE_TIMESTAMP = ""WRITE_TIMESTAMP"";
+    public static final String KEY_WRITE_TIMESTAMP = ""WRITE_TIMESTAMP"";
 
     public HeartbeatHandler(ChannelHandler handler) {
         super(handler);
"
https://github.com/square/okhttp/commit/6cf56de5d0701ff26aa6043c552e17c4665c1287,"Return HttpResponseCache to previous (e.g. KitKat) behavior  <enter> This change required to handle this Android scenario: <enter> When this version of OkHttp is packaged into Android in a future release (in com.android.okhttp...) there is a possibility that an older version of OkHttp bundled with application (in com.squareup.okhttp...) will pick up the newer HttpResponseCache via ResponseCache.getDefault(). It will attempt to use the get() / put() methods. Commit  <otherCommit_link>  was intended to restore HttpResponseCache get() and put() and avoid the UnsupportedOperationException that would be thrown. <enter> Unfortunately, it didn't quite do it: <enter> In KitKat and older versions OkHttp, in HttpResponseCache the behavior was to ignore any calls to put(URI, URLConnection) including any HttpURLConnection/HttpsURLConnection that wasn't its own (i.e. only ones from com.android.okhttp would be cached). The previous fix to HttpResponseCache re-introduced get()/put() but didn't implement the necessary instanceof checks. <enter> Jesse also informs me that coexistance with other implementations of HttpURLConnection is not required (since OkHttp replaces the HTTP implementation on the desktop). I have also since discovered that HttpResponseCache didn't implement the cache-control logic required to follow the letter of the Java API anyway, which means that HttpResponseCache is not suitable for use in cases where the Http(s)URLConnection implementation expects a fully compliant implementation. <enter> Also addressed nits from  <otherCommit_link> . ",https://api.github.com/repos/square/okhttp/commits/6cf56de5d0701ff26aa6043c552e17c4665c1287,"@@ -53,6 +53,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
@@ -1861,28 +1862,60 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
     assertEquals(""foo"", connection.getHeaderField(""etag""));
   }
 
-  // For compatibility with Java HttpURLConnections, and when Android-bundled and and older
-  // app-bundled OkHttp library are in use at the same time in an Android app, the HttpResponseCache
-  // must behave as a working, Java compliant, ResponseCache.
-  @Test public void testHttpResponseCacheIsValidResponseCache() throws Exception {
+  // Older versions of OkHttp use ResponseCache.get() and ResponseCache.put(). For compatibility
+  // with Android apps when the Android-bundled and and an older app-bundled OkHttp library are in
+  // use at the same time the HttpResponseCache must behave as it always used to. That's not the
+  // same as a fully API-compliant {@link ResponseCache}: That means that the cache
+  // doesn't throw an exception from get() or put() and also does not cache requests/responses from
+  // anything other than the variant of OkHttp that it comes with. It does still return values from
+  // get() and it is not expected to implement any cache-control logic.
+  @Test public void testHttpResponseCacheBackwardsCompatible() throws Exception {
     assertSame(cache, ResponseCache.getDefault());
+    assertEquals(0, cache.getRequestCount());
 
     String body = ""Body"";
-    server.enqueue(new MockResponse().setBody(body));
+    server.enqueue(new MockResponse()
+        .addHeader(""Last-Modified: "" + formatDate(-1, TimeUnit.HOURS))
+        .addHeader(""Expires: "" + formatDate(1, TimeUnit.HOURS))
+        .setBody(body));
     server.play();
 
-    // Use a standard Java HttpURLConnection, which will pick up the default ResponseCache.
     URL url = server.getUrl(""/"");
-    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-    assertEquals(body, readAscii(connection));
-    connection.disconnect();
 
-    // Next request should be cached.
-    HttpURLConnection connection2 = (HttpURLConnection) url.openConnection();
-    assertEquals(body, readAscii(connection2));
-    connection2.disconnect();
+    // Here we use a HttpURLConnection from URL to represent a non-OkHttp HttpURLConnection. In
+    // Android this would be com.android.okhttp.internal.http.HttpURLConnectionImpl. In tests this
+    // is some other implementation.
+    HttpURLConnection javaConnection = (HttpURLConnection) url.openConnection();
+    assertFalse(""This test relies on url.openConnection() not returning an OkHttp connection"",
+        javaConnection instanceof HttpURLConnectionImpl);
+    javaConnection.disconnect();
+
+    // This should simply be discarded. It doesn't matter the connection is not useful.
+    cache.put(url.toURI(), javaConnection);
+
+    // Confirm the initial cache state.
+    assertNull(cache.get(url.toURI(), ""GET"", new HashMap<String, List<String>>()));
+
+    // Now cache a response
+    HttpURLConnection okHttpConnection = openConnection(url);
+    assertEquals(body, readAscii(okHttpConnection));
+    okHttpConnection.disconnect();
 
     assertEquals(1, server.getRequestCount());
+    assertEquals(0, cache.getHitCount());
+
+    // OkHttp should now find the result cached.
+    HttpURLConnection okHttpConnection2 = openConnection(url);
+    assertEquals(body, readAscii(okHttpConnection2));
+    okHttpConnection2.disconnect();
+
+    assertEquals(1, server.getRequestCount());
+    assertEquals(1, cache.getHitCount());
+
+    // Confirm the unfortunate get() behavior.
+    assertNotNull(cache.get(url.toURI(), ""GET"", new HashMap<String, List<String>>()));
+    // Only OkHttp makes the necessary callbacks to increment the cache stats.
+    assertEquals(1, cache.getHitCount());
   }
 
   private void writeFile(File directory, String file, String content) throws IOException {
@@ -49,7 +49,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -432,9 +432,9 @@ public Principal getLocalPrincipal() {
     // Check retrieval using a Map.
     Map<String, List<String>> responseHeaders = httpUrlConnection.getHeaderFields();
     assertEquals(Arrays.asList(statusLine), responseHeaders.get(null));
-    assertEquals(newSet(""c"", ""e""), new HashSet<String>(responseHeaders.get(""A"")));
+    assertEquals(newSet(""c"", ""e""), newSet(responseHeaders.get(""A"")));
     // OkHttp supports case-insensitive matching here. The RI does not.
-    assertEquals(newSet(""c"", ""e""), new HashSet<String>(responseHeaders.get(""a"")));
+    assertEquals(newSet(""c"", ""e""), newSet(responseHeaders.get(""a"")));
 
     // Check the Map iterator contains the expected mappings.
     assertHeadersContainsMapping(responseHeaders, null, statusLine);
@@ -485,7 +485,7 @@ private static void assertResponseHeaderAtIndex(HttpURLConnection httpUrlConnect
   private void assertHeadersContainsMapping(Map<String, List<String>> headers, String expectedKey,
       String... expectedValues) {
     assertTrue(headers.containsKey(expectedKey));
-    assertEquals(newSet(expectedValues), new HashSet<String>(headers.get(expectedKey)));
+    assertEquals(newSet(expectedValues), newSet(headers.get(expectedKey)));
   }
 
   @Test public void createJavaUrlConnection_accessibleRequestInfo_GET() throws Exception {
@@ -717,8 +717,12 @@ private static X509Certificate certificate(String certificate) {
     }
   }
 
-  private static Set<String> newSet(String... elements) {
-    return new HashSet<String>(Arrays.asList(elements));
+  private static <T> Set<T> newSet(T... elements) {
+    return newSet(Arrays.asList(elements));
+  }
+
+  private static <T> Set<T> newSet(List<T> elements) {
+    return new LinkedHashSet<T>(elements);
   }
 
   private static Request createArbitraryOkRequest() {
@@ -55,8 +55,8 @@
  * <ul>
  *   <li>{@link ResponseCacheTest} for black-box tests that check that {@link ResponseCache}
  *   classes are called correctly by OkHttp.</li>
- *   <li>{@link JavaApiConverterTest} for tests that check Java API classes <-> OkHttp conversion logic.
- *   </li>
+ *   <li>{@link JavaApiConverterTest} for tests that check Java API classes / OkHttp conversion
+ *   logic. </li>
  * </ul>
  */
 public class ResponseCacheAdapterTest {
@@ -19,6 +19,8 @@
 import com.squareup.okhttp.internal.DiskLruCache;
 import com.squareup.okhttp.internal.Util;
 import com.squareup.okhttp.internal.http.HttpMethod;
+import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;
+import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
 import com.squareup.okhttp.internal.http.JavaApiConverter;
 import java.io.BufferedWriter;
 import java.io.ByteArrayInputStream;
@@ -53,6 +55,18 @@
  * Caches HTTP and HTTPS responses to the filesystem so they may be reused,
  * saving time and bandwidth.
  *
+ * <p>This cache extends {@link ResponseCache} but is only intended for use
+ * with OkHttp and is not a general-purpose implementation: The
+ * {@link ResponseCache} API requires that the subclass handles cache-control
+ * logic as well as storage. In OkHttp the {@link HttpResponseCache} only
+ * handles cursory cache-control logic.
+ *
+ * <p>To maintain support for previous releases the {@link HttpResponseCache}
+ * will disregard any {@link #put(java.net.URI, java.net.URLConnection)}
+ * calls with a URLConnection that is not from OkHttp. It will, however,
+ * return cached data for any calls to {@link #get(java.net.URI, String,
+ * java.util.Map)}.
+ *
  * <h3>Cache Optimization</h3>
  * To measure cache effectiveness, this class tracks three statistics:
  * <ul>
@@ -168,9 +182,17 @@ private static String urlToKey(Request requst) {
   }
 
   @Override public CacheRequest put(URI uri, URLConnection urlConnection) throws IOException {
+    if (!isCacheableConnection(urlConnection)) {
+      return null;
+    }
     return put(JavaApiConverter.createOkResponse(uri, urlConnection));
   }
 
+  private static boolean isCacheableConnection(URLConnection httpConnection) {
+    return (httpConnection instanceof HttpURLConnectionImpl)
+        || (httpConnection instanceof HttpsURLConnectionImpl);
+  }
+
   @Override public CacheRequest put(Response response) throws IOException {
     String requestMethod = response.request().method();
 
@@ -52,10 +52,6 @@ private JavaApiConverter() {
   /**
    * Creates an OkHttp {@link Response} using the supplied {@link URI} and {@link URLConnection}
    * to supply the data. The URLConnection is assumed to already be connected.
-   *
-   * <p>Note: Because this method is used by HttpResponseCache, this class is intended for use with
-   * any Java-API compliant HttpURLConnection / HttpsURLConnection and not just ones implemented by
-   * OkHttp.
    */
   public static Response createOkResponse(URI uri, URLConnection urlConnection) throws IOException {
     HttpURLConnection httpUrlConnection = (HttpURLConnection) urlConnection;
"
https://github.com/square/okhttp/commit/137e7de0454f10160370f105ac7d9d2fc5403c84,"New API, HandshakeCertificates.addPlatformTrustedCertificates()  <enter> Also rename HeldCertificate.Builder.issuedBy() to signedBy(). 'Issued' is the word used by certificates; 'signed' is the word used by cryptographers. I prefer 'signed'. ",https://api.github.com/repos/square/okhttp/commits/137e7de0454f10160370f105ac7d9d2fc5403c84,"@@ -530,7 +530,7 @@ private List<String> headersToList(MockResponse response) {
         .certificateAuthority(0)
         .build();
     HeldCertificate serverCertificate = new HeldCertificate.Builder()
-        .issuedBy(serverCa)
+        .signedBy(serverCa)
         .addSubjectAlternativeName(server.getHostName())
         .build();
     HandshakeCertificates serverHandshakeCertificates = new HandshakeCertificates.Builder()
@@ -543,7 +543,7 @@ private List<String> headersToList(MockResponse response) {
     server.requestClientAuth();
 
     HeldCertificate clientCertificate = new HeldCertificate.Builder()
-        .issuedBy(clientCa)
+        .signedBy(clientCa)
         .build();
     HandshakeCertificates clientHandshakeCertificates = new HandshakeCertificates.Builder()
         .addTrustedCertificate(serverCa.certificate())
@@ -77,11 +77,11 @@ public final class CertificateChainCleanerTest {
         .build();
     HeldCertificate certA = new HeldCertificate.Builder()
         .serialNumber(2L)
-        .issuedBy(root)
+        .signedBy(root)
         .build();
     HeldCertificate certB = new HeldCertificate.Builder()
         .serialNumber(3L)
-        .issuedBy(certA)
+        .signedBy(certA)
         .build();
 
     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate());
@@ -94,11 +94,11 @@ public final class CertificateChainCleanerTest {
         .build();
     HeldCertificate certA = new HeldCertificate.Builder()
         .serialNumber(2L)
-        .issuedBy(root)
+        .signedBy(root)
         .build();
     HeldCertificate certB = new HeldCertificate.Builder()
         .serialNumber(3L)
-        .issuedBy(certA)
+        .signedBy(certA)
         .build();
 
     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate());
@@ -112,15 +112,15 @@ public final class CertificateChainCleanerTest {
         .build();
     HeldCertificate certA = new HeldCertificate.Builder()
         .serialNumber(2L)
-        .issuedBy(root)
+        .signedBy(root)
         .build();
     HeldCertificate certB = new HeldCertificate.Builder()
         .serialNumber(3L)
-        .issuedBy(certA)
+        .signedBy(certA)
         .build();
     HeldCertificate certC = new HeldCertificate.Builder()
         .serialNumber(4L)
-        .issuedBy(certB)
+        .signedBy(certB)
         .build();
 
     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate());
@@ -134,15 +134,15 @@ public final class CertificateChainCleanerTest {
         .build();
     HeldCertificate certA = new HeldCertificate.Builder()
         .serialNumber(2L)
-        .issuedBy(root)
+        .signedBy(root)
         .build();
     HeldCertificate certB = new HeldCertificate.Builder()
         .serialNumber(3L)
-        .issuedBy(certA)
+        .signedBy(certA)
         .build();
     HeldCertificate certC = new HeldCertificate.Builder()
         .serialNumber(4L)
-        .issuedBy(certB)
+        .signedBy(certB)
         .build();
 
     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate());
@@ -156,11 +156,11 @@ public final class CertificateChainCleanerTest {
         .build();
     HeldCertificate certA = new HeldCertificate.Builder()
         .serialNumber(2L)
-        .issuedBy(root)
+        .signedBy(root)
         .build();
     HeldCertificate certB = new HeldCertificate.Builder()
         .serialNumber(3L)
-        .issuedBy(certA)
+        .signedBy(certA)
         .build();
     HeldCertificate certUnnecessary = new HeldCertificate.Builder()
         .serialNumber(4L)
@@ -177,15 +177,15 @@ public final class CertificateChainCleanerTest {
         .build();
     HeldCertificate trusted = new HeldCertificate.Builder()
         .serialNumber(2L)
-        .issuedBy(selfSigned)
+        .signedBy(selfSigned)
         .build();
     HeldCertificate certA = new HeldCertificate.Builder()
         .serialNumber(3L)
-        .issuedBy(trusted)
+        .signedBy(trusted)
         .build();
     HeldCertificate certB = new HeldCertificate.Builder()
         .serialNumber(4L)
-        .issuedBy(certA)
+        .signedBy(certA)
         .build();
 
     CertificateChainCleaner cleaner = CertificateChainCleaner.get(
@@ -203,15 +203,15 @@ public final class CertificateChainCleanerTest {
         .serialNumber(1L)
         .build();
     HeldCertificate trusted = new HeldCertificate.Builder()
-        .issuedBy(unknownSigner)
+        .signedBy(unknownSigner)
         .serialNumber(2L)
         .build();
     HeldCertificate intermediateCa = new HeldCertificate.Builder()
-        .issuedBy(trusted)
+        .signedBy(trusted)
         .serialNumber(3L)
         .build();
     HeldCertificate certificate = new HeldCertificate.Builder()
-        .issuedBy(intermediateCa)
+        .signedBy(intermediateCa)
         .serialNumber(4L)
         .build();
 
@@ -256,7 +256,7 @@ private List<HeldCertificate> chainOfLength(int length) {
     List<HeldCertificate> result = new ArrayList<>();
     for (int i = 1; i <= length; i++) {
       result.add(0, new HeldCertificate.Builder()
-          .issuedBy(!result.isEmpty() ? result.get(0) : null)
+          .signedBy(!result.isEmpty() ? result.get(0) : null)
           .serialNumber(i)
           .build());
     }
@@ -56,7 +56,7 @@ public final class ConnectionCoalescingTest {
         .commonName(""root"")
         .build();
     certificate = new HeldCertificate.Builder()
-        .issuedBy(rootCa)
+        .signedBy(rootCa)
         .serialNumber(2L)
         .commonName(server.getHostName())
         .addSubjectAlternativeName(server.getHostName())
@@ -61,13 +61,13 @@ public final class CertificatePinnerChainValidationTest {
         .commonName(""root"")
         .build();
     HeldCertificate intermediateCa = new HeldCertificate.Builder()
-        .issuedBy(rootCa)
+        .signedBy(rootCa)
         .certificateAuthority(0)
         .serialNumber(2L)
         .commonName(""intermediate_ca"")
         .build();
     HeldCertificate certificate = new HeldCertificate.Builder()
-        .issuedBy(intermediateCa)
+        .signedBy(intermediateCa)
         .serialNumber(3L)
         .commonName(server.getHostName())
         .build();
@@ -118,13 +118,13 @@ public final class CertificatePinnerChainValidationTest {
         .commonName(""root"")
         .build();
     HeldCertificate intermediateCa = new HeldCertificate.Builder()
-        .issuedBy(rootCa)
+        .signedBy(rootCa)
         .certificateAuthority(0)
         .serialNumber(2L)
         .commonName(""intermediate_ca"")
         .build();
     HeldCertificate certificate = new HeldCertificate.Builder()
-        .issuedBy(intermediateCa)
+        .signedBy(intermediateCa)
         .serialNumber(3L)
         .commonName(server.getHostName())
         .build();
@@ -184,13 +184,13 @@ public final class CertificatePinnerChainValidationTest {
     // SSL context for an HTTP client under attack. It includes the trusted CA and a pinned
     // certificate.
     HeldCertificate goodIntermediateCa = new HeldCertificate.Builder()
-        .issuedBy(rootCa)
+        .signedBy(rootCa)
         .certificateAuthority(0)
         .serialNumber(2L)
         .commonName(""good_intermediate_ca"")
         .build();
     HeldCertificate goodCertificate = new HeldCertificate.Builder()
-        .issuedBy(goodIntermediateCa)
+        .signedBy(goodIntermediateCa)
         .serialNumber(3L)
         .commonName(server.getHostName())
         .build();
@@ -212,14 +212,14 @@ public final class CertificatePinnerChainValidationTest {
     // trusted good certificate above. The attack is that by including the good certificate in the
     // chain, we may trick the certificate pinner into accepting the rouge certificate.
     HeldCertificate compromisedIntermediateCa = new HeldCertificate.Builder()
-        .issuedBy(rootCa)
+        .signedBy(rootCa)
         .certificateAuthority(0)
         .serialNumber(4L)
         .commonName(""bad_intermediate_ca"")
         .build();
     HeldCertificate rogueCertificate = new HeldCertificate.Builder()
         .serialNumber(5L)
-        .issuedBy(compromisedIntermediateCa)
+        .signedBy(compromisedIntermediateCa)
         .commonName(server.getHostName())
         .build();
 
@@ -264,7 +264,7 @@ public final class CertificatePinnerChainValidationTest {
     // SSL context for an HTTP client under attack. It includes the trusted CA and a pinned
     // certificate.
     HeldCertificate goodIntermediateCa = new HeldCertificate.Builder()
-        .issuedBy(rootCa)
+        .signedBy(rootCa)
         .certificateAuthority(0)
         .serialNumber(3L)
         .commonName(""intermediate_ca"")
@@ -288,14 +288,14 @@ public final class CertificatePinnerChainValidationTest {
     // serves the good CAs certificate in the chain, which means the certificate pinner sees a
     // different set of certificates than the SSL verifier.
     HeldCertificate compromisedIntermediateCa = new HeldCertificate.Builder()
-        .issuedBy(compromisedRootCa)
+        .signedBy(compromisedRootCa)
         .certificateAuthority(0)
         .serialNumber(4L)
         .commonName(""intermediate_ca"")
         .build();
     HeldCertificate rogueCertificate = new HeldCertificate.Builder()
         .serialNumber(5L)
-        .issuedBy(compromisedIntermediateCa)
+        .signedBy(compromisedIntermediateCa)
         .commonName(server.getHostName())
         .build();
 
@@ -67,15 +67,15 @@ public void setUp() {
         .addSubjectAlternativeName(""root_ca.com"")
         .build();
     serverIntermediateCa = new HeldCertificate.Builder()
-        .issuedBy(serverRootCa)
+        .signedBy(serverRootCa)
         .certificateAuthority(0)
         .serialNumber(2L)
         .commonName(""intermediate_ca"")
         .addSubjectAlternativeName(""intermediate_ca.com"")
         .build();
 
     serverCert = new HeldCertificate.Builder()
-        .issuedBy(serverIntermediateCa)
+        .signedBy(serverIntermediateCa)
         .serialNumber(3L)
         .commonName(""Local Host"")
         .addSubjectAlternativeName(server.getHostName())
@@ -88,15 +88,15 @@ public void setUp() {
         .addSubjectAlternativeName(""root_ca.com"")
         .build();
     clientIntermediateCa = new HeldCertificate.Builder()
-        .issuedBy(serverRootCa)
+        .signedBy(serverRootCa)
         .certificateAuthority(0)
         .serialNumber(2L)
         .commonName(""intermediate_ca"")
         .addSubjectAlternativeName(""intermediate_ca.com"")
         .build();
 
     clientCert = new HeldCertificate.Builder()
-        .issuedBy(clientIntermediateCa)
+        .signedBy(clientIntermediateCa)
         .serialNumber(4L)
         .commonName(""Jethro Willis"")
         .addSubjectAlternativeName(""jethrowillis.com"")
@@ -188,7 +188,7 @@ public void setUp() {
 
   @Test public void commonNameIsNotTrusted() throws Exception {
     serverCert = new HeldCertificate.Builder()
-        .issuedBy(serverIntermediateCa)
+        .signedBy(serverIntermediateCa)
         .serialNumber(3L)
         .commonName(server.getHostName())
         .addSubjectAlternativeName(""different-host.com"")
@@ -20,13 +20,16 @@
 import java.security.SecureRandom;
 import java.security.cert.X509Certificate;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import javax.net.ssl.KeyManager;
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSocketFactory;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509KeyManager;
 import javax.net.ssl.X509TrustManager;
+import okhttp3.CertificatePinner;
+import okhttp3.internal.Util;
 import okhttp3.internal.platform.Platform;
 
 import static okhttp3.tls.internal.TlsUtil.newKeyManager;
@@ -137,6 +140,24 @@ public Builder addTrustedCertificate(X509Certificate certificate) {
       return this;
     }
 
+    /**
+     * Add all of the host platform's trusted root certificates. This set varies by platform
+     * (Android vs. Java), by platform release (Android 4.4 vs. Android 9), and with user
+     * customizations.
+     *
+     * <p>Most TLS clients that connect to hosts on the public Internet should call this method.
+     * Otherwise it is necessary to manually prepare a comprehensive set of trusted roots.
+     *
+     * <p>If the host platform is compromised or misconfigured this may contain untrustworthy root
+     * certificates. Applications that connect to a known set of servers may be able to mitigate
+     * this problem with {@linkplain CertificatePinner certificate pinning}.
+     */
+    public Builder addPlatformTrustedCertificates() {
+      X509TrustManager platformTrustManager = Util.platformTrustManager();
+      Collections.addAll(trustedCertificates, platformTrustManager.getAcceptedIssuers());
+      return this;
+    }
+
     public HandshakeCertificates build() {
       try {
         X509KeyManager keyManager = newKeyManager(null, heldCertificate, intermediates);
@@ -208,7 +208,7 @@ public static final class Builder {
     private final List<String> altNames = new ArrayList<>();
     private BigInteger serialNumber;
     private KeyPair keyPair;
-    private HeldCertificate issuedBy;
+    private HeldCertificate signedBy;
     private int maxIntermediateCas = -1;
     private String keyAlgorithm;
     private int keySize;
@@ -298,11 +298,11 @@ public Builder keyPair(PublicKey publicKey, PrivateKey privateKey) {
     }
 
     /**
-     * Set the certificate that will sign this certificate. If unset the certificate will be
+     * Set the certificate that will issue this certificate. If unset the certificate will be
      * self-signed.
      */
-    public Builder issuedBy(HeldCertificate issuedBy) {
-      this.issuedBy = issuedBy;
+    public Builder signedBy(HeldCertificate signedBy) {
+      this.signedBy = signedBy;
       return this;
     }
 
@@ -357,9 +357,9 @@ public HeldCertificate build() {
       // Subject, public & private keys for this certificate's signer. It may be self signed!
       KeyPair signedByKeyPair;
       X500Principal signedByPrincipal;
-      if (issuedBy != null) {
-        signedByKeyPair = issuedBy.keyPair;
-        signedByPrincipal = issuedBy.certificate.getSubjectX500Principal();
+      if (signedBy != null) {
+        signedByKeyPair = signedBy.keyPair;
+        signedByPrincipal = signedBy.certificate.getSubjectX500Principal();
       } else {
         signedByKeyPair = heldKeyPair;
         signedByPrincipal = subject;
@@ -21,7 +21,10 @@
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.security.PrivateKey;
+import java.security.cert.X509Certificate;
 import java.util.Arrays;
+import java.util.LinkedHashSet;
+import java.util.Set;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -37,6 +40,7 @@
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public final class HandshakeCertificatesTest {
   private ExecutorService executorService;
@@ -57,21 +61,21 @@ public final class HandshakeCertificatesTest {
         .build();
     HeldCertificate clientIntermediate = new HeldCertificate.Builder()
         .certificateAuthority(0)
-        .issuedBy(clientRoot)
+        .signedBy(clientRoot)
         .build();
     HeldCertificate clientCertificate = new HeldCertificate.Builder()
-        .issuedBy(clientIntermediate)
+        .signedBy(clientIntermediate)
         .build();
 
     HeldCertificate serverRoot = new HeldCertificate.Builder()
         .certificateAuthority(1)
         .build();
     HeldCertificate serverIntermediate = new HeldCertificate.Builder()
         .certificateAuthority(0)
-        .issuedBy(serverRoot)
+        .signedBy(serverRoot)
         .build();
     HeldCertificate serverCertificate = new HeldCertificate.Builder()
-        .issuedBy(serverIntermediate)
+        .signedBy(serverIntermediate)
         .build();
 
     HandshakeCertificates server = new HandshakeCertificates.Builder()
@@ -108,10 +112,10 @@ public final class HandshakeCertificatesTest {
         .build();
     HeldCertificate intermediate = new HeldCertificate.Builder()
         .certificateAuthority(0)
-        .issuedBy(root)
+        .signedBy(root)
         .build();
     HeldCertificate certificate = new HeldCertificate.Builder()
-        .issuedBy(intermediate)
+        .signedBy(intermediate)
         .build();
 
     HandshakeCertificates handshakeCertificates = new HandshakeCertificates.Builder()
@@ -123,6 +127,20 @@ public final class HandshakeCertificatesTest {
         Arrays.asList(handshakeCertificates.keyManager().getCertificateChain(""private"")));
   }
 
+  @Test public void platformTrustedCertificates() {
+    HandshakeCertificates handshakeCertificates = new HandshakeCertificates.Builder()
+        .addPlatformTrustedCertificates()
+        .build();
+    Set<String> names = new LinkedHashSet<>();
+    for (X509Certificate certificate : handshakeCertificates.trustManager().getAcceptedIssuers()) {
+      // Abbreviate a long name like ""CN=Entrust Root Certification Authority - G2, OU=...""
+      String name = certificate.getSubjectDN().getName();
+      names.add(name.substring(0, name.indexOf("" "")));
+    }
+    // It's safe to assume all platforms will have a major Internet certificate issuer.
+    assertTrue(names.toString(), names.contains(""CN=Entrust""));
+  }
+
   private InetSocketAddress startTlsServer() throws IOException {
     ServerSocketFactory serverSocketFactory = ServerSocketFactory.getDefault();
     serverSocket = serverSocketFactory.createServerSocket();
@@ -202,7 +202,7 @@ public final class HeldCertificateTest {
     HeldCertificate leaf = new HeldCertificate.Builder()
         .certificateAuthority(0)
         .ecdsa256()
-        .issuedBy(root)
+        .signedBy(root)
         .build();
 
     assertEquals(""SHA256WITHRSA"", root.certificate().getSigAlgName());
@@ -217,7 +217,7 @@ public final class HeldCertificateTest {
     HeldCertificate leaf = new HeldCertificate.Builder()
         .certificateAuthority(0)
         .rsa2048()
-        .issuedBy(root)
+        .signedBy(root)
         .build();
 
     assertEquals(""SHA256WITHECDSA"", root.certificate().getSigAlgName());
@@ -19,9 +19,7 @@
 import java.net.ProxySelector;
 import java.net.Socket;
 import java.security.GeneralSecurityException;
-import java.security.KeyStore;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
@@ -34,7 +32,6 @@
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 import javax.net.ssl.TrustManager;
-import javax.net.ssl.TrustManagerFactory;
 import javax.net.ssl.X509TrustManager;
 import okhttp3.internal.Internal;
 import okhttp3.internal.Util;
@@ -248,8 +245,8 @@ public OkHttpClient() {
       this.sslSocketFactory = builder.sslSocketFactory;
       this.certificateChainCleaner = builder.certificateChainCleaner;
     } else {
-      X509TrustManager trustManager = systemDefaultTrustManager();
-      this.sslSocketFactory = systemDefaultSslSocketFactory(trustManager);
+      X509TrustManager trustManager = Util.platformTrustManager();
+      this.sslSocketFactory = newSslSocketFactory(trustManager);
       this.certificateChainCleaner = CertificateChainCleaner.get(trustManager);
     }
 
@@ -280,23 +277,7 @@ public OkHttpClient() {
     }
   }
 
-  private X509TrustManager systemDefaultTrustManager() {
-    try {
-      TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
-          TrustManagerFactory.getDefaultAlgorithm());
-      trustManagerFactory.init((KeyStore) null);
-      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
-      if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {
-        throw new IllegalStateException(""Unexpected default trust managers:""
-            + Arrays.toString(trustManagers));
-      }
-      return (X509TrustManager) trustManagers[0];
-    } catch (GeneralSecurityException e) {
-      throw assertionError(""No System TLS"", e); // The system has no TLS. Just give up.
-    }
-  }
-
-  private SSLSocketFactory systemDefaultSslSocketFactory(X509TrustManager trustManager) {
+  private static SSLSocketFactory newSslSocketFactory(X509TrustManager trustManager) {
     try {
       SSLContext sslContext = Platform.get().getSSLContext();
       sslContext.init(null, new TrustManager[] { trustManager }, null);
@@ -26,6 +26,8 @@
 import java.net.Socket;
 import java.net.UnknownHostException;
 import java.nio.charset.Charset;
+import java.security.GeneralSecurityException;
+import java.security.KeyStore;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -37,6 +39,9 @@
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.TrustManagerFactory;
+import javax.net.ssl.X509TrustManager;
 import okhttp3.HttpUrl;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
@@ -642,4 +647,20 @@ private static String inet6AddressToAscii(byte[] address) {
     }
     return result.readUtf8();
   }
+
+  public static X509TrustManager platformTrustManager() {
+    try {
+      TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
+          TrustManagerFactory.getDefaultAlgorithm());
+      trustManagerFactory.init((KeyStore) null);
+      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
+      if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {
+        throw new IllegalStateException(""Unexpected default trust managers:""
+            + Arrays.toString(trustManagers));
+      }
+      return (X509TrustManager) trustManagers[0];
+    } catch (GeneralSecurityException e) {
+      throw assertionError(""No System TLS"", e); // The system has no TLS. Just give up.
+    }
+  }
 }
"
https://github.com/spring-projects/spring-boot/commit/4d172ca7429bfc15692ce7f1247beeb355faa924,"Remove duplicate resources from classpath  <enter> We had been making a special case for logback.xml anyway, so extending that to simply deleting recursively all of src/main/resources (or equivalent) from target/classes (or equivalent) seems like it's perfectly justifiable. <enter>  Fixes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/4d172ca7429bfc15692ce7f1247beeb355faa924,"@@ -52,8 +52,7 @@ public void runApp() {
 			SourceDirectorySet resources = main.getResources();
 			allResources.addAll(resources.getSrcDirs());
 			outputs = main.getOutput().getResourcesDir();
-		}
-		else {
+		} else {
 			outputs = null;
 		}
 
@@ -80,11 +79,16 @@ public String call() throws Exception {
 					getLogger().info(""Found main: "" + mainClass);
 				}
 				if (outputs != null) {
-					// Special case: this file causes logback to worry that it has been
-					// configured twice, so remove it from the target directory...
-					File logback = new File(outputs, ""logback.xml"");
-					if (logback.exists()) {
-						logback.delete();
+					// remove duplicates from resources and build
+					for (File directory : allResources) {
+						if (directory.isDirectory()) {
+							for (String name : directory.list()) {
+								File file = new File(outputs, name);
+								if (file.exists() && file.canWrite()) {
+									getProject().delete(file);
+								}
+							}
+						}
 					}
 				}
 				exec.exec();
@@ -100,8 +104,7 @@ private String findMainClass(SourceSet main) {
 		getLogger().info(""Looking for main in: "" + main.getOutput().getClassesDir());
 		try {
 			return MainClassFinder.findMainClass(main.getOutput().getClassesDir());
-		}
-		catch (IOException ex) {
+		} catch (IOException ex) {
 			throw new IllegalStateException(""Cannot find main class"", ex);
 		}
 	}
@@ -37,6 +37,7 @@
 import org.apache.maven.plugins.annotations.Parameter;
 import org.apache.maven.plugins.annotations.ResolutionScope;
 import org.apache.maven.project.MavenProject;
+import org.codehaus.plexus.util.FileUtils;
 import org.springframework.boot.loader.tools.AgentAttacher;
 import org.springframework.boot.loader.tools.MainClassFinder;
 
@@ -62,10 +63,7 @@ public class RunMojo extends AbstractMojo {
 
 	/**
 	 * Add maven resources to the classpath directly, this allows live in-place editing or
-	 * resources. Since resources will be added directly, and via the target/classes
-	 * folder they will appear twice if ClassLoader.getResources() is called. In practice
-	 * however most applications call ClassLoader.getResource() which will always return
-	 * the first resource.
+	 * resources.
 	 */
 	@Parameter(property = ""run.addResources"", defaultValue = ""true"")
 	private boolean addResources;
@@ -185,6 +183,9 @@ private URL[] getClassPathUrls() throws MojoExecutionException {
 		catch (MalformedURLException ex) {
 			throw new MojoExecutionException(""Unable to build classpath"", ex);
 		}
+		catch (IOException ex) {
+			throw new MojoExecutionException(""Unable to build classpath"", ex);
+		}
 	}
 
 	private void addUserDefinedFolders(List<URL> urls) throws MalformedURLException {
@@ -195,16 +196,25 @@ private void addUserDefinedFolders(List<URL> urls) throws MalformedURLException
 		}
 	}
 
-	private void addResources(List<URL> urls) throws MalformedURLException {
+	private void addResources(List<URL> urls) throws MalformedURLException, IOException {
 		if (this.addResources) {
 			for (Resource resource : this.project.getResources()) {
-				urls.add(new File(resource.getDirectory()).toURI().toURL());
-			}
-			// Special case: this file causes logback to worry that it has been configured
-			// twice, so remove it from the target directory...
-			File logback = new File(this.classesDirectory, ""logback.xml"");
-			if (logback.exists() && logback.canWrite()) {
-				logback.delete();
+				File directory = new File(resource.getDirectory());
+				urls.add(directory.toURI().toURL());
+				if (directory.isDirectory()) {
+					// Remove duplicates from the target directory...
+					for (String name : directory.list()) {
+						File file = new File(this.classesDirectory, name);
+						if (file.exists() && file.canWrite()) {
+							if (file.isDirectory()) {
+								FileUtils.deleteDirectory(file);
+							}
+							else {
+								file.delete();
+							}
+						}
+					}
+				}
 			}
 		}
 	}
"
https://github.com/spring-projects/spring-boot/commit/b39ecdf0060189367e396f0dcc455760006f2659,Rename preferred-mapper property so its clear it only applies to JSON  <enter> preferred-mapper has been renamed to preferred-json-mapper to make it clear that it only affects the JSON mapper and that the XML mapper that will be used (if any) is unaffected <enter> See  <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/b39ecdf0060189367e396f0dcc455760006f2659,"@@ -52,7 +52,7 @@
 		GsonHttpMessageConvertersConfiguration.class })
 public class HttpMessageConvertersAutoConfiguration {
 
-	static final String PREFERRED_MAPPER_PROPERTY = ""spring.http.converters.preferred-mapper"";
+	static final String PREFERRED_MAPPER_PROPERTY = ""spring.http.converters.preferred-json-mapper"";
 
 	@Autowired(required = false)
 	private final List<HttpMessageConverter<?>> converters = Collections.emptyList();
@@ -148,7 +148,7 @@ public void gsonCanBePreferredWhenBothGsonAndJacksonAreAvailable() {
 				JacksonAutoConfiguration.class,
 				HttpMessageConvertersAutoConfiguration.class);
 		EnvironmentTestUtils.addEnvironment(this.context,
-				""spring.http.converters.preferred-mapper:gson"");
+				""spring.http.converters.preferred-json-mapper:gson"");
 		this.context.refresh();
 		assertConverterBeanExists(GsonHttpMessageConverter.class,
 				""gsonHttpMessageConverter"");
"
https://github.com/square/retrofit/commit/ebc0128add0d416a846ff661888910d16751dd34,Clean out Java 8 READMEs to further discourage use ,https://api.github.com/repos/square/retrofit/commits/ebc0128add0d416a846ff661888910d16751dd34,"@@ -1,54 +1,10 @@
-Java8 Adapter
-==============
+Java 8 Adapter (Deprecated)
+===========================
 
-An `Adapter` for adapting [Java8][1] `CompletableFuture`.
-
-
-Deprecated – Included by default in Retrofit
----------------------------------------
-
-
-Usage
------
-
-Add `Java8CallAdapterFactory` as a `Call` adapter when building your `Retrofit` instance:
-```java
-Retrofit retrofit = new Retrofit.Builder()
-    .baseUrl(""https://example.com/"")
-    .addCallAdapterFactory(Java8CallAdapterFactory.create())
-    .build();
-```
-
-Your service methods can now use `CompletableFuture` as their return type.
-```java
-interface MyService {
-  @GET(""/user"")
-  CompletableFuture<User> getUser();
-}
-```
-
-
-Download
---------
-
-Download [the latest JAR][2] or grab via [Maven][3]:
-```xml
-<dependency>
-  <groupId>com.squareup.retrofit2</groupId>
-  <artifactId>adapter-java8</artifactId>
-  <version>latest.version</version>
-</dependency>
-```
-or [Gradle][3]:
-```groovy
-implementation 'com.squareup.retrofit2:adapter-java8:latest.version'
-```
-
-Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
+A call adapter [Java 8's `CompletableFuture`][1].
 
+This adapter is no longer needed. Support for `CompletableFuture` is built-in to Retrofit and now
+works without configuration.
 
 
  [1]: http://www.oracle.com/technetwork/java/javase/jdk-8-readme-2095712.html
- [2]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=adapter-java8&v=LATEST
- [3]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22adapter-java8%22
- [snap]: https://oss.sonatype.org/content/repositories/snapshots/
@@ -1,34 +1,8 @@
-Java 8 Converter
-================
+Java 8 Converter (Deprecated)
+=============================
 
 A `Converter` which supports Java 8's `Optional<T>` by delegating to other converters for `T`
 and then wrapping it into `Optional`.
 
-
-Deprecated – Included by default in Retrofit
----------------------------------------
-
-
-Download
---------
-
-Download [the latest JAR][1] or grab via [Maven][2]:
-```xml
-<dependency>
-  <groupId>com.squareup.retrofit2</groupId>
-  <artifactId>converter-java8</artifactId>
-  <version>latest.version</version>
-</dependency>
-```
-or [Gradle][2]:
-```groovy
-implementation 'com.squareup.retrofit2:converter-java8:latest.version'
-```
-
-Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
-
-
-
- [1]: https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=converter-java8&v=LATEST
- [2]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.squareup.retrofit2%22%20a%3A%22converter-java8%22
- [snap]: https://oss.sonatype.org/content/repositories/snapshots/
+This converter is no longer needed. Support for `Optional` is built-in to Retrofit and now works
+without configuration.
"
https://github.com/spring-projects/spring-boot/commit/f8a53cf775b03c9258b42be194e05e0ee1779f35,Update actuator security documentation  <enter> Update documentation to align with the new role based method. <enter> See  <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/f8a53cf775b03c9258b42be194e05e0ee1779f35,"@@ -536,11 +536,32 @@ all enabled endpoints to be exposed over HTTP. The default convention is to use
 
 
 [[production-ready-sensitive-endpoints]]
-=== Securing sensitive endpoints
-If you add '`Spring Security`' to your project, all sensitive endpoints exposed over HTTP
-will be protected. By default '`basic`' authentication will be used with the username
-`user` and a generated password (which is printed on the console when the application
-starts).
+=== Accessing sensitive endpoints
+By default all sensitive HTTP endpoints are secured such that only users that have an
+`ACTUATOR` role may access them. Security is enforced using the standard
+`HttpServletRequest.isUserInRole` method.
+
+TIP: Use the `management.security.roles` property if you want something different to
+`ACTUATOR`.
+
+If you are deploying applications behind a firewall, you may prefer that all your actuator
+endpoints can be accessed without requiring authentication. You can do this by changing
+the `management.security.enabled` property:
+
+.application.properties
+[source,properties,indent=0]
+----
+	management.security.enabled=false
+----
+
+NOTE: By default, actuator endpoints are exposed on the same port that serves regular
+HTTP traffic. Take care not to accidentally expose sensitive information if you change
+the `management.security.enabled` property.
+
+If you're deploying applications publicly, you may want to add '`Spring Security`' to
+handle user authentication. When '`Spring Security`' is added, by default '`basic`'
+authentication will be used with the username `user` and a generated password (which is
+printed on the console when the application starts).
 
 TIP: Generated passwords are logged as the application starts. Search for '`Using default
 security password`'.
@@ -556,10 +577,6 @@ in your `application.properties`:
 	management.security.roles=SUPERUSER
 ----
 
-TIP: If you don't use Spring Security and your HTTP endpoints are exposed publicly,
-you should carefully consider which endpoints you enable. See
-<<production-ready-customizing-endpoints>> for details of how you can set
-`endpoints.enabled` to `false` then ""`opt-in`"" only specific endpoints.
 
 
 [[production-ready-customizing-management-server-context-path]]
"
https://github.com/junit-team/junit4/commit/fa35d6d84a0b2c59254cb479633d0e20bc6e12e9,"Delete .cvsignore files, because we're using Git now. ",https://api.github.com/repos/junit-team/junit4/commits/fa35d6d84a0b2c59254cb479633d0e20bc6e12e9,"@@ -1,10 +0,0 @@
-bin
-junit4.1
-junit*-SNAPSHOT-*
-target
-reports
-buildfile
-java.hprof.txt
-junit4.5-RC1
-junit4.*
-*.ser
@@ -1,4 +0,0 @@
-Changes
-java.hprof.txt
-historical_javadoc
-compare_with_44.sh
"
https://github.com/spring-projects/spring-boot/commit/ee4205a0498440f3003ace8c5ccf36cbe74eab00,Remove unnecessary logging by start-docker script ,https://api.github.com/repos/spring-projects/spring-boot/commits/ee4205a0498440f3003ace8c5ccf36cbe74eab00,"@@ -10,7 +10,7 @@ caches:
 run:
   path: bash
   args:
-    - -exc
+    - -ec
     - |
       source /docker-lib.sh
       start_docker
"
https://github.com/apache/dubbo/commit/9897aa3d7273e3eb96910cfdc09709a77cae50b0,"remove appConfigs cache to support one service/reference registered more than one time (if users don't explicitly add id, cache can not work properly) ",https://api.github.com/repos/apache/dubbo/commits/9897aa3d7273e3eb96910cfdc09709a77cae50b0,"@@ -35,7 +35,6 @@ public class Environment {
     private Map<String, EnvironmentConfiguration> environmentConfigs = new ConcurrentHashMap<>();
     private Map<String, InmemoryConfiguration> externalConfigs = new ConcurrentHashMap<>();
     private Map<String, InmemoryConfiguration> appExternalConfigs = new ConcurrentHashMap<>();
-    private Map<String, InmemoryConfiguration> appConfigs = new ConcurrentHashMap<>();
 
     private Map<String, String> externalConfigurationMap = new HashMap<>();
     private Map<String, String> appExternalConfigurationMap = new HashMap<>();
@@ -79,10 +78,6 @@ public EnvironmentConfiguration getEnvironmentConfig(String prefix, String id) {
         return environmentConfigs.computeIfAbsent(toKey(prefix, id), k -> new EnvironmentConfiguration(prefix, id));
     }
 
-    public InmemoryConfiguration getAppConfig(String prefix, String id) {
-        return appConfigs.get(toKey(prefix, id));
-    }
-
     public void setExternalConfigMap(Map<String, String> externalConfiguration) {
         this.externalConfigurationMap = externalConfiguration;
     }
@@ -99,14 +94,6 @@ public Map<String, String> getAppExternalConfigurationMap() {
         return appExternalConfigurationMap;
     }
 
-    public void addAppConfig(String prefix, String id, Map<String, String> properties) {
-        appConfigs.computeIfAbsent(toKey(prefix, id), k -> {
-            InmemoryConfiguration configuration = new InmemoryConfiguration(prefix, id);
-            configuration.addProperties(properties);
-            return configuration;
-        });
-    }
-
     public void updateExternalConfigurationMap(Map<String, String> externalMap) {
         this.externalConfigurationMap.putAll(externalMap);
     }
@@ -124,27 +111,13 @@ public void updateAppExternalConfigurationMap(Map<String, String> externalMap) {
      * @param id
      * @return
      */
-    public Configuration getConfiguration(String prefix, String id) {
+    public CompositeConfiguration getConfiguration(String prefix, String id) {
         CompositeConfiguration compositeConfiguration = new CompositeConfiguration();
-        InmemoryConfiguration appConfig = this.getAppConfig(prefix, id);
         // Config center has the highest priority
-        if (!configCenterFirst) {
-            compositeConfiguration.addConfiguration(this.getSystemConfig(prefix, id));
-            if (appConfig != null) {
-                compositeConfiguration.addConfiguration(appConfig);
-            }
-            compositeConfiguration.addConfiguration(this.getAppExternalConfig(prefix, id));
-            compositeConfiguration.addConfiguration(this.getExternalConfig(prefix, id));
-            compositeConfiguration.addConfiguration(this.getPropertiesConfig(prefix, id));
-        } else {
-            compositeConfiguration.addConfiguration(this.getSystemConfig(prefix, id));
-            compositeConfiguration.addConfiguration(this.getAppExternalConfig(prefix, id));
-            compositeConfiguration.addConfiguration(this.getExternalConfig(prefix, id));
-            if (appConfig != null) {
-                compositeConfiguration.addConfiguration(appConfig);
-            }
-            compositeConfiguration.addConfiguration(this.getPropertiesConfig(prefix, id));
-        }
+        compositeConfiguration.addConfiguration(this.getSystemConfig(prefix, id));
+        compositeConfiguration.addConfiguration(this.getAppExternalConfig(prefix, id));
+        compositeConfiguration.addConfiguration(this.getExternalConfig(prefix, id));
+        compositeConfiguration.addConfiguration(this.getPropertiesConfig(prefix, id));
         return compositeConfiguration;
     }
 
@@ -18,8 +18,9 @@
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.config.Configuration;
+import org.apache.dubbo.common.config.CompositeConfiguration;
 import org.apache.dubbo.common.config.Environment;
+import org.apache.dubbo.common.config.InmemoryConfiguration;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
@@ -536,9 +537,16 @@ public void setPrefix(String prefix) {
      */
     public void refresh() {
         try {
-            Environment env = Environment.getInstance();
-            env.addAppConfig(getPrefix(), getId(), getMetaData());
-            Configuration configuration = env.getConfiguration(getPrefix(), getId());
+            CompositeConfiguration compositeConfiguration = Environment.getInstance().getConfiguration(getPrefix(), getId());
+            InmemoryConfiguration configuration = new InmemoryConfiguration(getPrefix(), getId());
+            configuration.addProperties(getMetaData());
+            if (Environment.getInstance().isConfigCenterFirst()) {
+                // The sequence would be: SystemConfiguration -> ExternalConfiguration -> AppExternalConfiguration -> AbstractConfig -> PropertiesConfiguration
+                compositeConfiguration.addConfiguration(3,configuration);
+            } else {
+                // The sequence would be: SystemConfiguration -> AbstractConfig -> ExternalConfiguration -> AppExternalConfiguration -> PropertiesConfiguration
+                compositeConfiguration.addConfiguration(1, configuration);
+            }
 
             // loop methods, get override value and set the new value back to method
             Method[] methods = getClass().getMethods();
"
https://github.com/junit-team/junit4/commit/2b6fa701e84625c511b03079296774cc0904ef1a,"Bug: ParentRunner lost test Class from a separate class loader ( <pr_link> )  <enter> * Bug: ParentRunner lost test Class from a separate class loader <enter> When junit.jar located in one ClassLoader but runing tests in another ParentRunner can lost information about run class. For example if use @ClassRule and request test class(org.junit.runner.Description#getTestClass) we can get null, because ParentRunner instead of set Class as is to Description tranform it to class name string, as result org.junit.runner.Description#getTestClass execute Class.forName and can't find test class. <enter> Spring-test fail with exception if we try use SpringClassRule <enter> ``` java.lang.NullPointerException  at org.springframework.test.context.junit4.rules.SpringClassRule.validateSpringMethodRuleConfiguration(SpringClassRule.java:186)  at org.springframework.test.context.junit4.rules.SpringClassRule.apply(SpringClassRule.java:134)  at org.junit.rules.RunRules.applyAll(RunRules.java:26)  at org.junit.rules.RunRules.<init>(RunRules.java:15)  at org.junit.runners.ParentRunner.withClassRules(ParentRunner.java:245)  at org.junit.runners.ParentRunner.classBlock(ParentRunner.java:194)  at org.junit.runners.ParentRunner.run(ParentRunner.java:362)  at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ``` <enter> As solution, now ParentRunner create Descriptor with explicit specify Class, name and uses annotations. <enter> * Restore backward compatibility with sub class of ParentRunner that override getName method * Add ParentRunnerClassLoaderTest to AllClassesTests suite ",https://api.github.com/repos/junit-team/junit4/commits/2b6fa701e84625c511b03079296774cc0904ef1a,"@@ -124,6 +124,17 @@ public static Description createSuiteDescription(Class<?> testClass) {
         return new Description(testClass, testClass.getName(), testClass.getAnnotations());
     }
 
+    /**
+     * Create a <code>Description</code> named after <code>testClass</code>
+     *
+     * @param testClass A not null {@link Class} containing tests
+     * @param annotations meta-data about the test, for downstream interpreters
+     * @return a <code>Description</code> of <code>testClass</code>
+     */
+    public static Description createSuiteDescription(Class<?> testClass, Annotation... annotations) {
+        return new Description(testClass, testClass.getName(), annotations);
+    }
+
     /**
      * Describes a Runner which runs no tests
      */
@@ -347,8 +347,16 @@ protected Annotation[] getRunnerAnnotations() {
 
     @Override
     public Description getDescription() {
-        Description description = Description.createSuiteDescription(getName(),
-                getRunnerAnnotations());
+        Class<?> clazz = getTestClass().getJavaClass();
+        Description description;
+        // if subclass overrides `getName()` then we should use it
+        // to maintain backwards compatibility with JUnit 4.12
+        if (clazz == null || !clazz.getName().equals(getName())) {
+            description = Description.createSuiteDescription(getName(), getRunnerAnnotations());
+        } else {
+            description = Description.createSuiteDescription(clazz, getRunnerAnnotations());
+        }
+
         for (T child : getFilteredChildren()) {
             description.addChild(describeChild(child));
         }
@@ -3,6 +3,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
+import org.junit.tests.running.classes.parent.ParentRunnerClassLoaderTest;
 
 @RunWith(Suite.class)
 @SuiteClasses({
@@ -13,6 +14,7 @@
         ParameterizedTestTest.class,
         ParentRunnerFilteringTest.class,
         ParentRunnerTest.class,
+        ParentRunnerClassLoaderTest.class,
         RunWithTest.class,
         SuiteTest.class,
         UseSuiteAsASuperclassTest.class
@@ -0,0 +1,96 @@
+package org.junit.tests.running.classes.parent;
+
+
+import org.junit.Test;
+import org.junit.runner.Description;
+import org.junit.runner.notification.RunNotifier;
+import org.junit.runners.BlockJUnit4ClassRunner;
+import org.junit.runners.ParentRunner;
+import org.junit.runners.model.FrameworkMethod;
+import org.junit.runners.model.InitializationError;
+
+import java.lang.reflect.Field;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+public class ParentRunnerClassLoaderTest {
+    @Test
+    public void testClassRuleAccessToClassInAnotherClassLoader() throws Exception {
+        Class<?> testClassWithOwnClassLoader = wrapToClassLoader(TestWithClassRule.class);
+
+        runTestWithParentRunner(testClassWithOwnClassLoader);
+
+        Field fieldWithReference = testClassWithOwnClassLoader.getDeclaredField(""applyTestClass"");
+        Class<?> usedClass = (Class<?>) fieldWithReference.get(null);
+
+        assertEquals(""JUnitRunner can be located in own classLoader, so, "" +
+                        ""Class.forName org.junit.runner.Description.getTestClass can not see "" +
+                        ""in current classloader by execute Class.forName"",
+                testClassWithOwnClassLoader, usedClass
+        );
+    }
+
+    @Test
+    public void testDescriptionContainCorrectTestClass() throws Exception {
+        Class<?> testClassWithOwnClassLoader = wrapToClassLoader(TestWithClassRule.class);
+        ParentRunner<?> runner = new BlockJUnit4ClassRunner(testClassWithOwnClassLoader);
+
+        Description description = runner.getDescription();
+        assertEquals(""ParentRunner accept already instantiate Class<?> with tests, if we lost it instance, and will "" +
+                ""use Class.forName we can not find test class again, because tests can be "" +
+                ""located in different ClassLoader"",
+                description.getTestClass(), testClassWithOwnClassLoader
+        );
+    }
+
+    @Test
+    public void testBackwardCompatibilityWithOverrideGetName() throws Exception {
+        final Class<TestWithClassRule> originalTestClass = TestWithClassRule.class;
+        final Class<?> waitClass = ParentRunnerClassLoaderTest.class;
+
+        ParentRunner<FrameworkMethod> subParentRunner = new BlockJUnit4ClassRunner(originalTestClass) {
+            @Override
+            protected String getName() {
+                return waitClass.getName();
+            }
+        };
+
+        Description description = subParentRunner.getDescription();
+        Class<?> result = description.getTestClass();
+
+        assertEquals(""Subclass of ParentRunner can override getName method and specify another test class for run, "" +
+                ""we should  maintain backwards compatibility with JUnit 4.12"",
+                waitClass, result
+        );
+    }
+
+    private void runTestWithParentRunner(Class<?> testClass) throws InitializationError {
+        ParentRunner<?> runner = new BlockJUnit4ClassRunner(testClass);
+        runner.run(new RunNotifier());
+    }
+
+    private Class<?> wrapToClassLoader(Class<?> sourceClass) throws ClassNotFoundException {
+        URL classpath = sourceClass.getProtectionDomain().getCodeSource().getLocation();
+        VisibleClassLoader loader = new VisibleClassLoader(new URL[]{classpath}, this.getClass().getClassLoader());
+        Class<?> testClassWithOwnClassLoader = loader.findClass(sourceClass.getName());
+
+        assert testClassWithOwnClassLoader != sourceClass;
+
+        return testClassWithOwnClassLoader;
+    }
+
+
+    private static class VisibleClassLoader extends URLClassLoader {
+        public VisibleClassLoader(URL[] urls, ClassLoader parent) {
+            super(urls, parent);
+        }
+
+        @Override // just making public
+        public Class<?> findClass(String name) throws ClassNotFoundException {
+            return super.findClass(name);
+        }
+    }
+}
@@ -0,0 +1,42 @@
+package org.junit.tests.running.classes.parent;
+
+import org.junit.Assert;
+import org.junit.ClassRule;
+import org.junit.Test;
+import org.junit.rules.TestRule;
+import org.junit.runner.Description;
+import org.junit.runners.model.Statement;
+
+import java.lang.reflect.Field;
+
+/**
+ * Test class for validate run tests that was load in own ClassLoader
+ */
+public class TestWithClassRule {
+    public static Class<?> applyTestClass;
+
+    @ClassRule
+    public static TestRule rule = new CustomRule();
+
+    @Test
+    public void testClassRuleExecuted() throws Exception {
+        Assert.assertNotNull(""Description should contain reference to TestClass"", applyTestClass);
+    }
+
+    public static final class CustomRule implements TestRule {
+
+        public Statement apply(final Statement base, final Description description) {
+            return new Statement() {
+                @Override
+                public void evaluate() throws Throwable {
+                    Class<?> testClass = description.getTestClass();
+                    if(testClass != null) {
+                        Field field = testClass.getDeclaredField(""applyTestClass"");
+                        field.set(null, description.getTestClass());
+                    }
+                    base.evaluate();
+                }
+            };
+        }
+    }
+}
"
https://github.com/square/okhttp/commit/0685dfaa7ff71a8f16b1b71f417b08eff13ec55f,Move TLSv1 and TLSv1.1 to COMPATIBLE_TLS.  <enter> We no longer connect to TLSv1.0 or TLSv1.1 servers out-of-the-box; instead it is necessary to enable COMPATIBLE_TLS in the OkHttpClient configuration. <enter> This is in the path to later removing these TLS versions completely; that is scheduled for March 2020 by some browsers. <enter>  <issue_link> ,https://api.github.com/repos/square/okhttp/commits/0685dfaa7ff71a8f16b1b71f417b08eff13ec55f,"@@ -75,7 +75,8 @@ public void nonRetryableSSLHandshakeException() throws Exception {
   public void retryableSSLHandshakeException() throws Exception {
     ConnectionSpecSelector connectionSpecSelector =
         createConnectionSpecSelector(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS);
-    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);
+    SSLSocket socket = createSocketWithEnabledProtocols(
+        TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);
     connectionSpecSelector.configureSecureSocket(socket);
 
     boolean retry = connectionSpecSelector.connectionFailed(RETRYABLE_EXCEPTION);
@@ -85,20 +86,21 @@ public void retryableSSLHandshakeException() throws Exception {
 
   @Test
   public void someFallbacksSupported() throws Exception {
-    ConnectionSpec sslV3 =
-        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
-            .tlsVersions(TlsVersion.SSL_3_0)
-            .build();
+    ConnectionSpec sslV3 = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
+        .tlsVersions(TlsVersion.SSL_3_0)
+        .build();
 
     ConnectionSpecSelector connectionSpecSelector = createConnectionSpecSelector(
         ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, sslV3);
 
-    TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};
+    TlsVersion[] enabledSocketTlsVersions = {
+        TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0
+    };
     SSLSocket socket = createSocketWithEnabledProtocols(enabledSocketTlsVersions);
 
     // MODERN_TLS is used here.
     connectionSpecSelector.configureSecureSocket(socket);
-    assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);
+    assertEnabledProtocols(socket, TlsVersion.TLS_1_2);
 
     boolean retry = connectionSpecSelector.connectionFailed(RETRYABLE_EXCEPTION);
     assertTrue(retry);
@@ -107,7 +109,7 @@ public void someFallbacksSupported() throws Exception {
     // COMPATIBLE_TLS is used here.
     socket = createSocketWithEnabledProtocols(enabledSocketTlsVersions);
     connectionSpecSelector.configureSecureSocket(socket);
-    assertEnabledProtocols(socket, TlsVersion.TLS_1_0);
+    assertEnabledProtocols(socket, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);
 
     retry = connectionSpecSelector.connectionFailed(RETRYABLE_EXCEPTION);
     assertFalse(retry);
@@ -37,6 +37,12 @@
  *
  * <p>Use {@link Builder#allEnabledTlsVersions()} and {@link Builder#allEnabledCipherSuites} to
  * defer all feature selection to the underlying SSL socket.
+ *
+ * <p>The configuration of each spec changes with each OkHttp release. This is annoying: upgrading
+ * your OkHttp library can break connectivity to certain web servers! But it’s a necessary annoyance
+ * because the TLS ecosystem is dynamic and staying up to date is necessary to stay secure. See
+ * <a href=""https://github.com/square/okhttp/wiki/TLS-Configuration-History"">OkHttp's TLS
+ * Configuration History</a> to track these changes.
  */
 public final class ConnectionSpec {
 
@@ -87,24 +93,31 @@ public final class ConnectionSpec {
       CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA,
   };
 
-  /** A secure TLS connection assuming a modern client platform and server. */
+  /** A secure TLS connection that requires a recent client platform and a recent server. */
   public static final ConnectionSpec RESTRICTED_TLS = new Builder(true)
       .cipherSuites(RESTRICTED_CIPHER_SUITES)
       .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2)
       .supportsTlsExtensions(true)
       .build();
 
-  /** A modern TLS connection with extensions like SNI and ALPN available. */
+  /**
+   * A modern TLS configuration that works on most client platforms and can connect to most servers.
+   * This is OkHttp's default configuration.
+   */
   public static final ConnectionSpec MODERN_TLS = new Builder(true)
       .cipherSuites(APPROVED_CIPHER_SUITES)
-      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0)
+      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2)
       .supportsTlsExtensions(true)
       .build();
 
-  /** A backwards-compatible fallback connection for interop with obsolete servers. */
+  /**
+   * A backwards-compatible fallback configuration that works on obsolete client platforms and can
+   * connect to obsolete servers. When possible, prefer to upgrade your client platform or server
+   * rather than using this configuration.
+   */
   public static final ConnectionSpec COMPATIBLE_TLS = new Builder(true)
       .cipherSuites(APPROVED_CIPHER_SUITES)
-      .tlsVersions(TlsVersion.TLS_1_0)
+      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0)
       .supportsTlsExtensions(true)
       .build();
 
@@ -328,6 +341,11 @@ public Builder tlsVersions(String... tlsVersions) {
       return this;
     }
 
+    /**
+     * @deprecated since OkHttp 3.13 all TLS-connections are expected to support TLS extensions.
+     *     In a future release setting this to true will be unnecessary and setting it to false will
+     *     have no effect.
+     */
     public Builder supportsTlsExtensions(boolean supportsTlsExtensions) {
       if (!tls) throw new IllegalStateException(""no TLS extensions for cleartext connections"");
       this.supportsTlsExtensions = supportsTlsExtensions;
"
https://github.com/square/retrofit/commit/2d6b02f7cf59235358ef4d574930ce7545ce8619,RxJava 1.0.  <enter> (cherry picked from commit  <otherCommit_link> ) <enter> Conflicts:  <tab> pom.xml ,https://api.github.com/repos/square/retrofit/commits/2d6b02f7cf59235358ef4d574930ce7545ce8619,"@@ -51,7 +51,7 @@
     <android.platform>16</android.platform>
     <gson.version>2.3</gson.version>
     <okhttp.version>2.0.0</okhttp.version>
-    <rxjava.version>1.0.0-rc.4</rxjava.version>
+    <rxjava.version>1.0.0</rxjava.version>
     <appengine.version>1.9.12</appengine.version>
 
     <!-- Converter Dependencies -->
"
https://github.com/square/okhttp/commit/6651a9c15e06e8d1829aa00f970998be2f33b225,Change MediaType's failure mode to not crash on charset problems.  <enter> As-is it throws unchecked exceptions on unexpected charsets. This is a problem because it can cause a misbehaving webserver to crash the client. <enter> I don't expect this to break existing clients; returning 'null' has always been a possibility; it's just returned in more cases. ,https://api.github.com/repos/square/okhttp/commits/6651a9c15e06e8d1829aa00f970998be2f33b225,"@@ -18,7 +18,6 @@
 import java.io.EOFException;
 import java.io.IOException;
 import java.nio.charset.Charset;
-import java.nio.charset.UnsupportedCharsetException;
 import java.util.concurrent.TimeUnit;
 import okhttp3.Connection;
 import okhttp3.Headers;
@@ -241,15 +240,7 @@ public Level getLevel() {
         Charset charset = UTF8;
         MediaType contentType = responseBody.contentType();
         if (contentType != null) {
-          try {
-            charset = contentType.charset(UTF8);
-          } catch (UnsupportedCharsetException e) {
-            logger.log("""");
-            logger.log(""Couldn't decode the response body; charset is likely malformed."");
-            logger.log(""<-- END HTTP"");
-
-            return response;
-          }
+          charset = contentType.charset(UTF8);
         }
 
         if (!isPlaintext(buffer)) {
@@ -563,7 +563,7 @@ private void bodyGetNoBody(int code) throws IOException {
 
     server.enqueue(new MockResponse()
         .setHeader(""Content-Type"", ""text/html; charset=0"")
-        .setBody(""Ignore This""));
+        .setBody(""Body with unknown charset""));
     Response response = client.newCall(request().build()).execute();
     response.body().close();
 
@@ -578,8 +578,8 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual(""Content-Type: text/html; charset=0"")
         .assertLogMatch(""Content-Length: \\d+"")
         .assertLogMatch("""")
-        .assertLogEqual(""Couldn't decode the response body; charset is likely malformed."")
-        .assertLogEqual(""<-- END HTTP"")
+        .assertLogEqual(""Body with unknown charset"")
+        .assertLogEqual(""<-- END HTTP (25-byte body)"")
         .assertNoMoreLogs();
 
     applicationLogs
@@ -589,8 +589,8 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual(""Content-Type: text/html; charset=0"")
         .assertLogMatch(""Content-Length: \\d+"")
         .assertLogEqual("""")
-        .assertLogEqual(""Couldn't decode the response body; charset is likely malformed."")
-        .assertLogEqual(""<-- END HTTP"")
+        .assertLogEqual(""Body with unknown charset"")
+        .assertLogEqual(""<-- END HTTP (25-byte body)"")
         .assertNoMoreLogs();
   }
 
@@ -17,15 +17,12 @@
 package okhttp3;
 
 import java.nio.charset.Charset;
-import java.nio.charset.IllegalCharsetNameException;
-import java.nio.charset.UnsupportedCharsetException;
 import okhttp3.internal.Util;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
 
 /**
  * Test MediaType API and parsing.
@@ -123,29 +120,17 @@ public class MediaTypeTest {
   }
 
   @Test public void testMultipleCharsets() {
-    try {
-      MediaType.parse(""text/plain; charset=utf-8; charset=utf-16"");
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
+    assertNull(MediaType.parse(""text/plain; charset=utf-8; charset=utf-16""));
   }
 
   @Test public void testIllegalCharsetName() {
     MediaType mediaType = MediaType.parse(""text/plain; charset=\""!@#$%^&*()\"""");
-    try {
-      mediaType.charset();
-      fail();
-    } catch (IllegalCharsetNameException expected) {
-    }
+    assertNull(mediaType.charset());
   }
 
   @Test public void testUnsupportedCharset() {
     MediaType mediaType = MediaType.parse(""text/plain; charset=utf-wtf"");
-    try {
-      mediaType.charset();
-      fail();
-    } catch (UnsupportedCharsetException expected) {
-    }
+    assertNull(mediaType.charset());
   }
 
   /**
@@ -159,20 +144,12 @@ public class MediaTypeTest {
 
   @Test public void testCharsetNameIsDoubleQuotedAndSingleQuoted() throws Exception {
     MediaType mediaType = MediaType.parse(""text/plain;charset=\""'utf-8'\"""");
-    try {
-      mediaType.charset();
-      fail();
-    } catch (IllegalCharsetNameException expected) {
-    }
+    assertNull(mediaType.charset());
   }
 
   @Test public void testCharsetNameIsDoubleQuotedSingleQuote() throws Exception {
     MediaType mediaType = MediaType.parse(""text/plain;charset=\""'\"""");
-    try {
-      mediaType.charset();
-      fail();
-    } catch (IllegalCharsetNameException expected) {
-    }
+    assertNull(mediaType.charset());
   }
 
   @Test public void testDefaultCharset() throws Exception {
@@ -189,7 +166,7 @@ public class MediaTypeTest {
     MediaType mediaType = MediaType.parse(""text/plain;"");
     assertEquals(""text"", mediaType.type());
     assertEquals(""plain"", mediaType.subtype());
-    assertEquals(null, mediaType.charset());
+    assertNull(mediaType.charset());
     assertEquals(""text/plain;"", mediaType.toString());
   }
 
@@ -73,7 +73,7 @@ public static MediaType parse(String string) {
         charsetParameter = parameter.group(3);
       }
       if (charset != null && !charsetParameter.equalsIgnoreCase(charset)) {
-        throw new IllegalArgumentException(""Multiple different charsets: "" + string);
+        return null; // Multiple different charsets!
       }
       charset = charsetParameter;
     }
@@ -100,15 +100,19 @@ public String subtype() {
    * Returns the charset of this media type, or null if this media type doesn't specify a charset.
    */
   public Charset charset() {
-    return charset != null ? Charset.forName(charset) : null;
+    return charset(null);
   }
 
   /**
-   * Returns the charset of this media type, or {@code defaultValue} if this media type doesn't
-   * specify a charset.
+   * Returns the charset of this media type, or {@code defaultValue} if either this media type
+   * doesn't specify a charset, of it its charset is unsupported by the current runtime.
    */
   public Charset charset(Charset defaultValue) {
-    return charset != null ? Charset.forName(charset) : defaultValue;
+    try {
+      return charset != null ? Charset.forName(charset) : defaultValue;
+    } catch (IllegalArgumentException e) {
+      return defaultValue; // This charset is invalid or unsupported. Give up.
+    }
   }
 
   /**
"
https://github.com/spring-projects/spring-boot/commit/3d27391d47910f73c1e889b76030a53038a38f25,Allow StringSequence.isEmpty() to be compatible with JDK 15  <enter> JDK 15 introduces isEmpty() on CharSequence which clashes with the one declared in StringSequence because it is not public. <enter> See  <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/3d27391d47910f73c1e889b76030a53038a38f25,"@@ -72,7 +72,11 @@ public StringSequence subSequence(int start, int end) {
 		return new StringSequence(this.source, subSequenceStart, subSequenceEnd);
 	}
 
-	boolean isEmpty() {
+	/**
+	 * Returns {@code true} if the sequence is empty. Public to be compatible with JDK 15.
+	 * @return {@code true} if {@link #length()} is {@code 0}, otherwise {@code false}
+	 */
+	public boolean isEmpty() {
 		return length() == 0;
 	}
 
@@ -46,4 +46,5 @@
 	<suppress files=""[\\/]src[\\/]intTest[\\/]java[\\/]"" checks=""SpringJavadoc"" message=""\@since"" />
 	<suppress files=""LinuxDomainSocket"" checks=""FinalClass"" message=""SockaddrUn"" />
 	<suppress files=""BsdDomainSocket"" checks=""FinalClass"" message=""SockaddrUn"" />
+	<suppress files=""StringSequence"" checks=""SpringMethodVisibility"" />
 </suppressions>
"
https://github.com/square/okhttp/commit/c6c7ce7dadf2ccaa04122f57a278a4a96d1f5c50,"DiskLruCache snapshot() method removing entries that are being cached (<pr_link> ) <enter> Fixed a bug I found. When using DiskLruCache, hasNext() method of Iterator<Snapshot> returned by snapshot() method iterates through lruEntries, however if entry is not completed yet, it is removed (together with dirtyFiles) as cleanFiles don't exist yet - during saving response to disk. This caused sometimes file not being cached at all. ",https://api.github.com/repos/square/okhttp/commits/c6c7ce7dadf2ccaa04122f57a278a4a96d1f5c50,"@@ -706,6 +706,8 @@ class DiskLruCache internal constructor(
 
           while (delegate.hasNext()) {
             val entry = delegate.next()
+            if (entry == null || !entry.readable) continue // Entry during edit
+
             val snapshot = entry.snapshot() ?: continue
             // Evicted since we copied the entries.
             nextSnapshot = snapshot
@@ -1643,6 +1643,25 @@ private void createNewCacheWithSize(int maxSize) throws IOException {
     assertAbsent(""k1"");
   }
 
+  @Test public void dontRemoveUnfinishedEntryWhenCreatingSnapshot() throws Exception {
+    DiskLruCache.Editor creator = cache.edit(""k1"");
+    setString(creator, 0, ""ABC"");
+    setString(creator, 1, ""DE"");
+
+    assertThat(creator.newSource(0)).isNull();
+    assertThat(creator.newSource(1)).isNull();
+
+    Iterator<DiskLruCache.Snapshot> snapshotWhileEditing = cache.snapshots();
+    assertThat(snapshotWhileEditing.hasNext()).isFalse(); // entry still is being created/edited
+    creator.commit();
+
+    Iterator<DiskLruCache.Snapshot> snapshotAfterCommit = cache.snapshots();
+
+    assertThat(snapshotAfterCommit.hasNext())
+        .withFailMessage(""Entry has been removed during creation."")
+        .isTrue();
+  }
+
   private void assertJournalEquals(String... expectedBodyLines) throws Exception {
     List<String> expectedLines = new ArrayList<>();
     expectedLines.add(MAGIC);
"
https://github.com/spring-projects/spring-boot/commit/3a8a1272855a82c1d454920b423c49ced826428a,Implement simpler exclusion logic for Gradle  <enter> Simplify the exclusion logic used in Gradle by implementing implicit exclusions rather than trying to detect transitive excludes. <enter> This commit reverts much of the code originally included to  fix   <issue_link>  which adds far too much complexity to the build and still doesn't solve the underlying issue. <enter>  Fixes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/3a8a1272855a82c1d454920b423c49ced826428a,"@@ -105,12 +105,8 @@
 				<skipTests>true</skipTests>
 			</properties>
 			<modules>
-				<module>spring-boot-dependencies</module>
 				<module>spring-boot-versions</module>
 				<module>spring-boot-parent</module>
-				<module>spring-boot</module>
-				<module>spring-boot-autoconfigure</module>
-				<module>spring-boot-actuator</module>
 				<module>spring-boot-starters</module>
 				<module>spring-boot-tools</module>
 			</modules>
@@ -1,4 +1,5 @@
-<?xml version=""1.0"" encoding=""UTF-8""?><project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
 	<modelVersion>4.0.0</modelVersion>
 	<groupId>org.springframework.boot</groupId>
 	<artifactId>spring-boot-dependencies</artifactId>
@@ -1283,4 +1284,4 @@
 			</plugins>
 		</pluginManagement>
 	</build>
-</project>
\ No newline at end of file
+</project>
@@ -296,8 +296,7 @@ which does not have an `exclusion` element.
 
 To ensure that correct exclusions are actually applied, the Spring Boot Gradle plugin will
 automatically add exclusion rules. All exclusions defined in the
-`spring-boot-dependencies` POM and the ``starter'' POMs will be added (both direct and
-transitive exclusions).
+`spring-boot-dependencies` POM and implicit rules for the ``starter'' POMs will be added.
 
 If you don't want exclusion rules automatically applied you can use the following
 configuration:
@@ -37,7 +37,7 @@
 /**
  * Tests for war packaging with Gradle to ensure that only the Servlet container and its
  * dependencies are packaged in WEB-INF/lib-provided
- *
+ * 
  * @author Andy Wilkinson
  */
 public class WarPackagingTests {
@@ -54,6 +54,7 @@ public class WarPackagingTests {
 			Arrays.asList(WEB_INF_LIB_PROVIDED_PREFIX + ""spring-boot-starter-jetty-"",
 					WEB_INF_LIB_PROVIDED_PREFIX + ""jetty-util-"",
 					WEB_INF_LIB_PROVIDED_PREFIX + ""jetty-xml-"",
+					WEB_INF_LIB_PROVIDED_PREFIX + ""javax.servlet-"",
 					WEB_INF_LIB_PROVIDED_PREFIX + ""jetty-continuation-"",
 					WEB_INF_LIB_PROVIDED_PREFIX + ""jetty-io-"",
 					WEB_INF_LIB_PROVIDED_PREFIX + ""jetty-http-"",
@@ -20,7 +20,6 @@
 		<main.basedir>${basedir}/..</main.basedir>
 	</properties>
 	<modules>
-		<!-- If you add a starter remember to also add a dependency in spring-boot-versions -->
 		<module>spring-boot-starter</module>
 		<module>spring-boot-starter-amqp</module>
 		<module>spring-boot-starter-aop</module>
@@ -30,7 +30,7 @@
 				<artifactId>maven-dependency-plugin</artifactId>
 				<executions>
 					<execution>
-						<id>copy-resources</id>
+						<id>copy-effective-pom</id>
 						<phase>generate-resources</phase>
 						<goals>
 							<goal>copy</goal>
@@ -46,15 +46,6 @@
 									<outputDirectory>${generated.pom.dir}</outputDirectory>
 									<destFileName>effective-pom.xml</destFileName>
 								</artifactItem>
-								<artifactItem>
-									<groupId>org.springframework.boot</groupId>
-									<artifactId>spring-boot-versions</artifactId>
-									<version>${project.version}</version>
-									<type>dependency-tree</type>
-									<overWrite>true</overWrite>
-									<outputDirectory>${generated.pom.dir}</outputDirectory>
-									<destFileName>dependency-tree.txt</destFileName>
-								</artifactItem>
 							</artifactItems>
 						</configuration>
 					</execution>
@@ -1,131 +0,0 @@
-/*
- * Copyright 2012-2014 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.springframework.boot.dependency.tools;
-
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.Map;
-import java.util.Set;
-
-import org.springframework.boot.dependency.tools.Dependency.Exclusion;
-import org.springframework.boot.dependency.tools.Dependency.ExclusionType;
-
-/**
- * {@link Dependencies} to extend an existing {@link Dependencies} instance with
- * transitive {@link Exclusion}s located from a {@link DependencyTree}.
- * 
- * @author Phillip Webb
- * @since 1.1.0
- */
-class DependenciesWithTransitiveExclusions extends AbstractDependencies {
-
-	public DependenciesWithTransitiveExclusions(Dependencies dependencies,
-			DependencyTree tree) {
-		DependencyBuilder builder = new DependencyBuilder(dependencies);
-		builder.addTransitiveExcludes(tree);
-		builder.finish();
-	}
-
-	/**
-	 * Builder used to collect the transitive exclusions.
-	 */
-	private class DependencyBuilder {
-
-		private Map<ArtifactAndGroupId, DependencyAndTransitiveExclusions> dependencies;
-
-		public DependencyBuilder(Dependencies dependencies) {
-			this.dependencies = new LinkedHashMap<ArtifactAndGroupId, DependencyAndTransitiveExclusions>();
-			for (Dependency dependency : dependencies) {
-				this.dependencies.put(new ArtifactAndGroupId(dependency),
-						new DependencyAndTransitiveExclusions(dependency));
-			}
-		}
-
-		public void addTransitiveExcludes(DependencyTree tree) {
-			for (DependencyNode node : tree) {
-				DependencyAndTransitiveExclusions dependency = this.dependencies
-						.get(asArtifactAndGroupId(node));
-				if (dependency != null) {
-					for (DependencyNode child : node) {
-						addTransitiveExcludes(dependency, child);
-					}
-				}
-			}
-		}
-
-		private void addTransitiveExcludes(DependencyAndTransitiveExclusions dependency,
-				DependencyNode node) {
-			DependencyAndTransitiveExclusions exclusions = this.dependencies
-					.get(asArtifactAndGroupId(node));
-			if (exclusions != null) {
-				dependency.addTransitiveExclusions(exclusions.getSourceDependency());
-			}
-			for (DependencyNode child : node) {
-				addTransitiveExcludes(dependency, child);
-			}
-		}
-
-		private ArtifactAndGroupId asArtifactAndGroupId(DependencyNode node) {
-			return new ArtifactAndGroupId(node.getGroupId(), node.getArtifactId());
-		}
-
-		public void finish() {
-			for (Map.Entry<ArtifactAndGroupId, DependencyAndTransitiveExclusions> entry : this.dependencies
-					.entrySet()) {
-				add(entry.getKey(), entry.getValue().createNewDependency());
-			}
-		}
-
-	}
-
-	/**
-	 * Holds a {@link Dependency} with additional transitive {@link Exclusion}s.
-	 */
-	private static class DependencyAndTransitiveExclusions {
-
-		private Dependency dependency;
-
-		private Set<Exclusion> transitiveExclusions = new LinkedHashSet<Exclusion>();
-
-		public DependencyAndTransitiveExclusions(Dependency dependency) {
-			this.dependency = dependency;
-		}
-
-		public Dependency getSourceDependency() {
-			return this.dependency;
-		}
-
-		public void addTransitiveExclusions(Dependency dependency) {
-			for (Exclusion exclusion : dependency.getExclusions()) {
-				this.transitiveExclusions.add(new Exclusion(exclusion.getGroupId(),
-						exclusion.getArtifactId(), ExclusionType.TRANSITIVE));
-			}
-		}
-
-		public Dependency createNewDependency() {
-			Set<Exclusion> exclusions = new LinkedHashSet<Dependency.Exclusion>();
-			exclusions.addAll(this.dependency.getExclusions());
-			exclusions.addAll(this.transitiveExclusions);
-			return new Dependency(this.dependency.getGroupId(),
-					this.dependency.getArtifactId(), this.dependency.getVersion(),
-					new ArrayList<Exclusion>(exclusions));
-		}
-
-	}
-
-}
@@ -137,15 +137,11 @@ public static final class Exclusion {
 
 		private final String artifactId;
 
-		private final ExclusionType type;
-
-		Exclusion(String groupId, String artifactId, ExclusionType type) {
+		Exclusion(String groupId, String artifactId) {
 			Assert.notNull(groupId, ""GroupId must not be null"");
 			Assert.notNull(groupId, ""ArtifactId must not be null"");
-			Assert.notNull(type, ""Type must not be null"");
 			this.groupId = groupId;
 			this.artifactId = artifactId;
-			this.type = type;
 		}
 
 		/**
@@ -162,10 +158,6 @@ public String getGroupId() {
 			return this.groupId;
 		}
 
-		public ExclusionType getType() {
-			return this.type;
-		}
-
 		@Override
 		public String toString() {
 			return this.groupId + "":"" + this.artifactId;
@@ -196,22 +188,4 @@ public boolean equals(Object obj) {
 
 	}
 
-	public static enum ExclusionType {
-
-		/**
-		 * An exclusion that was specified directly on the dependency.
-		 */
-		DIRECT,
-
-		/**
-		 * An exclusion that is was specified on a dependency of this dependency. For
-		 * example if {@literal commons-logging} is directly excluded from
-		 * {@literal spring-core} then it is also transitive exclude on
-		 * {@literal spring-context} (since {@literal spring-context} depends on
-		 * {@literal spring-core}).
-		 */
-		TRANSITIVE
-
-	}
-
 }
@@ -1,82 +0,0 @@
-/*
- * Copyright 2012-2014 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.springframework.boot.dependency.tools;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-
-/**
- * A single node in a {@link DependencyTree}.
- * 
- * @author Phillip Webb
- * @see DependencyTree
- * @since 1.1.0
- */
-class DependencyNode implements Iterable<DependencyNode> {
-
-	private final String groupId;
-
-	private final String artifactId;
-
-	private final String version;
-
-	private List<DependencyNode> dependencies;
-
-	DependencyNode(String groupId, String artifactId, String version) {
-		this.groupId = groupId;
-		this.artifactId = artifactId;
-		this.version = version;
-		this.dependencies = new ArrayList<DependencyNode>();
-	}
-
-	@Override
-	public Iterator<DependencyNode> iterator() {
-		return getDependencies().iterator();
-	}
-
-	public String getGroupId() {
-		return this.groupId;
-	}
-
-	public String getArtifactId() {
-		return this.artifactId;
-	}
-
-	public String getVersion() {
-		return this.version;
-	}
-
-	public List<DependencyNode> getDependencies() {
-		return Collections.unmodifiableList(this.dependencies);
-	}
-
-	@Override
-	public String toString() {
-		return this.groupId + "":"" + this.artifactId + "":"" + this.version;
-	}
-
-	void addDependency(DependencyNode node) {
-		this.dependencies.add(node);
-	}
-
-	DependencyNode getLastDependency() {
-		return this.dependencies.get(this.dependencies.size() - 1);
-	}
-
-}
@@ -1,159 +0,0 @@
-/*
- * Copyright 2012-2014 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.springframework.boot.dependency.tools;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.ArrayDeque;
-import java.util.Arrays;
-import java.util.Deque;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-/**
- * Dependency tree information that can be loaded from the output of
- * {@literal mvn dependency:tree}.
- * 
- * @author Phillip Webb
- * @since 1.1.0
- * @see DependencyNode
- */
-class DependencyTree implements Iterable<DependencyNode> {
-
-	private final DependencyNode root;
-
-	/**
-	 * Create a new {@link DependencyTree} instance for the given input stream.
-	 * @param inputStream input stream containing content from
-	 * {@literal mvn dependency:tree} (the stream will be closed).
-	 */
-	public DependencyTree(InputStream inputStream) {
-		try {
-			this.root = parse(inputStream);
-		}
-		catch (IOException ex) {
-			throw new IllegalStateException(ex);
-		}
-	}
-
-	private DependencyNode parse(InputStream inputStream) throws IOException {
-		try {
-			BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
-			Parser parser = new Parser();
-			String line;
-			while ((line = reader.readLine()) != null) {
-				parser.append(line);
-			}
-			return parser.getRoot();
-		}
-		finally {
-			inputStream.close();
-		}
-	}
-
-	@Override
-	public Iterator<DependencyNode> iterator() {
-		return getDependencies().iterator();
-	}
-
-	/**
-	 * @return the root node for the tree.
-	 */
-	public DependencyNode getRoot() {
-		return this.root;
-	}
-
-	/**
-	 * @return the dependencies of the root node.
-	 */
-	public List<DependencyNode> getDependencies() {
-		return this.root.getDependencies();
-	}
-
-	/**
-	 * Return the node at the specified index.
-	 * @param index the index (multiple indexes can be used to traverse the tree)
-	 * @return the node at the specified index
-	 */
-	public DependencyNode get(int... index) {
-		DependencyNode rtn = this.root;
-		for (int i : index) {
-			rtn = rtn.getDependencies().get(i);
-		}
-		return rtn;
-	}
-
-	private static class Parser {
-
-		private static final int INDENT = 3;
-
-		private static final Set<Character> PREFIX_CHARS = new HashSet<Character>(
-				Arrays.asList(' ', '+', '-', '\\', '|'));
-
-		private static final Pattern LINE_PATTERN = Pattern
-				.compile(""[(]?([^:]*):([^:]*):([^:]*):([^:\\s]*)"");
-
-		private Deque<DependencyNode> stack = new ArrayDeque<DependencyNode>();
-
-		public void append(String line) {
-			int depth = getDepth(line);
-			String data = line.substring(depth * INDENT);
-			if (depth == 0) {
-				this.stack.push(createNode(data));
-			}
-			else {
-				while (depth < this.stack.size()) {
-					this.stack.pop();
-				}
-				if (depth > this.stack.size()) {
-					this.stack.push(this.stack.peek().getLastDependency());
-				}
-				this.stack.peek().addDependency(createNode(data));
-			}
-		}
-
-		private int getDepth(String line) {
-			for (int i = 0; i < line.length(); i++) {
-				if (!Parser.PREFIX_CHARS.contains(line.charAt(i))) {
-					return i / INDENT;
-				}
-			}
-			return 0;
-		}
-
-		private DependencyNode createNode(String line) {
-			Matcher matcher = LINE_PATTERN.matcher(line);
-			if (!matcher.find()) {
-				throw new IllegalStateException(""Unable to parese line "" + line);
-			}
-			return new DependencyNode(matcher.group(1), matcher.group(2),
-					matcher.group(4));
-		}
-
-		public DependencyNode getRoot() {
-			return this.stack.getLast();
-		}
-
-	}
-
-}
@@ -57,11 +57,7 @@ private void addAll(Dependencies dependencies) {
 
 	private static Dependencies getSpringBootDependencies() {
 		if (springBootDependencies == null) {
-			Dependencies dependencies = new PomDependencies(
-					getResource(""effective-pom.xml""));
-			DependencyTree tree = new DependencyTree(getResource(""dependency-tree.txt""));
-			dependencies = new DependenciesWithTransitiveExclusions(dependencies, tree);
-			springBootDependencies = dependencies;
+			springBootDependencies = new PomDependencies(getResource(""effective-pom.xml""));
 		}
 		return springBootDependencies;
 	}
@@ -25,7 +25,6 @@
 import javax.xml.parsers.DocumentBuilderFactory;
 
 import org.springframework.boot.dependency.tools.Dependency.Exclusion;
-import org.springframework.boot.dependency.tools.Dependency.ExclusionType;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -119,7 +118,7 @@ private List<Exclusion> createExclusions(Node item) {
 	private Exclusion createExclusion(Element element) {
 		String groupId = getTextContent(element, ""groupId"");
 		String artifactId = getTextContent(element, ""artifactId"");
-		return new Exclusion(groupId, artifactId, ExclusionType.DIRECT);
+		return new Exclusion(groupId, artifactId);
 	}
 
 	private String getTextContent(Element element, String tagName) {
@@ -1,50 +0,0 @@
-/*
- * Copyright 2012-2014 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.springframework.boot.dependency.tools;
-
-import org.junit.Test;
-
-import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
-
-/**
- * Tests for {@link DependenciesWithTransitiveExclusions}.
- * 
- * @author Phillip Webb
- */
-public class DependenciesWithTransitiveExclusionsTests {
-
-	@Test
-	public void findsTransitiveExclusions() throws Exception {
-		Dependencies source = new PomDependencies(getClass().getResourceAsStream(
-				""test-effective-pom.xml""));
-		DependencyTree tree = new DependencyTree(getClass().getResourceAsStream(
-				""test-effective-pom-dependency-tree.txt""));
-		DependenciesWithTransitiveExclusions dependencies = new DependenciesWithTransitiveExclusions(
-				source, tree);
-		assertExcludes(dependencies, ""sample01"", ""[org.exclude:exclude01]"");
-		assertExcludes(source, ""sample02"", ""[]"");
-		assertExcludes(dependencies, ""sample02"", ""[org.exclude:exclude01]"");
-	}
-
-	private void assertExcludes(Dependencies dependencies, String artifactId,
-			String expected) {
-		Dependency dependency = dependencies.find(""org.sample"", artifactId);
-		assertThat(dependency.getExclusions().toString(), equalTo(expected));
-	}
-
-}
@@ -1,44 +0,0 @@
-/*
- * Copyright 2012-2014 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.springframework.boot.dependency.tools;
-
-import org.junit.Test;
-import org.springframework.boot.dependency.tools.DependencyTree;
-
-import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
-
-/**
- * Tests for {@link DependencyTree}.
- * 
- * @author Phillip Webb
- */
-public class DependencyTreeTests {
-
-	@Test
-	public void parse() throws Exception {
-		DependencyTree tree = new DependencyTree(getClass().getResourceAsStream(
-				""sample-dependency-tree.txt""));
-		assertThat(tree.getRoot().toString(), equalTo(""org.springframework.boot:""
-				+ ""spring-boot-versions-dependency-tree:1.1.0.BUILD-SNAPSHOT""));
-		assertThat(tree.getDependencies().size(), equalTo(204));
-		assertThat(tree.get(0, 1).toString(), equalTo(""org.slf4j:slf4j-api:1.7.6""));
-		assertThat(tree.get(203).toString(), equalTo(""org.springframework.security:""
-				+ ""spring-security-web:3.2.4.RELEASE""));
-	}
-
-}
@@ -1,1087 +0,0 @@
-org.springframework.boot:spring-boot-versions-dependency-tree:pom:1.1.0.BUILD-SNAPSHOT
-+- ch.qos.logback:logback-classic:jar:1.1.2:compile
-|  +- ch.qos.logback:logback-core:jar:1.1.2:compile
-|  \- (org.slf4j:slf4j-api:jar:1.7.6:compile - omitted for conflict with 1.7.7)
-+- com.codahale.metrics:metrics-graphite:jar:3.0.2:compile
-|  +- (com.codahale.metrics:metrics-core:jar:3.0.2:compile - omitted for duplicate)
-|  \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-+- com.codahale.metrics:metrics-ganglia:jar:3.0.2:compile
-|  +- (com.codahale.metrics:metrics-core:jar:3.0.2:compile - omitted for duplicate)
-|  +- info.ganglia.gmetric4j:gmetric4j:jar:1.0.3:compile
-|  |  \- org.acplt:oncrpc:jar:1.0.7:compile
-|  \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-+- com.codahale.metrics:metrics-core:jar:3.0.2:compile
-|  \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-+- com.codahale.metrics:metrics-servlets:jar:3.0.2:compile
-|  +- (com.codahale.metrics:metrics-core:jar:3.0.2:compile - omitted for duplicate)
-|  +- com.codahale.metrics:metrics-healthchecks:jar:3.0.2:compile
-|  |  \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-|  +- com.codahale.metrics:metrics-json:jar:3.0.2:compile
-|  |  +- (com.codahale.metrics:metrics-core:jar:3.0.2:compile - omitted for duplicate)
-|  |  +- (com.fasterxml.jackson.core:jackson-databind:jar:2.2.2:compile - omitted for duplicate)
-|  |  \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-|  +- com.codahale.metrics:metrics-jvm:jar:3.0.2:compile
-|  |  +- (com.codahale.metrics:metrics-core:jar:3.0.2:compile - omitted for duplicate)
-|  |  \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-|  +- (com.fasterxml.jackson.core:jackson-databind:jar:2.2.2:compile - omitted for conflict with 2.3.3)
-|  \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-+- org.codehaus.janino:janino:jar:2.6.1:compile
-|  \- org.codehaus.janino:commons-compiler:jar:2.6.1:compile
-+- com.fasterxml.jackson.core:jackson-annotations:jar:2.3.3:compile
-+- com.fasterxml.jackson.core:jackson-core:jar:2.3.3:compile
-+- com.fasterxml.jackson.core:jackson-databind:jar:2.3.3:compile
-|  +- (com.fasterxml.jackson.core:jackson-annotations:jar:2.3.0:compile - omitted for conflict with 2.3.3)
-|  \- (com.fasterxml.jackson.core:jackson-core:jar:2.3.3:compile - omitted for duplicate)
-+- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.3.3:compile
-|  +- (com.fasterxml.jackson.core:jackson-annotations:jar:2.3.0:compile - omitted for conflict with 2.3.3)
-|  +- (com.fasterxml.jackson.core:jackson-core:jar:2.3.3:compile - omitted for duplicate)
-|  +- (com.fasterxml.jackson.core:jackson-databind:jar:2.3.3:compile - omitted for duplicate)
-|  \- (joda-time:joda-time:jar:2.1:compile - omitted for conflict with 2.3)
-+- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.3.3:compile
-|  +- (com.fasterxml.jackson.core:jackson-core:jar:2.3.3:compile - omitted for duplicate)
-|  \- (com.fasterxml.jackson.core:jackson-databind:jar:2.3.3:compile - omitted for duplicate)
-+- com.gemstone.gemfire:gemfire:jar:7.0.2:compile
-|  \- (antlr:antlr:jar:2.7.7:compile - scope updated from runtime; omitted for duplicate)
-+- com.h2database:h2:jar:1.3.175:compile
-+- com.zaxxer:HikariCP:jar:1.3.8:compile
-|  +- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-|  \- (org.javassist:javassist:jar:3.18.1-GA:compile - omitted for duplicate)
-+- commons-beanutils:commons-beanutils:jar:1.9.2:compile
-|  \- (commons-collections:commons-collections:jar:3.2.1:compile - omitted for duplicate)
-+- commons-collections:commons-collections:jar:3.2.1:compile
-+- commons-dbcp:commons-dbcp:jar:1.4:compile
-|  \- (commons-pool:commons-pool:jar:1.5.4:compile - omitted for conflict with 1.6)
-+- commons-digester:commons-digester:jar:2.1:compile
-|  \- (commons-beanutils:commons-beanutils:jar:1.8.3:compile - omitted for conflict with 1.9.2)
-+- commons-pool:commons-pool:jar:1.6:compile
-+- javax.jms:jms-api:jar:1.1-rev-1:compile
-+- javax.servlet:javax.servlet-api:jar:3.0.1:compile
-+- javax.servlet:jstl:jar:1.2:compile
-+- joda-time:joda-time:jar:2.3:compile
-+- junit:junit:jar:4.11:compile
-|  \- (org.hamcrest:hamcrest-core:jar:1.3:compile - omitted for duplicate)
-+- log4j:log4j:jar:1.2.17:compile
-+- mysql:mysql-connector-java:jar:5.1.30:compile
-+- nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:jar:1.2.4:compile
-|  \- (org.thymeleaf:thymeleaf:jar:2.1.2.RELEASE:compile - omitted for conflict with 2.1.3.RELEASE)
-+- org.apache.activemq:activemq-client:jar:5.9.1:compile
-|  +- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-|  +- org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.1.1:compile
-|  +- org.fusesource.hawtbuf:hawtbuf:jar:1.9:compile
-|  \- org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:jar:1.0.1:compile
-+- org.apache.activemq:activemq-broker:jar:5.9.1:compile
-|  +- (org.apache.activemq:activemq-client:jar:5.9.1:compile - omitted for duplicate)
-|  \- org.apache.activemq:activemq-openwire-legacy:jar:5.9.1:compile
-|     \- (org.apache.activemq:activemq-client:jar:5.9.1:compile - omitted for duplicate)
-+- org.apache.activemq:activemq-pool:jar:5.9.1:compile
-|  +- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-|  +- org.apache.activemq:activemq-jms-pool:jar:5.9.1:compile
-|  |  +- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-|  |  +- (org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.1.1:compile - omitted for duplicate)
-|  |  +- (org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0.1:compile - omitted for duplicate)
-|  |  \- (commons-pool:commons-pool:jar:1.6:compile - omitted for duplicate)
-|  +- (org.apache.activemq:activemq-client:jar:5.9.1:compile - omitted for duplicate)
-|  +- org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0.1:compile
-|  \- (commons-pool:commons-pool:jar:1.6:compile - omitted for duplicate)
-+- org.apache.commons:commons-pool2:jar:2.2:compile
-+- org.apache.httpcomponents:httpclient:jar:4.3.3:compile
-|  +- org.apache.httpcomponents:httpcore:jar:4.3.2:compile
-|  +- commons-logging:commons-logging:jar:1.1.3:compile
-|  \- commons-codec:commons-codec:jar:1.6:compile
-+- org.apache.httpcomponents:httpmime:jar:4.3.3:compile
-|  \- (org.apache.httpcomponents:httpclient:jar:4.3.3:compile - omitted for duplicate)
-+- org.apache.httpcomponents:httpasyncclient:jar:4.0.1:compile
-|  +- (org.apache.httpcomponents:httpcore:jar:4.3.2:compile - omitted for duplicate)
-|  +- org.apache.httpcomponents:httpcore-nio:jar:4.3.2:compile
-|  |  \- (org.apache.httpcomponents:httpcore:jar:4.3.2:compile - omitted for duplicate)
-|  +- (org.apache.httpcomponents:httpclient:jar:4.3.2:compile - omitted for conflict with 4.3.3)
-|  \- (commons-logging:commons-logging:jar:1.1.3:compile - omitted for duplicate)
-+- org.apache.tomcat.embed:tomcat-embed-core:jar:7.0.54:compile
-+- org.apache.tomcat.embed:tomcat-embed-el:jar:7.0.54:compile
-+- org.apache.tomcat.embed:tomcat-embed-logging-juli:jar:7.0.54:compile
-+- org.apache.tomcat.embed:tomcat-embed-jasper:jar:7.0.54:compile
-|  +- (org.apache.tomcat.embed:tomcat-embed-core:jar:7.0.54:compile - omitted for duplicate)
-|  +- (org.apache.tomcat.embed:tomcat-embed-el:jar:7.0.54:compile - omitted for duplicate)
-|  \- org.eclipse.jdt.core.compiler:ecj:jar:P20140317-1600:compile
-+- org.apache.tomcat.embed:tomcat-embed-websocket:jar:7.0.54:compile
-|  \- (org.apache.tomcat.embed:tomcat-embed-core:jar:7.0.54:compile - omitted for duplicate)
-+- org.apache.tomcat:tomcat-jdbc:jar:7.0.54:compile
-|  \- org.apache.tomcat:tomcat-juli:jar:7.0.54:compile
-+- org.apache.tomcat:tomcat-jsp-api:jar:7.0.54:compile
-|  +- org.apache.tomcat:tomcat-el-api:jar:7.0.54:compile
-|  \- org.apache.tomcat:tomcat-servlet-api:jar:7.0.54:compile
-+- org.apache.velocity:velocity:jar:1.7:compile
-|  +- (commons-collections:commons-collections:jar:3.2.1:compile - omitted for duplicate)
-|  \- commons-lang:commons-lang:jar:2.4:compile
-+- org.apache.velocity:velocity-tools:jar:2.0:compile
-|  +- (commons-beanutils:commons-beanutils:jar:1.7.0:compile - omitted for conflict with 1.9.2)
-|  +- (commons-digester:commons-digester:jar:1.8:compile - omitted for conflict with 2.1)
-|  +- commons-chain:commons-chain:jar:1.1:compile
-|  |  +- (commons-beanutils:commons-beanutils:jar:1.7.0:compile - omitted for conflict with 1.9.2)
-|  |  +- (commons-digester:commons-digester:jar:1.6:compile - omitted for conflict with 2.1)
-|  |  \- (commons-logging:commons-logging:jar:1.0.3:compile - omitted for conflict with 1.1.3)
-|  +- (commons-collections:commons-collections:jar:3.2:compile - omitted for conflict with 3.2.1)
-|  +- (commons-logging:commons-logging:jar:1.1:compile - omitted for conflict with 1.1.3)
-|  +- commons-validator:commons-validator:jar:1.3.1:compile
-|  |  +- (commons-beanutils:commons-beanutils:jar:1.7.0:compile - omitted for conflict with 1.9.2)
-|  |  +- (commons-digester:commons-digester:jar:1.6:compile - omitted for conflict with 2.1)
-|  |  \- (commons-logging:commons-logging:jar:1.0.4:compile - omitted for conflict with 1.1.3)
-|  +- dom4j:dom4j:jar:1.1:compile
-|  +- oro:oro:jar:2.0.8:compile
-|  +- sslext:sslext:jar:1.2-0:compile
-|  +- org.apache.struts:struts-core:jar:1.3.8:compile
-|  |  +- antlr:antlr:jar:2.7.7:compile
-|  |  +- (commons-beanutils:commons-beanutils:jar:1.7.0:compile - omitted for conflict with 1.9.2)
-|  |  +- (commons-chain:commons-chain:jar:1.1:compile - omitted for duplicate)
-|  |  +- (commons-digester:commons-digester:jar:1.8:compile - omitted for conflict with 2.1)
-|  |  +- (commons-logging:commons-logging:jar:1.0.4:compile - omitted for conflict with 1.1.3)
-|  |  +- (commons-validator:commons-validator:jar:1.3.1:compile - omitted for duplicate)
-|  |  \- (oro:oro:jar:2.0.8:compile - omitted for duplicate)
-|  +- org.apache.struts:struts-taglib:jar:1.3.8:compile
-|  |  \- (org.apache.struts:struts-core:jar:1.3.8:compile - omitted for duplicate)
-|  +- org.apache.struts:struts-tiles:jar:1.3.8:compile
-|  |  \- (org.apache.struts:struts-core:jar:1.3.8:compile - omitted for duplicate)
-|  \- (org.apache.velocity:velocity:jar:1.6.2:compile - omitted for conflict with 1.7)
-+- org.aspectj:aspectjrt:jar:1.8.0:compile
-+- org.aspectj:aspectjtools:jar:1.8.0:compile
-+- org.aspectj:aspectjweaver:jar:1.8.0:compile
-+- org.codehaus.groovy:groovy:jar:2.3.2:compile
-+- org.codehaus.groovy:groovy-all:jar:2.3.2:compile
-+- org.codehaus.groovy:groovy-ant:jar:2.3.2:compile
-|  +- (org.codehaus.groovy:groovy-groovydoc:jar:2.3.2:compile - omitted for duplicate)
-|  +- org.apache.ant:ant-antlr:jar:1.9.3:runtime
-|  +- org.apache.ant:ant:jar:1.9.3:compile
-|  |  \- org.apache.ant:ant-launcher:jar:1.9.3:compile
-|  +- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-|  +- (org.apache.ant:ant-launcher:jar:1.9.3:compile - scope updated from runtime; omitted for duplicate)
-|  \- org.apache.ant:ant-junit:jar:1.9.3:runtime
-|     \- (org.apache.ant:ant:jar:1.9.3:runtime - omitted for duplicate)
-+- org.codehaus.groovy:groovy-bsf:jar:2.3.2:compile
-|  +- (commons-logging:commons-logging:jar:1.1.1:compile - omitted for conflict with 1.1.3)
-|  +- bsf:bsf:jar:2.4.0:compile
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-console:jar:2.3.2:compile
-|  +- (org.codehaus.groovy:groovy-swing:jar:2.3.2:compile - omitted for duplicate)
-|  +- (org.codehaus.groovy:groovy-templates:jar:2.3.2:compile - omitted for duplicate)
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-docgenerator:jar:2.3.2:compile
-|  +- (org.codehaus.groovy:groovy-templates:jar:2.3.2:compile - omitted for duplicate)
-|  +- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-|  \- com.thoughtworks.qdox:qdox:jar:1.12.1:compile
-+- org.codehaus.groovy:groovy-groovydoc:jar:2.3.2:compile
-|  +- (org.codehaus.groovy:groovy-templates:jar:2.3.2:compile - omitted for duplicate)
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-groovysh:jar:2.3.2:compile
-|  +- jline:jline:jar:2.11:compile
-|  +- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-|  \- (org.codehaus.groovy:groovy-console:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-jmx:jar:2.3.2:compile
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-json:jar:2.3.2:compile
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-jsr223:jar:2.3.2:compile
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-nio:jar:2.3.2:compile
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-servlet:jar:2.3.2:compile
-|  +- (org.codehaus.groovy:groovy-xml:jar:2.3.2:compile - omitted for duplicate)
-|  +- (org.codehaus.groovy:groovy-templates:jar:2.3.2:compile - omitted for duplicate)
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-sql:jar:2.3.2:compile
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-swing:jar:2.3.2:compile
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-templates:jar:2.3.2:compile
-|  +- (org.codehaus.groovy:groovy-xml:jar:2.3.2:compile - omitted for duplicate)
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-test:jar:2.3.2:compile
-|  +- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-|  \- (junit:junit:jar:4.11:compile - omitted for duplicate)
-+- org.codehaus.groovy:groovy-testng:jar:2.3.2:compile
-|  +- com.beust:jcommander:jar:1.35:compile
-|  +- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-|  \- org.testng:testng:jar:6.8.8:runtime
-+- org.codehaus.groovy:groovy-xml:jar:2.3.2:compile
-|  \- (org.codehaus.groovy:groovy:jar:2.3.2:compile - omitted for duplicate)
-+- org.crashub:crash.cli:jar:1.3.0-cr4:compile
-+- org.crashub:crash.connectors.ssh:jar:1.3.0-cr4:compile
-|  +- (org.crashub:crash.shell:jar:1.3.0-cr4:compile - omitted for duplicate)
-|  +- org.apache.sshd:sshd-core:jar:0.11.0:compile
-|  |  \- (org.apache.mina:mina-core:jar:2.0.7:compile - omitted for duplicate)
-|  +- org.apache.sshd:sshd-pam:jar:0.11.0:compile
-|  |  +- (org.apache.sshd:sshd-core:jar:0.11.0:compile - omitted for duplicate)
-|  |  \- net.sf.jpam:jpam:jar:1.1:compile
-|  |     \- (commons-logging:commons-logging:jar:1.0.4:compile - omitted for conflict with 1.1.3)
-|  +- org.bouncycastle:bcprov-jdk15on:jar:1.49:compile
-|  +- org.bouncycastle:bcpkix-jdk15on:jar:1.49:compile
-|  |  \- (org.bouncycastle:bcprov-jdk15on:jar:1.49:compile - omitted for duplicate)
-|  \- org.apache.mina:mina-core:jar:2.0.7:compile
-|     \- (org.slf4j:slf4j-api:jar:1.6.6:compile - omitted for conflict with 1.7.6)
-+- org.crashub:crash.connectors.telnet:jar:1.3.0-cr4:compile
-|  +- (org.crashub:crash.shell:jar:1.3.0-cr4:compile - omitted for duplicate)
-|  \- net.wimpi:telnetd-x:jar:2.1.1:compile
-|     +- (log4j:log4j:jar:1.2.9:compile - omitted for conflict with 1.2.17)
-|     \- (commons-logging:commons-logging:jar:1.1:compile - omitted for conflict with 1.1.3)
-+- org.crashub:crash.embed.spring:jar:1.3.0-cr4:compile
-|  +- (org.crashub:crash.shell:jar:1.3.0-cr4:compile - omitted for duplicate)
-|  +- (org.springframework:spring-core:jar:3.1.1.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-web:jar:3.1.1.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.1.1.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.springframework:spring-beans:jar:3.1.1.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.crashub:crash.plugins.cron:jar:1.3.0-cr4:compile
-|  +- (org.crashub:crash.shell:jar:1.3.0-cr4:compile - omitted for duplicate)
-|  \- it.sauronsoftware.cron4j:cron4j:jar:2.2.5:compile
-+- org.crashub:crash.plugins.mail:jar:1.3.0-cr4:compile
-|  +- (org.crashub:crash.shell:jar:1.3.0-cr4:compile - omitted for duplicate)
-|  \- javax.mail:mail:jar:1.4:compile
-|     \- javax.activation:activation:jar:1.1:compile
-+- org.crashub:crash.shell:jar:1.3.0-cr4:compile
-|  +- (org.crashub:crash.cli:jar:1.3.0-cr4:compile - omitted for duplicate)
-|  \- (org.codehaus.groovy:groovy-all:jar:1.8.9:compile - omitted for conflict with 2.3.2)
-+- org.eclipse.jetty:jetty-annotations:jar:8.1.15.v20140411:compile
-|  +- org.eclipse.jetty:jetty-plus:jar:8.1.15.v20140411:compile
-|  |  +- org.eclipse.jetty.orbit:javax.transaction:jar:1.1.1.v201105210645:compile
-|  |  +- (org.eclipse.jetty:jetty-webapp:jar:8.1.15.v20140411:compile - omitted for duplicate)
-|  |  \- org.eclipse.jetty:jetty-jndi:jar:8.1.15.v20140411:compile
-|  |     +- org.eclipse.jetty:jetty-server:jar:8.1.15.v20140411:compile
-|  |     |  +- (org.eclipse.jetty.orbit:javax.servlet:jar:3.0.0.v201112011016:compile - omitted for duplicate)
-|  |     |  +- org.eclipse.jetty:jetty-continuation:jar:8.1.15.v20140411:compile
-|  |     |  \- org.eclipse.jetty:jetty-http:jar:8.1.15.v20140411:compile
-|  |     |     \- org.eclipse.jetty:jetty-io:jar:8.1.15.v20140411:compile
-|  |     |        \- (org.eclipse.jetty:jetty-util:jar:8.1.15.v20140411:compile - omitted for duplicate)
-|  |     \- org.eclipse.jetty.orbit:javax.mail.glassfish:jar:1.4.1.v201005082020:compile
-|  |        \- org.eclipse.jetty.orbit:javax.activation:jar:1.1.0.v201105071233:compile
-|  +- (org.eclipse.jetty:jetty-webapp:jar:8.1.15.v20140411:compile - omitted for duplicate)
-|  +- org.eclipse.jetty.orbit:javax.annotation:jar:1.1.0.v201108011116:compile
-|  \- org.eclipse.jetty.orbit:org.objectweb.asm:jar:3.1.0.v200803061910:compile
-+- org.eclipse.jetty:jetty-jsp:jar:8.1.15.v20140411:compile
-|  +- (org.eclipse.jetty.orbit:javax.servlet.jsp:jar:2.2.0.v201112011158:compile - omitted for duplicate)
-|  +- org.eclipse.jetty.orbit:org.apache.jasper.glassfish:jar:2.2.2.v201112011158:compile
-|  |  \- (org.eclipse.jetty.orbit:javax.servlet.jsp:jar:2.2.0.v201112011158:compile - omitted for duplicate)
-|  +- org.eclipse.jetty.orbit:javax.servlet.jsp.jstl:jar:1.2.0.v201105211821:compile
-|  |  \- (org.eclipse.jetty.orbit:javax.servlet.jsp:jar:2.1.0.v201105211820:compile - omitted for conflict with 2.2.0.v201112011158)
-|  +- org.eclipse.jetty.orbit:org.apache.taglibs.standard.glassfish:jar:1.2.0.v201112081803:compile
-|  |  \- (org.eclipse.jetty.orbit:javax.servlet.jsp.jstl:jar:1.2.0.v201105211821:compile - omitted for duplicate)
-|  +- org.eclipse.jetty.orbit:javax.el:jar:2.2.0.v201108011116:compile
-|  +- org.eclipse.jetty.orbit:com.sun.el:jar:2.2.0.v201108011116:compile
-|  \- org.eclipse.jetty.orbit:org.eclipse.jdt.core:jar:3.7.1:compile
-+- org.eclipse.jetty:jetty-webapp:jar:8.1.15.v20140411:compile
-|  +- org.eclipse.jetty:jetty-xml:jar:8.1.15.v20140411:compile
-|  |  \- (org.eclipse.jetty:jetty-util:jar:8.1.15.v20140411:compile - omitted for duplicate)
-|  \- org.eclipse.jetty:jetty-servlet:jar:8.1.15.v20140411:compile
-|     \- org.eclipse.jetty:jetty-security:jar:8.1.15.v20140411:compile
-|        \- (org.eclipse.jetty:jetty-server:jar:8.1.15.v20140411:compile - omitted for duplicate)
-+- org.eclipse.jetty:jetty-util:jar:8.1.15.v20140411:compile
-+- org.eclipse.jetty.orbit:javax.servlet.jsp:jar:2.2.0.v201112011158:compile
-|  \- org.eclipse.jetty.orbit:javax.servlet:jar:3.0.0.v201112011016:compile
-+- org.freemarker:freemarker:jar:2.3.20:compile
-+- org.flywaydb:flyway-core:jar:3.0:compile
-+- org.hamcrest:hamcrest-core:jar:1.3:compile
-+- org.hamcrest:hamcrest-library:jar:1.3:compile
-|  \- (org.hamcrest:hamcrest-core:jar:1.3:compile - omitted for duplicate)
-+- org.hibernate:hibernate-entitymanager:jar:4.3.1.Final:compile
-|  +- org.jboss.logging:jboss-logging:jar:3.1.3.GA:compile
-|  +- org.jboss.logging:jboss-logging-annotations:jar:1.2.0.Beta1:compile
-|  +- org.hibernate:hibernate-core:jar:4.3.1.Final:compile
-|  |  +- (org.jboss.logging:jboss-logging:jar:3.1.3.GA:compile - omitted for duplicate)
-|  |  +- (org.jboss.logging:jboss-logging-annotations:jar:1.2.0.Beta1:compile - omitted for duplicate)
-|  |  +- (org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:jar:1.0.0.Final:compile - omitted for duplicate)
-|  |  +- (dom4j:dom4j:jar:1.6.1:compile - omitted for conflict with 1.1)
-|  |  +- (org.hibernate.common:hibernate-commons-annotations:jar:4.0.4.Final:compile - omitted for duplicate)
-|  |  +- (org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar:1.0.0.Final:compile - omitted for duplicate)
-|  |  +- (org.javassist:javassist:jar:3.18.1-GA:compile - omitted for duplicate)
-|  |  +- (antlr:antlr:jar:2.7.7:compile - omitted for duplicate)
-|  |  \- org.jboss:jandex:jar:1.1.0.Final:compile
-|  +- (dom4j:dom4j:jar:1.6.1:compile - omitted for conflict with 1.1)
-|  +- org.hibernate.common:hibernate-commons-annotations:jar:4.0.4.Final:compile
-|  |  +- (org.jboss.logging:jboss-logging:jar:3.1.3.GA:compile - omitted for duplicate)
-|  |  \- (org.jboss.logging:jboss-logging-annotations:jar:1.2.0.Beta1:compile - omitted for duplicate)
-|  +- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar:1.0.0.Final:compile
-|  +- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:jar:1.0.0.Final:compile
-|  \- (org.javassist:javassist:jar:3.18.1-GA:compile - omitted for duplicate)
-+- org.hibernate:hibernate-validator:jar:5.0.3.Final:compile
-|  +- javax.validation:validation-api:jar:1.1.0.Final:compile
-|  +- (org.jboss.logging:jboss-logging:jar:3.1.1.GA:compile - omitted for conflict with 3.1.3.GA)
-|  \- com.fasterxml:classmate:jar:1.0.0:compile
-+- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:jar:1.0.1.Final:compile
-+- org.hornetq:hornetq-jms-server:jar:2.4.1.Final:compile
-|  +- org.hornetq:hornetq-core-client:jar:2.4.1.Final:compile
-|  |  +- org.jgroups:jgroups:jar:3.3.4.Final:compile
-|  |  +- org.hornetq:hornetq-commons:jar:2.4.1.Final:compile
-|  |  |  +- (org.jboss.logging:jboss-logging:jar:3.1.0.GA:compile - omitted for conflict with 3.1.3.GA)
-|  |  |  \- (io.netty:netty-all:jar:4.0.13.Final:compile - omitted for duplicate)
-|  |  +- org.hornetq:hornetq-journal:jar:2.4.1.Final:compile
-|  |  |  +- (org.jboss.logging:jboss-logging:jar:3.1.0.GA:compile - omitted for conflict with 3.1.3.GA)
-|  |  |  +- (org.hornetq:hornetq-commons:jar:2.4.1.Final:compile - omitted for duplicate)
-|  |  |  \- org.hornetq:hornetq-native:jar:2.4.1.Final:compile
-|  |  |     \- (org.hornetq:hornetq-commons:jar:2.4.1.Final:compile - omitted for duplicate)
-|  |  \- (io.netty:netty-all:jar:4.0.13.Final:compile - omitted for conflict with 4.0.19.Final)
-|  +- (org.hornetq:hornetq-jms-client:jar:2.4.1.Final:compile - omitted for duplicate)
-|  +- org.hornetq:hornetq-server:jar:2.4.1.Final:compile
-|  |  +- (org.jboss.logging:jboss-logging:jar:3.1.0.GA:compile - omitted for conflict with 3.1.3.GA)
-|  |  +- (org.hornetq:hornetq-commons:jar:2.4.1.Final:compile - omitted for duplicate)
-|  |  +- (org.hornetq:hornetq-journal:jar:2.4.1.Final:compile - omitted for duplicate)
-|  |  +- (org.hornetq:hornetq-core-client:jar:2.4.1.Final:compile - omitted for duplicate)
-|  |  \- (io.netty:netty-all:jar:4.0.13.Final:compile - omitted for duplicate)
-|  +- org.jboss.spec.javax.jms:jboss-jms-api_2.0_spec:jar:1.0.0.Final:compile
-|  +- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:jar:1.0.0.Final:compile
-|  +- org.jboss:jboss-transaction-spi:jar:7.0.0.Final:compile
-|  |  +- org.jboss.spec.javax.resource:jboss-connector-api_1.5_spec:jar:1.0.0.Final:compile
-|  |  |  \- (org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:jar:1.0.0.Final:compile - omitted for duplicate)
-|  |  \- (org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:jar:1.0.1.Beta1:compile - omitted for conflict with 1.0.0.Final)
-|  \- org.jboss.naming:jnpserver:jar:5.0.3.GA:compile
-|     \- org.jboss:jboss-common-core:jar:2.2.10.GA:compile
-+- org.hornetq:hornetq-jms-client:jar:2.4.1.Final:compile
-|  +- (org.hornetq:hornetq-core-client:jar:2.4.1.Final:compile - omitted for duplicate)
-|  +- (org.jboss.spec.javax.jms:jboss-jms-api_2.0_spec:jar:1.0.0.Final:compile - omitted for duplicate)
-|  \- javax.inject:javax.inject:jar:1:compile
-+- org.hsqldb:hsqldb:jar:2.3.2:compile
-+- org.javassist:javassist:jar:3.18.1-GA:compile
-+- org.jolokia:jolokia-core:jar:1.2.1:compile
-|  \- com.googlecode.json-simple:json-simple:jar:1.1:compile
-+- org.liquibase:liquibase-core:jar:3.0.8:compile
-|  \- (org.yaml:snakeyaml:jar:1.13:compile - omitted for duplicate)
-+- org.mongodb:mongo-java-driver:jar:2.12.1:compile
-+- org.projectreactor:reactor-core:jar:1.1.2.RELEASE:compile
-|  +- com.goldmansachs:gs-collections:jar:5.0.0:compile
-|  |  \- com.goldmansachs:gs-collections-api:jar:5.0.0:compile
-|  +- com.lmax:disruptor:jar:3.2.1:compile
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-+- org.projectreactor:reactor-groovy:jar:1.1.2.RELEASE:compile
-|  +- (org.codehaus.groovy:groovy-all:jar:2.3.2:compile - omitted for duplicate)
-|  +- (org.projectreactor:reactor-core:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  +- (org.projectreactor:reactor-groovy-extensions:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-+- org.projectreactor:reactor-groovy-extensions:jar:1.1.2.RELEASE:compile
-|  +- (org.codehaus.groovy:groovy-all:jar:2.3.2:compile - omitted for duplicate)
-|  +- (org.projectreactor:reactor-core:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-+- org.projectreactor:reactor-logback:jar:1.1.2.RELEASE:compile
-|  +- (ch.qos.logback:logback-classic:jar:1.1.2:compile - omitted for duplicate)
-|  +- commons-cli:commons-cli:jar:1.2:compile
-|  +- net.openhft:chronicle:jar:2.0.3:compile
-|  |  +- net.openhft:lang:jar:6.1.4:compile
-|  |  |  \- (org.kohsuke.jetbrains:annotations:jar:9.0:compile - omitted for duplicate)
-|  |  \- org.kohsuke.jetbrains:annotations:jar:9.0:compile
-|  +- (org.projectreactor:reactor-core:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-+- org.projectreactor:reactor-net:jar:1.1.2.RELEASE:compile
-|  +- io.netty:netty-all:jar:4.0.19.Final:compile
-|  +- (org.projectreactor:reactor-core:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-+- org.projectreactor.spring:reactor-spring-core:jar:1.1.2.RELEASE:compile
-|  +- (org.projectreactor:reactor-core:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-|  +- (org.springframework:spring-beans:jar:4.0.3.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework:spring-context:jar:4.0.3.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework:spring-core:jar:4.0.3.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  \- (org.springframework:spring-expression:jar:4.0.3.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.projectreactor.spring:reactor-spring-context:jar:1.1.2.RELEASE:compile
-|  +- com.jayway.jsonpath:json-path:jar:0.9.0:compile
-|  |  +- net.minidev:json-smart:jar:1.2:compile
-|  |  \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.6)
-|  +- (org.projectreactor.spring:reactor-spring-core:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-|  \- (org.springframework:spring-context-support:jar:4.0.3.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.projectreactor.spring:reactor-spring-messaging:jar:1.1.2.RELEASE:compile
-|  +- (org.projectreactor.spring:reactor-spring-context:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  +- (org.projectreactor:reactor-net:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-|  \- (org.springframework:spring-messaging:jar:4.0.3.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.projectreactor.spring:reactor-spring-webmvc:jar:1.1.2.RELEASE:compile
-|  +- (org.projectreactor.spring:reactor-spring-context:jar:1.1.2.RELEASE:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-|  \- (org.springframework:spring-webmvc:jar:4.0.3.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.mockito:mockito-core:jar:1.9.5:compile
-|  +- (org.hamcrest:hamcrest-core:jar:1.1:compile - omitted for conflict with 1.3)
-|  \- org.objenesis:objenesis:jar:1.0:compile
-+- org.slf4j:jcl-over-slf4j:jar:1.7.7:compile
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-+- org.slf4j:log4j-over-slf4j:jar:1.7.7:compile
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for conflict with 1.7.6)
-+- org.slf4j:slf4j-api:jar:1.7.7:compile
-+- org.slf4j:jul-to-slf4j:jar:1.7.7:compile
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-+- org.slf4j:slf4j-jdk14:jar:1.7.7:compile
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-+- org.slf4j:slf4j-log4j12:jar:1.7.7:compile
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (log4j:log4j:jar:1.2.17:compile - omitted for duplicate)
-+- org.apache.solr:solr-solrj:jar:4.7.2:compile
-|  +- commons-io:commons-io:jar:2.1:compile
-|  +- (log4j:log4j:jar:1.2.16:compile - omitted for conflict with 1.2.17)
-|  +- (org.apache.httpcomponents:httpclient:jar:4.3.1:compile - omitted for conflict with 4.3.3)
-|  +- (org.apache.httpcomponents:httpcore:jar:4.3:compile - omitted for conflict with 4.3.2)
-|  +- (org.apache.httpcomponents:httpmime:jar:4.3.1:compile - omitted for conflict with 4.3.3)
-|  +- org.apache.zookeeper:zookeeper:jar:3.4.5:compile
-|  +- org.codehaus.woodstox:wstx-asl:jar:3.2.7:compile
-|  +- org.noggit:noggit:jar:0.5:compile
-|  \- (org.slf4j:slf4j-api:jar:1.6.6:compile - omitted for conflict with 1.7.7)
-+- org.spockframework:spock-core:jar:0.7-groovy-2.0:compile
-|  +- junit:junit-dep:jar:4.10:compile
-|  |  \- (org.hamcrest:hamcrest-core:jar:1.1:compile - omitted for conflict with 1.3)
-|  \- (org.hamcrest:hamcrest-core:jar:1.3:compile - omitted for duplicate)
-+- org.springframework:spring-core:jar:4.0.5.RELEASE:compile
-|  \- (commons-logging:commons-logging:jar:1.1.3:compile - omitted for duplicate)
-+- org.springframework:springloaded:jar:1.2.0.RELEASE:compile
-+- org.springframework.amqp:spring-amqp:jar:1.3.4.RELEASE:compile
-|  \- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.springframework.amqp:spring-erlang:jar:1.3.4.RELEASE:compile
-|  +- org.erlang.otp:jinterface:jar:1.5.6:compile
-|  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  \- (commons-io:commons-io:jar:2.4:compile - omitted for conflict with 2.1)
-+- org.springframework.amqp:spring-rabbit:jar:1.3.4.RELEASE:compile
-|  +- (org.springframework:spring-tx:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- org.springframework.retry:spring-retry:jar:1.1.0.RELEASE:compile
-|  |  \- (org.springframework:spring-context:jar:4.0.3.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework.amqp:spring-amqp:jar:1.3.4.RELEASE:compile - omitted for duplicate)
-|  \- com.rabbitmq:amqp-client:jar:3.3.1:compile
-+- org.springframework.batch:spring-batch-core:jar:3.0.0.RELEASE:compile
-|  +- com.ibm.jbatch:com.ibm.jbatch-tck-spi:jar:1.0:compile
-|  |  \- javax.batch:javax.batch-api:jar:1.0:compile
-|  +- com.thoughtworks.xstream:xstream:jar:1.4.7:compile
-|  |  +- xmlpull:xmlpull:jar:1.1.3.1:compile
-|  |  \- xpp3:xpp3_min:jar:1.1.4c:compile
-|  +- org.codehaus.jettison:jettison:jar:1.2:compile
-|  +- (org.springframework.batch:spring-batch-infrastructure:jar:3.0.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for conflict with 3.2.8.RELEASE)
-+- org.springframework.batch:spring-batch-infrastructure:jar:3.0.0.RELEASE:compile
-|  +- (org.springframework.retry:spring-retry:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework.batch:spring-batch-integration:jar:3.0.0.RELEASE:compile
-|  +- (org.springframework.batch:spring-batch-core:jar:3.0.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.1.RELEASE:compile - omitted for conflict with 4.0.2.RELEASE)
-|  +- (org.springframework.retry:spring-retry:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework:spring-messaging:jar:4.0.5.RELEASE:compile - omitted for conflict with 4.0.3.RELEASE)
-|  \- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for conflict with 3.2.8.RELEASE)
-+- org.springframework.batch:spring-batch-test:jar:3.0.0.RELEASE:compile
-|  +- (commons-collections:commons-collections:jar:3.2.1:compile - omitted for duplicate)
-|  +- (commons-io:commons-io:jar:2.4:compile - omitted for conflict with 2.1)
-|  +- (junit:junit:jar:4.10:compile - omitted for conflict with 4.11)
-|  +- org.hamcrest:hamcrest-all:jar:1.3:compile
-|  +- (org.springframework.batch:spring-batch-core:jar:3.0.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-jdbc:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-test:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework.hateoas:spring-hateoas:jar:0.12.0.RELEASE:compile
-|  +- (org.springframework:spring-aop:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.9.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.9.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-web:jar:3.2.9.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework:spring-webmvc:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.3.RELEASE)
-|  +- (org.objenesis:objenesis:jar:2.1:compile - omitted for conflict with 1.0)
-|  \- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-http:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-webmvc:jar:4.0.5.RELEASE:compile - omitted for conflict with 4.0.3.RELEASE)
-|  +- net.java.dev.rome:rome-fetcher:jar:1.0.0:compile
-|  |  +- jdom:jdom:jar:1.0:compile
-|  |  +- xerces:xercesImpl:jar:2.4.0:compile
-|  |  +- (net.java.dev.rome:rome:jar:1.0.0:compile - omitted for duplicate)
-|  |  +- commons-httpclient:commons-httpclient:jar:3.0.1:compile
-|  |  |  +- (commons-logging:commons-logging:jar:1.0.3:compile - omitted for conflict with 1.1.3)
-|  |  |  \- (commons-codec:commons-codec:jar:1.2:compile - omitted for conflict with 1.6)
-|  |  +- (commons-logging:commons-logging:jar:1.0.4:compile - omitted for conflict with 1.1.3)
-|  |  \- commons-logging:commons-logging-api:jar:1.0.4:compile
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE)
-+- org.springframework.mobile:spring-mobile-device:jar:1.1.2.RELEASE:compile
-|  +- (org.springframework:spring-webmvc:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.3.RELEASE)
-|  \- (org.springframework:spring-web:jar:3.2.9.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-+- org.springframework.security:spring-security-jwt:jar:1.0.2.RELEASE:compile
-|  +- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.13:compile
-|  |  \- (org.codehaus.jackson:jackson-core-asl:jar:1.9.13:compile - omitted for conflict with 1.9.12)
-|  \- (org.bouncycastle:bcpkix-jdk15on:jar:1.47:compile - omitted for conflict with 1.49)
-+- org.springframework.social:spring-social-config:jar:1.1.0.RELEASE:compile
-|  +- (org.springframework.social:spring-social-web:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.social:spring-social-core:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-+- org.springframework.social:spring-social-core:jar:1.1.0.RELEASE:compile
-|  \- (org.springframework:spring-web:jar:4.0.3.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-+- org.springframework.social:spring-social-security:jar:1.1.0.RELEASE:compile
-|  +- (org.springframework.social:spring-social-web:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-web:jar:3.2.3.RELEASE:compile - omitted for conflict with 3.2.4.RELEASE)
-|  +- (org.springframework.social:spring-social-core:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-web:jar:4.0.3.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  \- (org.springframework:spring-webmvc:jar:4.0.3.RELEASE:compile - omitted for duplicate)
-+- org.springframework.social:spring-social-web:jar:1.1.0.RELEASE:compile
-|  +- (javax.inject:javax.inject:jar:1:compile - omitted for duplicate)
-|  +- (org.springframework.social:spring-social-core:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-web:jar:4.0.3.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  \- (org.springframework:spring-webmvc:jar:4.0.3.RELEASE:compile - omitted for duplicate)
-+- org.springframework.social:spring-social-facebook:jar:1.1.1.RELEASE:compile
-|  +- (com.fasterxml.jackson.core:jackson-annotations:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  +- (org.springframework.social:spring-social-config:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  +- (com.fasterxml.jackson.core:jackson-core:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  +- (com.fasterxml.jackson.core:jackson-databind:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  \- (org.springframework.social:spring-social-core:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-+- org.springframework.social:spring-social-facebook-web:jar:1.1.1.RELEASE:compile
-|  +- (org.springframework:spring-web:jar:4.0.3.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  +- (org.springframework.social:spring-social-facebook:jar:1.1.1.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-webmvc:jar:4.0.3.RELEASE:compile - omitted for duplicate)
-+- org.springframework.social:spring-social-twitter:jar:1.1.0.RELEASE:compile
-|  +- (com.fasterxml.jackson.core:jackson-annotations:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  +- (org.springframework.security:spring-security-crypto:jar:3.2.3.RELEASE:compile - omitted for conflict with 3.2.4.RELEASE)
-|  +- (org.springframework.social:spring-social-config:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  +- (com.fasterxml.jackson.core:jackson-core:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  +- (com.fasterxml.jackson.core:jackson-databind:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  \- (org.springframework.social:spring-social-core:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-+- org.springframework.social:spring-social-linkedin:jar:1.0.1.RELEASE:compile
-|  +- (com.fasterxml.jackson.core:jackson-annotations:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  +- (com.fasterxml.jackson.core:jackson-core:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  +- (com.fasterxml.jackson.core:jackson-databind:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  +- (org.springframework.social:spring-social-core:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.social:spring-social-config:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-+- org.thymeleaf:thymeleaf:jar:2.1.3.RELEASE:compile
-|  +- ognl:ognl:jar:3.0.6:compile
-|  +- (org.javassist:javassist:jar:3.16.1-GA:compile - omitted for conflict with 3.18.1-GA)
-|  +- org.unbescape:unbescape:jar:1.0:compile
-|  \- (org.slf4j:slf4j-api:jar:1.6.1:compile - omitted for conflict with 1.7.7)
-+- org.thymeleaf.extras:thymeleaf-extras-springsecurity3:jar:2.1.1.RELEASE:compile
-|  +- (org.thymeleaf:thymeleaf:jar:2.1.2.RELEASE:compile - omitted for conflict with 2.1.3.RELEASE)
-|  \- (org.slf4j:slf4j-api:jar:1.6.1:compile - omitted for conflict with 1.7.7)
-+- org.thymeleaf:thymeleaf-spring4:jar:2.1.3.RELEASE:compile
-|  +- (org.thymeleaf:thymeleaf:jar:2.1.3.RELEASE:compile - omitted for duplicate)
-|  \- (org.slf4j:slf4j-api:jar:1.6.1:compile - omitted for conflict with 1.7.7)
-+- org.yaml:snakeyaml:jar:1.13:compile
-+- redis.clients:jedis:jar:2.4.1:compile
-|  \- (org.apache.commons:commons-pool2:jar:2.0:compile - omitted for conflict with 2.2)
-+- org.springframework:spring-aop:jar:4.0.5.RELEASE:compile
-|  +- aopalliance:aopalliance:jar:1.0:compile
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for conflict with 3.1.1.RELEASE)
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-aspects:jar:4.0.5.RELEASE:compile
-|  \- (org.aspectj:aspectjweaver:jar:1.7.4:compile - omitted for conflict with 1.8.0)
-+- org.springframework:spring-beans:jar:4.0.5.RELEASE:compile
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-context:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-expression:jar:4.0.5.RELEASE:compile - omitted for conflict with 4.0.3.RELEASE)
-+- org.springframework:spring-context-support:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-expression:jar:4.0.5.RELEASE:compile
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-instrument:jar:4.0.5.RELEASE:compile
-+- org.springframework:spring-instrument-tomcat:jar:4.0.5.RELEASE:compile
-+- org.springframework:spring-jdbc:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for conflict with 3.2.8.RELEASE)
-+- org.springframework:spring-jms:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for conflict with 3.2.8.RELEASE)
-+- org.springframework:spring-messaging:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-orm:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-jdbc:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for conflict with 3.2.8.RELEASE)
-+- org.springframework:spring-oxm:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-test:jar:4.0.5.RELEASE:compile
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-tx:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-web:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-webmvc:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-expression:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-web:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-webmvc-portlet:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-beans:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-web:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-webmvc:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework:spring-websocket:jar:4.0.5.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-core:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-web:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework.data:spring-data-cassandra:jar:1.0.0.RELEASE:compile
-|  +- org.springframework.data:spring-cql:jar:1.0.0.RELEASE:compile
-|  |  +- (org.springframework:spring-context:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  |  +- (org.springframework:spring-beans:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  |  +- (org.springframework:spring-core:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  |  +- (org.springframework:spring-expression:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  |  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  |  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  |  +- (com.datastax.cassandra:cassandra-driver-dse:jar:2.0.2:compile - omitted for duplicate)
-|  |  +- org.apache.cassandra:cassandra-all:jar:2.0.6:compile
-|  |  |  +- org.xerial.snappy:snappy-java:jar:1.0.5:compile
-|  |  |  +- net.jpountz.lz4:lz4:jar:1.2.0:compile
-|  |  |  +- com.ning:compress-lzf:jar:0.8.4:compile
-|  |  |  +- (commons-cli:commons-cli:jar:1.1:compile - omitted for conflict with 1.2)
-|  |  |  +- (commons-codec:commons-codec:jar:1.2:compile - omitted for conflict with 1.6)
-|  |  |  +- (org.apache.commons:commons-lang3:jar:3.1:compile - omitted for duplicate)
-|  |  |  +- (com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:jar:1.3:compile - omitted for conflict with 1.3.1)
-|  |  |  +- org.antlr:antlr:jar:3.2:compile
-|  |  |  |  \- org.antlr:antlr-runtime:jar:3.2:compile
-|  |  |  |     \- org.antlr:stringtemplate:jar:3.2:compile
-|  |  |  |        \- (antlr:antlr:jar:2.7.7:compile - omitted for duplicate)
-|  |  |  +- (org.slf4j:slf4j-api:jar:1.7.2:compile - omitted for conflict with 1.7.7)
-|  |  |  +- (org.codehaus.jackson:jackson-core-asl:jar:1.9.2:compile - omitted for conflict with 1.9.13)
-|  |  |  +- (org.codehaus.jackson:jackson-mapper-asl:jar:1.9.2:compile - omitted for conflict with 1.9.13)
-|  |  |  +- (jline:jline:jar:1.0:compile - omitted for conflict with 2.11)
-|  |  |  +- (com.googlecode.json-simple:json-simple:jar:1.1:compile - omitted for duplicate)
-|  |  |  +- com.github.stephenc.high-scale-lib:high-scale-lib:jar:1.1.2:compile
-|  |  |  +- (org.yaml:snakeyaml:jar:1.11:compile - omitted for conflict with 1.13)
-|  |  |  +- edu.stanford.ppl:snaptree:jar:0.1:compile
-|  |  |  +- org.mindrot:jbcrypt:jar:0.3m:compile
-|  |  |  +- com.yammer.metrics:metrics-core:jar:2.2.0:compile
-|  |  |  |  \- (org.slf4j:slf4j-api:jar:1.7.2:compile - omitted for conflict with 1.7.7)
-|  |  |  +- com.addthis.metrics:reporter-config:jar:2.1.0:compile
-|  |  |  |  +- (org.slf4j:slf4j-api:jar:1.7.2:compile - omitted for conflict with 1.7.7)
-|  |  |  |  +- (org.yaml:snakeyaml:jar:1.12:compile - omitted for conflict with 1.13)
-|  |  |  |  +- (org.hibernate:hibernate-validator:jar:4.3.0.Final:compile - omitted for conflict with 5.0.3.Final)
-|  |  |  |  \- (com.yammer.metrics:metrics-core:jar:2.2.0:compile - omitted for duplicate)
-|  |  |  +- com.thinkaurelius.thrift:thrift-server:jar:0.3.3:compile
-|  |  |  |  +- (com.lmax:disruptor:jar:3.0.1:compile - omitted for conflict with 3.2.1)
-|  |  |  |  +- (org.apache.thrift:libthrift:jar:0.9.1:compile - omitted for duplicate)
-|  |  |  |  +- (org.slf4j:slf4j-api:jar:1.6.1:compile - omitted for conflict with 1.7.7)
-|  |  |  |  \- (junit:junit:jar:4.8.1:compile - omitted for conflict with 4.11)
-|  |  |  +- net.sf.supercsv:super-csv:jar:2.1.0:compile
-|  |  |  +- (log4j:log4j:jar:1.2.16:compile - omitted for conflict with 1.2.17)
-|  |  |  +- org.apache.thrift:libthrift:jar:0.9.1:compile
-|  |  |  |  +- (org.slf4j:slf4j-api:jar:1.5.8:compile - omitted for conflict with 1.7.7)
-|  |  |  |  +- (org.apache.commons:commons-lang3:jar:3.1:compile - omitted for duplicate)
-|  |  |  |  +- (org.apache.httpcomponents:httpclient:jar:4.2.5:compile - omitted for conflict with 4.3.3)
-|  |  |  |  \- (org.apache.httpcomponents:httpcore:jar:4.2.4:compile - omitted for conflict with 4.3.2)
-|  |  |  +- org.apache.cassandra:cassandra-thrift:jar:2.0.6:compile
-|  |  |  |  +- (org.apache.commons:commons-lang3:jar:3.1:compile - omitted for duplicate)
-|  |  |  |  +- (org.slf4j:slf4j-api:jar:1.7.2:compile - omitted for conflict with 1.7.7)
-|  |  |  |  \- (org.apache.thrift:libthrift:jar:0.9.1:compile - omitted for duplicate)
-|  |  |  +- com.github.stephenc:jamm:jar:0.2.5:compile
-|  |  |  \- (io.netty:netty:jar:3.6.6.Final:compile - omitted for conflict with 3.5.5.Final)
-|  |  +- (com.google.guava:guava:jar:15.0:compile - omitted for conflict with 16.0.1)
-|  |  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  |  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-|  +- (org.springframework:spring-expression:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  +- com.datastax.cassandra:cassandra-driver-dse:jar:2.0.2:compile
-|  |  \- com.datastax.cassandra:cassandra-driver-core:jar:2.0.2:compile
-|  |     +- (io.netty:netty:jar:3.9.0.Final:compile - omitted for conflict with 3.6.6.Final)
-|  |     \- (com.codahale.metrics:metrics-core:jar:3.0.2:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-+- org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile
-|  +- (org.springframework:spring-core:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-+- org.springframework.data:spring-data-couchbase:jar:1.1.0.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-web:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  +- com.couchbase.client:couchbase-client:jar:1.4.1:compile
-|  |  +- io.netty:netty:jar:3.5.5.Final:compile
-|  |  +- (org.codehaus.jettison:jettison:jar:1.1:compile - omitted for conflict with 1.2)
-|  |  +- (commons-codec:commons-codec:jar:1.5:compile - omitted for conflict with 1.6)
-|  |  +- net.spy:spymemcached:jar:2.11.2:compile
-|  |  +- (org.apache.httpcomponents:httpcore:jar:4.3:compile - omitted for conflict with 4.3.2)
-|  |  \- (org.apache.httpcomponents:httpcore-nio:jar:4.3:compile - omitted for conflict with 4.3.2)
-|  +- (com.fasterxml.jackson.core:jackson-databind:jar:2.3.2:compile - omitted for conflict with 2.3.3)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-+- org.springframework.data:spring-data-elasticsearch:jar:1.0.0.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  +- (commons-lang:commons-lang:jar:2.6:compile - omitted for conflict with 2.4)
-|  +- (commons-collections:commons-collections:jar:3.2.1:compile - omitted for duplicate)
-|  +- (joda-time:joda-time:jar:2.3:compile - omitted for duplicate)
-|  +- org.elasticsearch:elasticsearch:jar:1.1.1:compile
-|  |  +- org.apache.lucene:lucene-core:jar:4.7.2:compile
-|  |  +- org.apache.lucene:lucene-analyzers-common:jar:4.7.2:compile
-|  |  |  \- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-codecs:jar:4.7.2:compile
-|  |  |  \- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-queries:jar:4.7.2:compile
-|  |  |  \- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-memory:jar:4.7.2:compile
-|  |  |  \- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-highlighter:jar:4.7.2:compile
-|  |  |  +- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  |  +- (org.apache.lucene:lucene-memory:jar:4.7.2:compile - omitted for duplicate)
-|  |  |  \- (org.apache.lucene:lucene-queries:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-queryparser:jar:4.7.2:compile
-|  |  |  +- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  |  +- (org.apache.lucene:lucene-queries:jar:4.7.2:compile - omitted for duplicate)
-|  |  |  \- (org.apache.lucene:lucene-sandbox:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-sandbox:jar:4.7.2:compile
-|  |  |  \- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-suggest:jar:4.7.2:compile
-|  |  |  +- (org.apache.lucene:lucene-analyzers-common:jar:4.7.2:compile - omitted for duplicate)
-|  |  |  +- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  |  +- (org.apache.lucene:lucene-misc:jar:4.7.2:compile - omitted for duplicate)
-|  |  |  \- (org.apache.lucene:lucene-queries:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-misc:jar:4.7.2:compile
-|  |  |  \- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-join:jar:4.7.2:compile
-|  |  |  +- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  |  \- (org.apache.lucene:lucene-grouping:jar:4.7.2:compile - omitted for duplicate)
-|  |  +- org.apache.lucene:lucene-grouping:jar:4.7.2:compile
-|  |  |  +- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |  |  \- (org.apache.lucene:lucene-queries:jar:4.7.2:compile - omitted for duplicate)
-|  |  \- org.apache.lucene:lucene-spatial:jar:4.7.2:compile
-|  |     +- (org.apache.lucene:lucene-core:jar:4.7.2:compile - omitted for duplicate)
-|  |     +- (org.apache.lucene:lucene-queries:jar:4.7.2:compile - omitted for duplicate)
-|  |     \- com.spatial4j:spatial4j:jar:0.4.1:compile
-|  +- (com.fasterxml.jackson.core:jackson-core:jar:2.3.3:compile - omitted for duplicate)
-|  +- (com.fasterxml.jackson.core:jackson-databind:jar:2.3.3:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-+- org.springframework.data:spring-data-gemfire:jar:1.4.0.RELEASE:compile
-|  +- (antlr:antlr:jar:2.7.7:compile - scope updated from runtime; omitted for duplicate)
-|  +- (org.slf4j:jcl-over-slf4j:jar:1.7.6:compile - omitted for conflict with 1.7.7)
-|  +- (org.aspectj:aspectjweaver:jar:1.7.4:compile - omitted for conflict with 1.8.0)
-|  +- (org.slf4j:slf4j-api:jar:1.7.6:compile - omitted for conflict with 1.7.7)
-|  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  +- (com.gemstone.gemfire:gemfire:jar:7.0.2:compile - omitted for duplicate)
-|  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.codehaus.jackson:jackson-mapper-asl:jar:1.9.12:compile - omitted for conflict with 1.9.13)
-|  +- (org.springframework:spring-aop:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context-support:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- org.codehaus.jackson:jackson-core-asl:jar:1.9.12:compile
-+- org.springframework.data:spring-data-jpa:jar:1.6.0.RELEASE:compile
-|  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-orm:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-aop:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.aspectj:aspectjrt:jar:1.8.0:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-+- org.springframework.data:spring-data-mongodb:jar:1.5.0.RELEASE:compile
-|  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-expression:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.mongodb:mongo-java-driver:jar:2.12.1:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-+- org.springframework.data:spring-data-neo4j:jar:3.1.0.RELEASE:compile
-|  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-aspects:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-expression:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.aspectj:aspectjrt:jar:1.8.0:compile - omitted for duplicate)
-|  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  +- org.neo4j:neo4j-cypher-dsl:jar:2.0.1:compile
-|  +- org.neo4j:neo4j:jar:2.0.3:compile
-|  |  +- org.neo4j:neo4j-kernel:jar:2.0.3:compile
-|  |  |  \- org.apache.geronimo.specs:geronimo-jta_1.1_spec:jar:1.1.1:compile
-|  |  +- org.neo4j:neo4j-lucene-index:jar:2.0.3:compile
-|  |  |  +- (org.neo4j:neo4j-kernel:jar:2.0.3:compile - omitted for duplicate)
-|  |  |  \- (org.apache.lucene:lucene-core:jar:3.6.2:compile - omitted for conflict with 4.7.2)
-|  |  +- org.neo4j:neo4j-graph-algo:jar:2.0.3:compile
-|  |  |  \- (org.neo4j:neo4j-kernel:jar:2.0.3:compile - omitted for duplicate)
-|  |  +- org.neo4j:neo4j-udc:jar:2.0.3:compile
-|  |  |  \- (org.neo4j:neo4j-kernel:jar:2.0.3:compile - omitted for duplicate)
-|  |  +- org.neo4j:neo4j-graph-matching:jar:2.0.3:compile
-|  |  |  \- (org.neo4j:neo4j-kernel:jar:2.0.3:compile - omitted for duplicate)
-|  |  +- (org.neo4j:neo4j-cypher:jar:2.0.3:compile - omitted for duplicate)
-|  |  \- org.neo4j:neo4j-jmx:jar:2.0.3:compile
-|  +- org.neo4j:neo4j-cypher:jar:2.0.3:compile
-|  |  +- (org.neo4j:neo4j-kernel:jar:2.0.3:compile - omitted for duplicate)
-|  |  +- (org.neo4j:neo4j-lucene-index:jar:2.0.3:compile - omitted for duplicate)
-|  |  +- (org.neo4j:neo4j-graph-matching:jar:2.0.3:compile - omitted for duplicate)
-|  |  +- (org.neo4j:neo4j-graph-algo:jar:2.0.3:compile - omitted for duplicate)
-|  |  +- org.neo4j:neo4j-cypher-commons:jar:2.0.3:compile
-|  |  |  +- (org.neo4j:neo4j-kernel:jar:2.0.3:compile - omitted for duplicate)
-|  |  |  +- (com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:jar:1.3.1:compile - omitted for conflict with 1.3)
-|  |  |  \- (org.scala-lang:scala-library:jar:2.10.3:compile - omitted for duplicate)
-|  |  +- org.neo4j:neo4j-cypher-compiler-1.9:jar:2.0.3:compile
-|  |  |  +- (org.neo4j:neo4j-kernel:jar:2.0.3:compile - omitted for duplicate)
-|  |  |  +- (org.neo4j:neo4j-lucene-index:jar:2.0.3:compile - omitted for duplicate)
-|  |  |  +- (org.neo4j:neo4j-graph-matching:jar:2.0.3:compile - omitted for duplicate)
-|  |  |  +- (org.neo4j:neo4j-graph-algo:jar:2.0.3:compile - omitted for duplicate)
-|  |  |  \- (org.scala-lang:scala-library:jar:2.10.3:compile - omitted for duplicate)
-|  |  +- org.neo4j:neo4j-cypher-compiler-2.0:jar:2.0.3:compile
-|  |  |  +- org.parboiled:parboiled-scala_2.10:jar:1.1.6:compile
-|  |  |  |  \- org.parboiled:parboiled-core:jar:1.1.6:compile
-|  |  |  +- net.sf.opencsv:opencsv:jar:2.0:compile
-|  |  |  \- (org.scala-lang:scala-library:jar:2.10.3:compile - omitted for duplicate)
-|  |  +- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:jar:1.3.1:compile
-|  |  \- org.scala-lang:scala-library:jar:2.10.3:compile
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-+- org.springframework.data:spring-data-redis:jar:1.3.0.RELEASE:compile
-|  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-aop:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context-support:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for conflict with 1.7.7)
-+- org.springframework.data:spring-data-rest-webmvc:jar:2.1.0.RELEASE:compile
-|  +- org.springframework.data:spring-data-rest-core:jar:2.1.0.RELEASE:compile
-|  |  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  |  +- (org.springframework.hateoas:spring-hateoas:jar:0.12.0.RELEASE:compile - omitted for duplicate)
-|  |  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  |  +- org.springframework.plugin:spring-plugin-core:jar:1.1.0.RELEASE:compile
-|  |  |  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  |  |  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  |  |  +- (org.springframework:spring-aop:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  |  |  \- (org.slf4j:slf4j-api:jar:1.7.6:compile - omitted for conflict with 1.7.7)
-|  |  +- org.atteo:evo-inflector:jar:1.1:compile
-|  |  +- (com.fasterxml.jackson.core:jackson-annotations:jar:2.3.3:compile - omitted for duplicate)
-|  |  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  |  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-|  +- (org.springframework:spring-webmvc:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (com.fasterxml.jackson.core:jackson-databind:jar:2.3.3:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-+- org.springframework.data:spring-data-solr:jar:1.2.0.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-tx:jar:3.2.9.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework.data:spring-data-commons:jar:1.8.0.RELEASE:compile - omitted for duplicate)
-|  +- org.apache.commons:commons-lang3:jar:3.1:compile
-|  +- (commons-collections:commons-collections:jar:3.2.1:compile - omitted for duplicate)
-|  +- (org.apache.httpcomponents:httpclient:jar:4.2.2:compile - omitted for conflict with 4.3.3)
-|  +- (org.apache.httpcomponents:httpmime:jar:4.2.2:compile - omitted for conflict with 4.3.3)
-|  +- org.apache.httpcomponents:httpclient-cache:jar:4.2.2:compile
-|  |  \- (org.apache.httpcomponents:httpclient:jar:4.2.2:compile - omitted for conflict with 4.3.3)
-|  +- (org.apache.solr:solr-solrj:jar:4.7.2:compile - omitted for duplicate)
-|  +- (org.slf4j:slf4j-api:jar:1.7.7:compile - omitted for duplicate)
-|  \- (org.slf4j:jcl-over-slf4j:jar:1.7.7:runtime - omitted for duplicate)
-+- org.springframework.integration:spring-integration-amqp:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework.amqp:spring-rabbit:jar:1.3.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE)
-+- org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework.retry:spring-retry:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-messaging:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-event:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-feed:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (net.java.dev.rome:rome-fetcher:jar:1.0.0:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  \- net.java.dev.rome:rome:jar:1.0.0:compile
-|     \- (jdom:jdom:jar:1.0:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-file:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  \- (commons-io:commons-io:jar:2.4:compile - omitted for conflict with 2.1)
-+- org.springframework.integration:spring-integration-ftp:jar:4.0.2.RELEASE:compile
-|  +- commons-net:commons-net:jar:3.3:compile
-|  +- (org.springframework:spring-context-support:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-file:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-gemfire:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.data:spring-data-gemfire:jar:1.4.0.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-groovy:jar:4.0.2.RELEASE:compile
-|  +- (org.codehaus.groovy:groovy-all:jar:2.3.1:compile - omitted for conflict with 2.3.2)
-|  +- (org.springframework:spring-context-support:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-scripting:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-ip:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-jdbc:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-jdbc:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- com.google.guava:guava:jar:16.0.1:compile
-|  +- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-jms:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-jms:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-jmx:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-jpa:jar:4.0.2.RELEASE:compile
-|  +- org.eclipse.persistence:javax.persistence:jar:2.0.0:compile
-|  +- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-orm:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-mail:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-context-support:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-mongodb:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.data:spring-data-mongodb:jar:1.5.0.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-mqtt:jar:4.0.2.RELEASE:compile
-|  +- org.eclipse.paho:mqtt-client:jar:0.4.0:compile
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-redis:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.data:spring-data-redis:jar:1.3.0.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-rmi:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-scripting:jar:4.0.2.RELEASE:compile
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-security:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework.security:spring-security-config:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-aop:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-tx:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-sftp:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework.integration:spring-integration-stream:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context-support:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-file:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  \- com.jcraft:jsch:jar:0.1.51:compile
-+- org.springframework.integration:spring-integration-stream:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-syslog:jar:4.0.2.RELEASE:compile
-|  \- (org.springframework.integration:spring-integration-ip:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-test:jar:4.0.2.RELEASE:compile
-|  +- (org.mockito:mockito-core:jar:1.9.5:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-test:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (junit:junit:jar:4.11:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  \- (org.hamcrest:hamcrest-all:jar:1.3:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-twitter:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework.social:spring-social-twitter:jar:1.1.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-web:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-ws:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-webmvc:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-oxm:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- org.springframework.ws:spring-ws-core:jar:2.2.0.RELEASE:compile
-|  |  +- (commons-logging:commons-logging:jar:1.1.3:compile - omitted for duplicate)
-|  |  \- (org.springframework.ws:spring-xml:jar:2.2.0.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-expression:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  \- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-xml:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-oxm:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-context:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  \- org.springframework.ws:spring-xml:jar:2.2.0.RELEASE:compile
-|     \- (commons-logging:commons-logging:jar:1.1.3:compile - omitted for duplicate)
-+- org.springframework.integration:spring-integration-xmpp:jar:4.0.2.RELEASE:compile
-|  +- (org.springframework:spring-context-support:jar:4.0.5.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.integration:spring-integration-core:jar:4.0.2.RELEASE:compile - omitted for duplicate)
-|  +- org.igniterealtime.smack:smack:jar:3.2.1:compile
-|  \- org.igniterealtime.smack:smackx:jar:3.2.1:compile
-+- org.springframework.security:spring-security-acl:jar:3.2.4.RELEASE:compile
-|  +- (aopalliance:aopalliance:jar:1.0:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-aop:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-jdbc:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.springframework:spring-tx:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.springframework.security:spring-security-aspects:jar:3.2.4.RELEASE:compile
-|  +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.springframework.security:spring-security-cas:jar:3.2.4.RELEASE:compile
-|  +- org.jasig.cas.client:cas-client-core:jar:3.2.1:compile
-|  |  \- (commons-logging:commons-logging:jar:1.1:compile - omitted for conflict with 1.1.3)
-|  +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-web:jar:3.2.4.RELEASE:compile - omitted for conflict with 3.2.3.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.springframework:spring-web:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.springframework.security:spring-security-config:jar:3.2.4.RELEASE:compile
-|  +- (aopalliance:aopalliance:jar:1.0:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-aop:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile
-|  +- (aopalliance:aopalliance:jar:1.0:compile - omitted for duplicate)
-|  +- (org.springframework:spring-aop:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.springframework:spring-expression:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.springframework.security:spring-security-crypto:jar:3.2.4.RELEASE:compile
-|  \- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.springframework.security:spring-security-ldap:jar:3.2.4.RELEASE:compile
-|  +- org.springframework.ldap:spring-ldap-core:jar:1.3.2.RELEASE:compile
-|  |  \- (commons-lang:commons-lang:jar:2.4:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.springframework:spring-tx:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.springframework.security:spring-security-openid:jar:3.2.4.RELEASE:compile
-|  +- com.google.inject:guice:jar:2.0:compile
-|  |  \- (aopalliance:aopalliance:jar:1.0:compile - omitted for duplicate)
-|  +- org.openid4java:openid4java-nodeps:jar:0.9.6:compile
-|  |  +- (commons-logging:commons-logging:jar:1.1.1:compile - omitted for conflict with 1.1.3)
-|  |  \- net.jcip:jcip-annotations:jar:1.0:compile
-|  +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-web:jar:3.2.4.RELEASE:compile - omitted for conflict with 3.2.3.RELEASE)
-|  +- (org.springframework:spring-aop:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-web:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- net.sourceforge.nekohtml:nekohtml:jar:1.9.20:runtime
-|  |  \- (xerces:xercesImpl:jar:2.10.0:runtime - omitted for conflict with 2.4.0)
-|  \- (org.apache.httpcomponents:httpclient:jar:4.2.3:runtime - omitted for conflict with 4.3.3)
-+- org.springframework.security:spring-security-remoting:jar:3.2.4.RELEASE:compile
-|  +- (aopalliance:aopalliance:jar:1.0:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.springframework:spring-web:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-+- org.springframework.security:spring-security-taglibs:jar:3.2.4.RELEASE:compile
-|  +- (org.springframework.security:spring-security-acl:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-|  +- (org.springframework.security:spring-security-web:jar:3.2.4.RELEASE:compile - omitted for conflict with 3.2.3.RELEASE)
-|  +- (org.springframework:spring-aop:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  +- (org.springframework:spring-expression:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-|  \- (org.springframework:spring-web:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-\- org.springframework.security:spring-security-web:jar:3.2.4.RELEASE:compile
-   +- (aopalliance:aopalliance:jar:1.0:compile - omitted for duplicate)
-   +- (org.springframework.security:spring-security-core:jar:3.2.4.RELEASE:compile - omitted for duplicate)
-   +- (org.springframework:spring-beans:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-   +- (org.springframework:spring-context:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-   +- (org.springframework:spring-core:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-   +- (org.springframework:spring-expression:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
-   \- (org.springframework:spring-web:jar:3.2.8.RELEASE:compile - omitted for conflict with 4.0.5.RELEASE)
@@ -1,5 +0,0 @@
-org.sample:sample:pom:1.0.0.BUILD-SNAPSHOT
-+- org.sample:sample01:jar:1.0.0:compile
-+- org.sample:sample02:jar:1.0.0:compile
-|  +- (org.sample:sample01:jar:1.0.0:compile - omitted for duplicate)
-\- org.springframework.boot:spring-boot:jar:1.0.0.BUILD-SNAPSHOT:compile
@@ -2,8 +2,6 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
 	<modelVersion>4.0.0</modelVersion>
-	<groupId>org.sample</groupId>
-	<artifactId>sample</artifactId>
 	<version>1.0.0.BUILD-SNAPSHOT</version>
 	<properties>
 		<sample.version>1.0.0</sample.version>
@@ -47,17 +47,19 @@ public ApplyExcludeRules(Project project) {
 	@Override
 	public void execute(Configuration configuration) {
 		if (!VersionManagedDependencies.CONFIGURATION.equals(configuration.getName())) {
-			configuration.getIncoming().beforeResolve(new Action<ResolvableDependencies>() {
-				@Override
-				public void execute(ResolvableDependencies resolvableDependencies) {
-					resolvableDependencies.getDependencies().all(new Action<Dependency>() {
+			configuration.getIncoming().beforeResolve(
+					new Action<ResolvableDependencies>() {
 						@Override
-						public void execute(Dependency dependency) {
-							applyExcludeRules(dependency);
+						public void execute(ResolvableDependencies resolvableDependencies) {
+							resolvableDependencies.getDependencies().all(
+									new Action<Dependency>() {
+										@Override
+										public void execute(Dependency dependency) {
+											applyExcludeRules(dependency);
+										}
+									});
 						}
 					});
-				}
-			});
 		}
 	}
 
@@ -73,13 +75,10 @@ private void applyExcludeRules(ModuleDependency dependency) {
 		org.springframework.boot.dependency.tools.Dependency managedDependency = managedDependencies
 				.find(dependency.getGroup(), dependency.getName());
 		if (managedDependency != null) {
-			if (managedDependency.getExclusions().isEmpty()) {
-				logger.debug(""No exclusions rules applied for managed dependency ""
-						+ dependency);
-			}
 			for (Exclusion exclusion : managedDependency.getExclusions()) {
 				addExcludeRule(dependency, exclusion);
 			}
+			addImplicitExcludeRules(dependency);
 		}
 		else {
 			logger.debug(""No exclusions rules applied for non-managed dependency ""
@@ -94,4 +93,21 @@ private void addExcludeRule(ModuleDependency dependency, Exclusion exclusion) {
 		dependency.getExcludeRules().add(rule);
 	}
 
+	private void addImplicitExcludeRules(ModuleDependency dependency) {
+		if (isStarter(dependency)) {
+			logger.info(""Adding implicit managed exclusion rules to starter ""
+					+ dependency);
+			dependency.getExcludeRules().add(
+					new DefaultExcludeRule(""commons-logging"", ""commons-logging""));
+			dependency.getExcludeRules().add(
+					new DefaultExcludeRule(""commons-logging"", ""commons-logging-api""));
+		}
+	}
+
+	private boolean isStarter(ModuleDependency dependency) {
+		return (dependency.getGroup() != null
+				&& dependency.getGroup().equals(""org.springframework.boot"") && dependency
+				.getName().startsWith(""spring-boot-starter""));
+	}
+
 }
@@ -27,7 +27,6 @@
 		</resources>
 		<plugins>
 			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-help-plugin</artifactId>
 				<executions>
 					<execution>
@@ -42,49 +41,6 @@
 					</execution>
 				</executions>
 			</plugin>
-			<plugin>
-				<groupId>org.codehaus.gmavenplus</groupId>
-				<artifactId>gmavenplus-plugin</artifactId>
-				<executions>
-					<execution>
-						<goals>
-							<goal>execute</goal>
-						</goals>
-						<phase>generate-resources</phase>
-					</execution>
-				</executions>
-				<configuration>
-					<scripts>
-						<script>file:///${project.basedir}/src/main/groovy/generateDependencyTreePom.groovy</script>
-					</scripts>
-				</configuration>
-				<dependencies>
-					<dependency>
-						<groupId>org.codehaus.groovy</groupId>
-						<artifactId>groovy-all</artifactId>
-						<version>${groovy.version}</version>
-					</dependency>
-				</dependencies>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-invoker-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>generate-dependency-tree</id>
-						<phase>generate-resources</phase>
-						<goals>
-							<goal>run</goal>
-						</goals>
-						<configuration>
-							<cloneProjectsTo>${project.build.directory}/invoker</cloneProjectsTo>
-							<settingsFile>src/dependency-tree/settings.xml</settingsFile>
-							<streamLogs>true</streamLogs>
-							<pom>${basedir}/src/dependency-tree/pom.xml</pom>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
 			<plugin>
 				<groupId>org.codehaus.mojo</groupId>
 				<artifactId>xml-maven-plugin</artifactId>
@@ -131,149 +87,11 @@
 									<file>${project.build.directory}/effective-pom/spring-boot-versions.xml</file>
 									<type>effective-pom</type>
 								</artifact>
-								<artifact>
-									<file>${project.build.directory}/dependency-tree/dependency-tree.txt </file>
-									<type>dependency-tree</type>
-								</artifact>
 							</artifacts>
 						</configuration>
 					</execution>
 				</executions>
 			</plugin>
 		</plugins>
 	</build>
-	<dependencies>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-actuator</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-amqp</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-aop</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-batch</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-data-gemfire</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-data-jpa</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-data-mongodb</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-data-rest</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-data-solr</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-freemarker</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-groovy-templates</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-hornetq</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-integration</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-jdbc</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-jetty</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-log4j</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-logging</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-mobile</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-redis</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-remote-shell</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-security</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-social-facebook</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-social-linkedin</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-social-twitter</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-test</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-thymeleaf</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-tomcat</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-velocity</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-web</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-websocket</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-ws</artifactId>
-		</dependency>
-	</dependencies>
 </project>
@@ -1,40 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
-	<modelVersion>4.0.0</modelVersion>
-	<parent>
-		<groupId>org.springframework.boot</groupId>
-		<artifactId>spring-boot-versions</artifactId>
-		<version>@project.version@</version>
-		<relativePath>../../target/dependency-tree</relativePath>
-	</parent>
-	<artifactId>spring-boot-versions-dependency-tree</artifactId>
-	<packaging>pom</packaging>
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-dependency-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>write-dependencies-tree</id>
-						<phase>generate-resources</phase>
-						<goals>
-							<goal>tree</goal>
-						</goals>
-						<configuration>
-							<outputFile>@project.build.directory@/dependency-tree/dependency-tree.txt</outputFile>
-							<verbose>true</verbose>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-		</plugins>
-	</build>
-	<repositories>
-		<repository>
-			<id>spring-ext</id>
-			<url>http://repo.spring.io/ext-release-local/</url>
-		</repository>
-	</repositories>
-</project>
@@ -1,34 +0,0 @@
-// Generate a POM from the effective-pom that can be used to build a complete dependency tree
-
-import groovy.util.*
-import groovy.xml.*
-
-def effectivePom = new XmlSlurper().parse(
-	new File(project.build.directory, 'effective-pom/spring-boot-versions.xml'))
-
-effectivePom.dependencyManagement.dependencies.dependency.findAll{ it.groupId != ""org.springframework.boot"" }.each {
-	effectivePom.dependencies.appendNode( it )
-}
-
-// effectivePom.appendNode(effectivePom.dependencyManagement.dependencies)
-effectivePom.parent.replaceNode {}
-effectivePom.dependencyManagement.replaceNode {}
-effectivePom.build.replaceNode {}
-effectivePom.properties.replaceNode {}
-effectivePom.repositories.replaceNode {}
-effectivePom.pluginRepositories.replaceNode {}
-effectivePom.reporting.replaceNode {}
-
-out = new StreamingMarkupBuilder()
-String xmlResult = out.bind {
-	mkp.declareNamespace("""": ""http://maven.apache.org/POM/4.0.0"")
-	mkp.yield effectivePom
-}
-
-
-def outputDir = new File(project.build.directory, 'dependency-tree');
-outputDir.mkdirs();
-XmlUtil.serialize(xmlResult, new FileWriter(new File(outputDir, 'pom.xml')))
-
-
-
"
https://github.com/spring-projects/spring-boot/commit/c4f756daee43f89e0ba832ceac17bac216fc899b,"Fix MavenSettings’ handling of profiles activated by a file  <enter> Previously, MavenSettings used a FileProfileActivator with no PathTransformer. If a settings.xml file contains a file-activated profile this would result in an NPE within Maven. This was made worse by the NPE not being included in the resulting failure message which hampered diagnosis of the problem. <enter> This commit updates MavenSettings to configure its FileProfileActivator with a PathTransformer. It also improves the failure message that’s created from any problems that are reported by Maven while determining the active profiles to include a problem’s exception if it has one. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/c4f756daee43f89e0ba832ceac17bac216fc899b,"@@ -16,8 +16,11 @@
 
 package org.springframework.boot.cli.compiler.maven;
 
+import java.io.BufferedReader;
 import java.io.File;
+import java.io.IOException;
 import java.io.PrintWriter;
+import java.io.StringReader;
 import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -29,6 +32,7 @@
 import org.apache.maven.model.ActivationProperty;
 import org.apache.maven.model.building.ModelProblemCollector;
 import org.apache.maven.model.building.ModelProblemCollectorRequest;
+import org.apache.maven.model.path.DefaultPathTranslator;
 import org.apache.maven.model.profile.DefaultProfileSelector;
 import org.apache.maven.model.profile.ProfileActivationContext;
 import org.apache.maven.model.profile.activation.FileProfileActivator;
@@ -147,15 +151,47 @@ private String createFailureMessage(
 		PrintWriter printer = new PrintWriter(message);
 		printer.println(""Failed to determine active profiles:"");
 		for (ModelProblemCollectorRequest problem : problemCollector.getProblems()) {
-			printer.println(
-					""    "" + problem.getMessage() + "" at "" + problem.getLocation());
+			printer.println(""    "" + problem.getMessage() + (problem.getLocation() != null
+					? "" at "" + problem.getLocation() : """"));
+			if (problem.getException() != null) {
+				printer.println(indentStackTrace(problem.getException(), ""        ""));
+			}
 		}
 		return message.toString();
 	}
 
+	private String indentStackTrace(Exception ex, String indent) {
+		return indentLines(printStackTrace(ex), indent);
+	}
+
+	private String printStackTrace(Exception ex) {
+		StringWriter stackTrace = new StringWriter();
+		PrintWriter printer = new PrintWriter(stackTrace);
+		ex.printStackTrace(printer);
+		return stackTrace.toString();
+	}
+
+	private String indentLines(String input, String indent) {
+		StringWriter indented = new StringWriter();
+		PrintWriter writer = new PrintWriter(indented);
+		String line;
+		BufferedReader reader = new BufferedReader(new StringReader(input));
+		try {
+			while ((line = reader.readLine()) != null) {
+				writer.println(indent + line);
+			}
+		}
+		catch (IOException ex) {
+			return input;
+		}
+		return indented.toString();
+	}
+
 	private DefaultProfileSelector createProfileSelector() {
 		DefaultProfileSelector selector = new DefaultProfileSelector();
-		selector.addProfileActivator(new FileProfileActivator());
+
+		selector.addProfileActivator(new FileProfileActivator()
+				.setPathTranslator(new DefaultPathTranslator()));
 		selector.addProfileActivator(new JdkVersionProfileActivator());
 		selector.addProfileActivator(new PropertyProfileActivator());
 		selector.addProfileActivator(new OperatingSystemProfileActivator());
@@ -28,4 +28,21 @@
 		</proxy>
 	</proxies>
 
-</settings>
\ No newline at end of file
+	<profiles>
+		<profile>
+    		<id>test-profile</id>
+    		<activation>
+	        	<file>
+	            	<exists>${user.home}/.m2/some_file</exists>
+	        	</file>
+    		</activation>
+	    	<repositories>
+	        	<repository>
+	            	<id>example-repository</id>
+	            	<url>http://repo.example.com</url>
+	        	</repository>
+	    	</repositories>
+		</profile>
+	</profiles>
+
+</settings>
"
https://github.com/spring-projects/spring-boot/commit/32b32b714275d0efaa1f5afba10e88e09101f224,Notify the use of logback specific system property  <enter> Logback documentation explains how to initialize the logging system and namely how the `logback.configurationFile` system property can be used to specify the configuration file to use. <enter> Spring Boot has an abstraction on top of that. A user can define the `logging.path` property regardless of the logging infrastructure it is using. <enter> Users following the logback documentation can be confused at first so we're not logging a warning when we found out that the logback specific property has been specified. <enter>  Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/32b32b714275d0efaa1f5afba10e88e09101f224,"@@ -1019,6 +1019,9 @@ NOTE: The logging system is initialized early in the application lifecycle and a
 logging properties will not be found in property files loaded via `@PropertySource`
 annotations.
 
+TIP: Logging properties are independent of the actual logging infrastructure. As a
+result, specific configuration keys (such as `logback.configurationFile` for Logback)
+are not managed by spring Boot.
 
 
 [[boot-features-custom-log-levels]]
@@ -56,6 +56,8 @@
  */
 public class LogbackLoggingSystem extends Slf4JLoggingSystem {
 
+	private static final String CONFIGURATION_FILE_PROPERTY = ""logback.configurationFile"";
+
 	private static final Map<LogLevel, Level> LEVELS;
 
 	static {
@@ -102,6 +104,11 @@ public void initialize(LoggingInitializationContext initializationContext,
 			String configLocation, LogFile logFile) {
 		getLogger(null).getLoggerContext().getTurboFilterList().remove(FILTER);
 		super.initialize(initializationContext, configLocation, logFile);
+		if (StringUtils.hasText(System.getProperty(CONFIGURATION_FILE_PROPERTY))) {
+			getLogger(LogbackLoggingSystem.class.getName()).warn(
+					""Ignoring '""+CONFIGURATION_FILE_PROPERTY+""' system property. "" +
+							""Please use 'logging.path' instead."");
+		}
 	}
 
 	@Override
@@ -141,6 +141,21 @@ public void testNonDefaultConfigLocation() throws Exception {
 		assertFalse(new File(tmpDir() + ""/tmp.log"").exists());
 	}
 
+	@Test
+	public void testLogbackSpecificSystemProperty() throws Exception {
+		System.setProperty(""logback.configurationFile"", ""/foo/my-file.xml"");
+		try {
+			this.loggingSystem.beforeInitialize();
+			this.loggingSystem.initialize(this.initializationContext, null, null);
+			String output = this.output.toString().trim();
+			assertTrue(""Wrong output:\n"" + output, output.contains(""Ignoring "" +
+					""'logback.configurationFile' system property. Please use 'logging.path' instead.""));
+		}
+		finally {
+			System.clearProperty(""logback.configurationFile"");
+		}
+	}
+
 	@Test(expected = IllegalStateException.class)
 	public void testNonexistentConfigLocation() throws Exception {
 		this.loggingSystem.beforeInitialize();
"
https://github.com/spring-projects/spring-boot/commit/e5a253e68951dcf975b9844b3b39afac2222b503,"Improve diagnostics when OnBeanCondition type deduction fails  <enter> When @ConditionalOnBean or @ConditionalOnMissingBean are used on a  @bean  method, they will, in the absence of any other configuration, attempt to deduce the bean's type by examining the method's return type. This deduction can fail. See  <issue_link> ,  <issue_link> , and  <issue_link>  for some examples of possible failure causes. Previously, this failure was only logged as a debug message leaving the user with a misleading message suggesting that the @ConditionalOnBean or @ConditionalOnMissingBean annotation was not configured correctly. <enter> This commit improves the diagnostics by mention the possibility of type deduction in the exception message and including the exception that caused deduction to fail as the cause. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/e5a253e68951dcf975b9844b3b39afac2222b503,"@@ -267,18 +267,32 @@ private static class BeanSearchSpec {
 			collect(attributes, ""annotation"", this.annotations);
 			collect(attributes, ""ignored"", this.ignoredTypes);
 			collect(attributes, ""ignoredType"", this.ignoredTypes);
-			if (this.types.isEmpty() && this.names.isEmpty()) {
-				addDeducedBeanType(context, metadata, this.types);
-			}
 			this.strategy = (SearchStrategy) metadata
 					.getAnnotationAttributes(annotationType.getName()).get(""search"");
-			validate();
+			BeanTypeDeductionException deductionException = null;
+			try {
+				if (this.types.isEmpty() && this.names.isEmpty()) {
+					addDeducedBeanType(context, metadata, this.types);
+				}
+			}
+			catch (BeanTypeDeductionException ex) {
+				deductionException = ex;
+			}
+			validate(deductionException);
 		}
 
-		protected void validate() {
-			Assert.isTrue(hasAtLeastOne(this.types, this.names, this.annotations),
-					annotationName() + "" annotations must ""
-							+ ""specify at least one bean (type, name or annotation)"");
+		protected void validate(BeanTypeDeductionException ex) {
+			if (!hasAtLeastOne(this.types, this.names, this.annotations)) {
+				String message = annotationName()
+						+ "" did not specify a bean using type, name or annotation"";
+				if (ex == null) {
+					throw new IllegalStateException(message);
+				}
+				else {
+					throw new IllegalStateException(message + "" and the attempt to deduce""
+							+ "" the bean's type failed"", ex);
+				}
+			}
 		}
 
 		private boolean hasAtLeastOne(List<?>... lists) {
@@ -337,12 +351,9 @@ public void doWith(Method method)
 				});
 			}
 			catch (Throwable ex) {
-				// swallow exception and continue
-				if (logger.isDebugEnabled()) {
-					logger.debug(""Unable to deduce bean type for ""
-							+ methodMetadata.getDeclaringClassName() + "".""
-							+ methodMetadata.getMethodName(), ex);
-				}
+				throw new BeanTypeDeductionException(
+						methodMetadata.getDeclaringClassName(),
+						methodMetadata.getMethodName(), ex);
 			}
 		}
 
@@ -404,11 +415,20 @@ protected void collect(MultiValueMap<String, Object> attributes, String key,
 		}
 
 		@Override
-		protected void validate() {
+		protected void validate(BeanTypeDeductionException ex) {
 			Assert.isTrue(getTypes().size() == 1, annotationName() + "" annotations must ""
 					+ ""specify only one type (got "" + getTypes() + "")"");
+		}
+	}
+
+	static final class BeanTypeDeductionException extends RuntimeException {
 
+		private BeanTypeDeductionException(String className, String beanMethodName,
+				Throwable cause) {
+			super(""Failed to deduce bean type for "" + className + ""."" + beanMethodName,
+					cause);
 		}
+
 	}
 
 }
@@ -0,0 +1,100 @@
+/*
+ * Copyright 2012-2016 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.boot.autoconfigure.condition;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException;
+import org.springframework.boot.testutil.ClassPathExclusions;
+import org.springframework.boot.testutil.FilteredClassPathRunner;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
+import org.springframework.context.annotation.ImportSelector;
+import org.springframework.core.type.AnnotationMetadata;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
+/**
+ * Tests for {@link OnBeanCondition} when deduction of the bean's type fails
+ *
+ * @author Andy Wilkinson
+ */
+@RunWith(FilteredClassPathRunner.class)
+@ClassPathExclusions(""jackson-core-*.jar"")
+public class OnBeanConditionTypeDeductionFailureTests {
+
+	@Test
+	public void conditionalOnMissingBeanWithDeducedTypeThatIsPartiallyMissingFromClassPath() {
+		try {
+			new AnnotationConfigApplicationContext(ImportingConfiguration.class).close();
+			fail(""Context refresh was successful"");
+		}
+		catch (Exception ex) {
+			ex.printStackTrace();
+			Throwable beanTypeDeductionException = findBeanTypeDeductionException(ex);
+			assertThat(beanTypeDeductionException)
+					.hasMessage(""Failed to deduce bean type for ""
+							+ OnMissingBeanConfiguration.class.getName()
+							+ "".objectMapper"");
+			assertThat(beanTypeDeductionException)
+					.hasCauseInstanceOf(NoClassDefFoundError.class);
+		}
+	}
+
+	private Throwable findBeanTypeDeductionException(Throwable ex) {
+		Throwable candidate = ex;
+		while (candidate != null) {
+			if (candidate instanceof BeanTypeDeductionException) {
+				return candidate;
+			}
+			candidate = candidate.getCause();
+		}
+		return null;
+	}
+
+	@Configuration
+	@Import(OnMissingBeanImportSelector.class)
+	static class ImportingConfiguration {
+
+	}
+
+	@Configuration
+	static class OnMissingBeanConfiguration {
+
+		@Bean
+		@ConditionalOnMissingBean
+		public ObjectMapper objectMapper() {
+			return new ObjectMapper();
+		}
+
+	}
+
+	static class OnMissingBeanImportSelector implements ImportSelector {
+
+		@Override
+		public String[] selectImports(AnnotationMetadata importingClassMetadata) {
+			return new String[] { OnMissingBeanConfiguration.class.getName() };
+		}
+
+	}
+
+}
"
https://github.com/junit-team/junit4/commit/3189af007b26d74ca459f823d57ef77b9c1697b8,Remove redundant field fCause ,https://api.github.com/repos/junit-team/junit4/commits/3189af007b26d74ca459f823d57ef77b9c1697b8,"@@ -16,7 +16,6 @@ public class ArrayComparisonFailure extends AssertionError {
 
     private List<Integer> fIndices = new ArrayList<Integer>();
     private final String fMessage;
-    private final AssertionError fCause;
 
     /**
      * Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's
@@ -28,7 +27,7 @@ public class ArrayComparisonFailure extends AssertionError {
      */
     public ArrayComparisonFailure(String message, AssertionError cause, int index) {
         fMessage = message;
-        fCause = cause;
+        initCause(cause);
         addDimension(index);
     }
 
@@ -49,7 +48,7 @@ public String getMessage() {
             sb.append(""]"");
         }
         sb.append(""; "");
-        sb.append(fCause.getMessage());
+        sb.append(getCause().getMessage());
         return sb.toString();
     }
 
"
https://github.com/square/okhttp/commit/30ecba897fb624df201f0a014b54a604418a0e73,Use Request and Response types in OkResponseCache.  <enter> This breaks support for java.net.ResponseCache implementations. That's good. That API is akward and can't support important features like conditional GETs and hit tracking. ,https://api.github.com/repos/square/okhttp/commits/30ecba897fb624df201f0a014b54a604418a0e73,"@@ -16,6 +16,7 @@
 
 package com.squareup.okhttp.internal;
 
+import java.io.ByteArrayInputStream;
 import java.io.Closeable;
 import java.io.EOFException;
 import java.io.File;
@@ -44,9 +45,7 @@
 public final class Util {
   public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
   public static final String[] EMPTY_STRING_ARRAY = new String[0];
-
-  /** A cheap and type-safe constant for the ISO-8859-1 Charset. */
-  public static final Charset ISO_8859_1 = Charset.forName(""ISO-8859-1"");
+  public static final InputStream EMPTY_INPUT_STREAM = new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
 
   /** A cheap and type-safe constant for the US-ASCII Charset. */
   public static final Charset US_ASCII = Charset.forName(""US-ASCII"");
@@ -79,7 +79,7 @@ static class RealResponseBody extends Response.Body {
       return responseHeaders.getContentLength();
     }
 
-    @Override public InputStream byteStream() throws IOException {
+    @Override public InputStream byteStream() {
       return in;
     }
   }
@@ -21,7 +21,7 @@
  * <h3>Warning: Experimental OkHttp 2.0 API</h3>
  * This class is in beta. APIs are subject to change!
  */
-/* OkHttp 2.0: public */ class Failure {
+public final class Failure {
   private final Request request;
   private final Throwable exception;
 
@@ -20,9 +20,6 @@
 import com.squareup.okhttp.internal.DiskLruCache;
 import com.squareup.okhttp.internal.StrictLineReader;
 import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.http.HttpEngine;
-import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;
-import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
 import com.squareup.okhttp.internal.http.RawHeaders;
 import com.squareup.okhttp.internal.http.ResponseHeaders;
 import java.io.BufferedWriter;
@@ -37,12 +34,9 @@
 import java.io.Writer;
 import java.net.CacheRequest;
 import java.net.CacheResponse;
-import java.net.HttpURLConnection;
 import java.net.ResponseCache;
-import java.net.SecureCacheResponse;
 import java.net.URI;
 import java.net.URLConnection;
-import java.security.Principal;
 import java.security.cert.Certificate;
 import java.security.cert.CertificateEncodingException;
 import java.security.cert.CertificateException;
@@ -51,7 +45,6 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
-import javax.net.ssl.SSLPeerUnverifiedException;
 
 import static com.squareup.okhttp.internal.Util.US_ASCII;
 import static com.squareup.okhttp.internal.Util.UTF_8;
@@ -113,7 +106,7 @@
  *         connection.addRequestProperty(""Cache-Control"", ""max-stale="" + maxStale);
  * }</pre>
  */
-public final class HttpResponseCache extends ResponseCache {
+public final class HttpResponseCache extends ResponseCache implements OkResponseCache {
   // TODO: add APIs to iterate the cache?
   private static final int VERSION = 201105;
   private static final int ENTRY_METADATA = 0;
@@ -129,51 +122,25 @@ public final class HttpResponseCache extends ResponseCache {
   private int hitCount;
   private int requestCount;
 
-  /**
-   * Although this class only exposes the limited ResponseCache API, it
-   * implements the full OkResponseCache interface. This field is used as a
-   * package private handle to the complete implementation. It delegates to
-   * public and private members of this type.
-   */
-  final OkResponseCache okResponseCache = new OkResponseCache() {
-    @Override public CacheResponse get(URI uri, String requestMethod,
-        Map<String, List<String>> requestHeaders) throws IOException {
-      return HttpResponseCache.this.get(uri, requestMethod, requestHeaders);
-    }
-
-    @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {
-      return HttpResponseCache.this.put(uri, connection);
-    }
-
-    @Override public void maybeRemove(String requestMethod, URI uri) throws IOException {
-      HttpResponseCache.this.maybeRemove(requestMethod, uri);
-    }
-
-    @Override public void update(
-        CacheResponse conditionalCacheHit, HttpURLConnection connection) throws IOException {
-      HttpResponseCache.this.update(conditionalCacheHit, connection);
-    }
-
-    @Override public void trackConditionalCacheHit() {
-      HttpResponseCache.this.trackConditionalCacheHit();
-    }
-
-    @Override public void trackResponse(ResponseSource source) {
-      HttpResponseCache.this.trackResponse(source);
-    }
-  };
-
   public HttpResponseCache(File directory, long maxSize) throws IOException {
     cache = DiskLruCache.open(directory, VERSION, ENTRY_COUNT, maxSize);
   }
 
-  private String uriToKey(URI uri) {
-    return Util.hash(uri.toString());
+  @Override public CacheResponse get(URI uri, String s, Map<String, List<String>> stringListMap)
+      throws IOException {
+    throw new UnsupportedOperationException(""This is not a general purpose response cache."");
   }
 
-  @Override public CacheResponse get(URI uri, String requestMethod,
-      Map<String, List<String>> requestHeaders) {
-    String key = uriToKey(uri);
+  @Override public CacheRequest put(URI uri, URLConnection urlConnection) throws IOException {
+    throw new UnsupportedOperationException(""This is not a general purpose response cache."");
+  }
+
+  private static String urlToKey(Request requst) {
+    return Util.hash(requst.urlString());
+  }
+
+  @Override public Response get(Request request) {
+    String key = urlToKey(request);
     DiskLruCache.Snapshot snapshot;
     Entry entry;
     try {
@@ -187,25 +154,18 @@ private String uriToKey(URI uri) {
       return null;
     }
 
-    if (!entry.matches(uri, requestMethod, requestHeaders)) {
+    if (!entry.matches(request)) {
       snapshot.close();
       return null;
     }
 
-    return entry.isHttps()
-        ? new EntrySecureCacheResponse(entry, snapshot)
-        : new EntryCacheResponse(entry, snapshot);
+    return entry.response(request, snapshot);
   }
 
-  @Override public CacheRequest put(URI uri, URLConnection urlConnection) throws IOException {
-    if (!(urlConnection instanceof HttpURLConnection)) {
-      return null;
-    }
-
-    HttpURLConnection httpConnection = (HttpURLConnection) urlConnection;
-    String requestMethod = httpConnection.getRequestMethod();
+  @Override public CacheRequest put(Response response) throws IOException {
+    String requestMethod = response.request().method();
 
-    if (maybeRemove(requestMethod, uri)) {
+    if (maybeRemove(response.request())) {
       return null;
     }
     if (!requestMethod.equals(""GET"")) {
@@ -215,23 +175,15 @@ private String uriToKey(URI uri) {
       return null;
     }
 
-    HttpEngine httpEngine = getHttpEngine(httpConnection);
-    if (httpEngine == null) {
-      // Don't cache unless the HTTP implementation is ours.
+    ResponseHeaders responseHeaders = new ResponseHeaders(null, response.rawHeaders());
+    if (responseHeaders.hasVaryAll()) {
       return null;
     }
 
-    ResponseHeaders response = httpEngine.getResponseHeaders();
-    if (response.hasVaryAll()) {
-      return null;
-    }
-
-    RawHeaders varyHeaders =
-        httpEngine.getRequestHeaders().getHeaders().getAll(response.getVaryFields());
-    Entry entry = new Entry(uri, varyHeaders, httpConnection);
+    Entry entry = new Entry(response);
     DiskLruCache.Editor editor = null;
     try {
-      editor = cache.edit(uriToKey(uri));
+      editor = cache.edit(urlToKey(response.request()));
       if (editor == null) {
         return null;
       }
@@ -243,15 +195,11 @@ private String uriToKey(URI uri) {
     }
   }
 
-  /**
-   * Returns true if the supplied {@code requestMethod} potentially invalidates an entry in the
-   * cache.
-   */
-  private boolean maybeRemove(String requestMethod, URI uri) {
-    if (requestMethod.equals(""POST"") || requestMethod.equals(""PUT"") || requestMethod.equals(
-        ""DELETE"")) {
+  @Override public boolean maybeRemove(Request request) {
+    String method = request.method();
+    if (method.equals(""POST"") || method.equals(""PUT"") || method.equals(""DELETE"")) {
       try {
-        cache.remove(uriToKey(uri));
+        cache.remove(urlToKey(request));
       } catch (IOException ignored) {
         // The cache cannot be written.
       }
@@ -260,20 +208,12 @@ private boolean maybeRemove(String requestMethod, URI uri) {
     return false;
   }
 
-  private void update(CacheResponse conditionalCacheHit, HttpURLConnection httpConnection)
-      throws IOException {
-    HttpEngine httpEngine = getHttpEngine(httpConnection);
-    URI uri = httpEngine.getUri();
-    ResponseHeaders response = httpEngine.getResponseHeaders();
-    RawHeaders varyHeaders =
-        httpEngine.getRequestHeaders().getHeaders().getAll(response.getVaryFields());
-    Entry entry = new Entry(uri, varyHeaders, httpConnection);
-    DiskLruCache.Snapshot snapshot = (conditionalCacheHit instanceof EntryCacheResponse)
-        ? ((EntryCacheResponse) conditionalCacheHit).snapshot
-        : ((EntrySecureCacheResponse) conditionalCacheHit).snapshot;
+  @Override public void update(Response cached, Response network) {
+    Entry entry = new Entry(network);
+    DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;
     DiskLruCache.Editor editor = null;
     try {
-      editor = snapshot.edit(); // returns null if snapshot is not current
+      editor = snapshot.edit(); // Returns null if snapshot is not current.
       if (editor != null) {
         entry.writeTo(editor);
         editor.commit();
@@ -293,16 +233,6 @@ private void abortQuietly(DiskLruCache.Editor editor) {
     }
   }
 
-  private HttpEngine getHttpEngine(URLConnection httpConnection) {
-    if (httpConnection instanceof HttpURLConnectionImpl) {
-      return ((HttpURLConnectionImpl) httpConnection).getHttpEngine();
-    } else if (httpConnection instanceof HttpsURLConnectionImpl) {
-      return ((HttpsURLConnectionImpl) httpConnection).getHttpEngine();
-    } else {
-      return null;
-    }
-  }
-
   /**
    * Closes the cache and deletes all of its stored values. This will delete
    * all files in the cache directory including files that weren't created by
@@ -344,7 +274,7 @@ public boolean isClosed() {
     return cache.isClosed();
   }
 
-  private synchronized void trackResponse(ResponseSource source) {
+  @Override public synchronized void trackResponse(ResponseSource source) {
     requestCount++;
 
     switch (source) {
@@ -358,7 +288,7 @@ private synchronized void trackResponse(ResponseSource source) {
     }
   }
 
-  private synchronized void trackConditionalCacheHit() {
+  @Override public synchronized void trackConditionalCacheHit() {
     hitCount++;
   }
 
@@ -425,7 +355,7 @@ public CacheRequestImpl(final DiskLruCache.Editor editor) throws IOException {
   }
 
   private static final class Entry {
-    private final String uri;
+    private final String url;
     private final RawHeaders varyHeaders;
     private final String requestMethod;
     private final RawHeaders responseHeaders;
@@ -483,7 +413,7 @@ private static final class Entry {
     public Entry(InputStream in) throws IOException {
       try {
         StrictLineReader reader = new StrictLineReader(in, US_ASCII);
-        uri = reader.readLine();
+        url = reader.readLine();
         requestMethod = reader.readLine();
         varyHeaders = new RawHeaders();
         int varyRequestHeaderLineCount = reader.readInt();
@@ -515,26 +445,20 @@ public Entry(InputStream in) throws IOException {
       }
     }
 
-    public Entry(URI uri, RawHeaders varyHeaders, HttpURLConnection httpConnection)
-        throws IOException {
-      this.uri = uri.toString();
-      this.varyHeaders = varyHeaders;
-      this.requestMethod = httpConnection.getRequestMethod();
-      this.responseHeaders = RawHeaders.fromMultimap(httpConnection.getHeaderFields(), true);
-      this.handshake = getHttpEngine(httpConnection).getHandshake();
-    }
-
-    private HttpEngine getHttpEngine(HttpURLConnection httpConnection) {
-      return httpConnection instanceof HttpsURLConnectionImpl
-          ? ((HttpsURLConnectionImpl) httpConnection).getHttpEngine()
-          : ((HttpURLConnectionImpl) httpConnection).getHttpEngine();
+    public Entry(Response response) {
+      this.url = response.request().urlString();
+      this.varyHeaders = response.request().rawHeaders().getAll(
+          new ResponseHeaders(null, response.rawHeaders()).getVaryFields());
+      this.requestMethod = response.request().method();
+      this.responseHeaders = response.rawHeaders();
+      this.handshake = response.handshake();
     }
 
     public void writeTo(DiskLruCache.Editor editor) throws IOException {
       OutputStream out = editor.newOutputStream(ENTRY_METADATA);
       Writer writer = new BufferedWriter(new OutputStreamWriter(out, UTF_8));
 
-      writer.write(uri + '\n');
+      writer.write(url + '\n');
       writer.write(requestMethod + '\n');
       writer.write(Integer.toString(varyHeaders.length()) + '\n');
       for (int i = 0; i < varyHeaders.length(); i++) {
@@ -557,7 +481,7 @@ public void writeTo(DiskLruCache.Editor editor) throws IOException {
     }
 
     private boolean isHttps() {
-      return uri.startsWith(""https://"");
+      return url.startsWith(""https://"");
     }
 
     private List<Certificate> readCertificateList(StrictLineReader reader) throws IOException {
@@ -591,90 +515,62 @@ private void writeCertArray(Writer writer, List<Certificate> certificates) throw
       }
     }
 
-    public boolean matches(URI uri, String requestMethod,
-        Map<String, List<String>> requestHeaders) {
-      return this.uri.equals(uri.toString())
-          && this.requestMethod.equals(requestMethod)
-          && new ResponseHeaders(uri, responseHeaders).varyMatches(varyHeaders.toMultimap(false),
-          requestHeaders);
-    }
-  }
-
-  /**
-   * Returns an input stream that reads the body of a snapshot, closing the
-   * snapshot when the stream is closed.
-   */
-  private static InputStream newBodyInputStream(final DiskLruCache.Snapshot snapshot) {
-    return new FilterInputStream(snapshot.getInputStream(ENTRY_BODY)) {
-      @Override public void close() throws IOException {
-        snapshot.close();
-        super.close();
-      }
-    };
-  }
-
-  static class EntryCacheResponse extends CacheResponse {
-    private final Entry entry;
-    private final DiskLruCache.Snapshot snapshot;
-    private final InputStream in;
-
-    public EntryCacheResponse(Entry entry, DiskLruCache.Snapshot snapshot) {
-      this.entry = entry;
-      this.snapshot = snapshot;
-      this.in = newBodyInputStream(snapshot);
-    }
-
-    @Override public Map<String, List<String>> getHeaders() {
-      return entry.responseHeaders.toMultimap(true);
+    public boolean matches(Request request) {
+      return url.equals(request.urlString())
+          && requestMethod.equals(request.method())
+          && new ResponseHeaders(null, responseHeaders).varyMatches(varyHeaders, request);
     }
 
-    @Override public InputStream getBody() {
-      return in;
+    public Response response(Request request, DiskLruCache.Snapshot snapshot) {
+      String contentType = responseHeaders.get(""Content-Type"");
+      String contentLength = responseHeaders.get(""Content-Length"");
+      return new Response.Builder(request, responseHeaders.getResponseCode())
+          .rawHeaders(responseHeaders)
+          .body(new CacheResponseBody(snapshot, contentType, contentLength))
+          .handshake(handshake)
+          .build();
     }
   }
 
-  static class EntrySecureCacheResponse extends SecureCacheResponse {
-    private final Entry entry;
+  private static class CacheResponseBody extends Response.Body {
     private final DiskLruCache.Snapshot snapshot;
-    private final InputStream in;
+    private final InputStream bodyIn;
+    private final String contentType;
+    private final String contentLength;
 
-    public EntrySecureCacheResponse(Entry entry, DiskLruCache.Snapshot snapshot) {
-      this.entry = entry;
+    public CacheResponseBody(final DiskLruCache.Snapshot snapshot,
+        String contentType, String contentLength) {
       this.snapshot = snapshot;
-      this.in = newBodyInputStream(snapshot);
-    }
-
-    @Override public Map<String, List<String>> getHeaders() {
-      return entry.responseHeaders.toMultimap(true);
-    }
-
-    @Override public InputStream getBody() {
-      return in;
-    }
+      this.contentType = contentType;
+      this.contentLength = contentLength;
 
-    @Override public String getCipherSuite() {
-      return entry.handshake.cipherSuite();
+      // This input stream closes the snapshot when the stream is closed.
+      this.bodyIn = new FilterInputStream(snapshot.getInputStream(ENTRY_BODY)) {
+        @Override public void close() throws IOException {
+          snapshot.close();
+          super.close();
+        }
+      };
     }
 
-    @Override public List<Certificate> getServerCertificateChain()
-        throws SSLPeerUnverifiedException {
-      if (entry.handshake.peerCertificates().isEmpty()) throw new SSLPeerUnverifiedException(null);
-      return entry.handshake.peerCertificates();
+    @Override public boolean ready() throws IOException {
+      return true;
     }
 
-    @Override public Principal getPeerPrincipal() throws SSLPeerUnverifiedException {
-      if (entry.handshake.peerCertificates().isEmpty()) throw new SSLPeerUnverifiedException(null);
-      return entry.handshake.peerPrincipal();
+    @Override public MediaType contentType() {
+      return contentType != null ? MediaType.parse(contentType) : null;
     }
 
-    @Override public List<Certificate> getLocalCertificateChain() {
-      return !entry.handshake.localCertificates().isEmpty()
-          ? entry.handshake.localCertificates()
-          : null;
+    @Override public long contentLength() {
+      try {
+        return contentLength != null ? Long.parseLong(contentLength) : -1;
+      } catch (NumberFormatException e) {
+        return -1;
+      }
     }
 
-    @Override public Principal getLocalPrincipal() {
-      return entry.handshake.localPrincipal();
+    @Override public InputStream byteStream() {
+      return bodyIn;
     }
   }
 }
@@ -22,7 +22,6 @@
 import com.squareup.okhttp.internal.http.Policy;
 import com.squareup.okhttp.internal.http.RawHeaders;
 import java.io.IOException;
-import java.net.HttpURLConnection;
 import java.net.ProtocolException;
 import java.net.Proxy;
 import java.net.URL;
@@ -61,11 +60,7 @@ public Job(Dispatcher dispatcher, OkHttpClient client, Request request,
   }
 
   @Override public boolean getUseCaches() {
-    return false; // TODO.
-  }
-
-  @Override public HttpURLConnection getHttpConnectionToCache() {
-    return null;
+    return true;
   }
 
   @Override public URL getURL() {
@@ -19,7 +19,6 @@
 import com.squareup.okhttp.internal.http.HttpAuthenticator;
 import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;
 import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
-import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
 import com.squareup.okhttp.internal.tls.OkHostnameVerifier;
 import java.net.CookieHandler;
 import java.net.HttpURLConnection;
@@ -48,7 +47,7 @@ public final class OkHttpClient implements URLStreamHandlerFactory {
   private List<String> transports;
   private ProxySelector proxySelector;
   private CookieHandler cookieHandler;
-  private ResponseCache responseCache;
+  private OkResponseCache responseCache;
   private SSLSocketFactory sslSocketFactory;
   private HostnameVerifier hostnameVerifier;
   private OkAuthenticator authenticator;
@@ -169,24 +168,40 @@ public CookieHandler getCookieHandler() {
    *
    * <p>If unset, the {@link ResponseCache#getDefault() system-wide default}
    * response cache will be used.
+   *
+   * @deprecated OkHttp 2 dropped support for java.net.ResponseCache. That API
+   *     is broken for many reasons: URI instead of URL, no conditional updates,
+   *     no invalidation, and no mechanism for tracking hit rates. Use
+   *     {@link #setOkResponseCache} instead.
    */
+  @Deprecated
   public OkHttpClient setResponseCache(ResponseCache responseCache) {
-    this.responseCache = responseCache;
-    return this;
+    if (responseCache instanceof OkResponseCache) {
+      return setOkResponseCache((OkResponseCache) responseCache);
+    }
+    throw new UnsupportedOperationException(""OkHttp 2 dropped support for java.net.ResponseCache. ""
+        + ""Use setOkResponseCache() instead."");
   }
 
+  /**
+   * @deprecated OkHttp 2 dropped support for java.net.ResponseCache. That API
+   *     is broken for many reasons: URI instead of URL, no conditional updates,
+   *     no invalidation, and no mechanism for tracking hit rates. Use
+   *     {@link #setOkResponseCache} instead.
+   */
+  @Deprecated
   public ResponseCache getResponseCache() {
-    return responseCache;
+    throw new UnsupportedOperationException(""OkHttp 2 dropped support for java.net.ResponseCache. ""
+        + ""Use setOkResponseCache() instead."");
+  }
+
+  public OkHttpClient setOkResponseCache(OkResponseCache responseCache) {
+    this.responseCache = responseCache;
+    return this;
   }
 
   public OkResponseCache getOkResponseCache() {
-    if (responseCache instanceof HttpResponseCache) {
-      return ((HttpResponseCache) responseCache).okResponseCache;
-    } else if (responseCache != null) {
-      return new OkResponseCacheAdapter(responseCache);
-    } else {
-      return null;
-    }
+    return responseCache;
   }
 
   /**
@@ -319,19 +334,24 @@ public List<String> getTransports() {
 
   /**
    * Schedules {@code request} to be executed.
+   *
+   * <h3>Warning: Experimental OkHttp 2.0 API</h3>
+   * This method is in beta. APIs are subject to change!
    */
-  /* OkHttp 2.0: public */ void enqueue(Request request, Response.Receiver responseReceiver) {
-    // Create the HttpURLConnection immediately so the enqueued job gets the current settings of
-    // this client. Otherwise changes to this client (socket factory, redirect policy, etc.) may
-    // incorrectly be reflected in the request when it is dispatched later.
+  public void enqueue(Request request, Response.Receiver responseReceiver) {
+    // Copy this client. Otherwise changes (socket factory, redirect policy,
+    // etc.) may incorrectly be reflected in the request when it is dispatched.
     dispatcher.enqueue(copyWithDefaults(), request, responseReceiver);
   }
 
   /**
    * Cancels all scheduled tasks tagged with {@code tag}. Requests that are already
    * in flight might not be canceled.
+   *
+   * <h3>Warning: Experimental OkHttp 2.0 API</h3>
+   * This method is in beta. APIs are subject to change!
    */
-  /* OkHttp 2.0: public */ void cancel(Object tag) {
+  public void cancel(Object tag) {
     dispatcher.cancel(tag);
   }
 
@@ -358,7 +378,9 @@ private OkHttpClient copyWithDefaults() {
     result.proxy = proxy;
     result.proxySelector = proxySelector != null ? proxySelector : ProxySelector.getDefault();
     result.cookieHandler = cookieHandler != null ? cookieHandler : CookieHandler.getDefault();
-    result.responseCache = responseCache != null ? responseCache : ResponseCache.getDefault();
+    result.responseCache = responseCache != null
+        ? responseCache
+        : toOkResponseCacheOrNull(ResponseCache.getDefault());
     result.sslSocketFactory = sslSocketFactory != null
         ? sslSocketFactory
         : HttpsURLConnection.getDefaultSSLSocketFactory();
@@ -376,6 +398,10 @@ private OkHttpClient copyWithDefaults() {
     return result;
   }
 
+  private OkResponseCache toOkResponseCacheOrNull(ResponseCache cache) {
+    return cache instanceof OkResponseCache ? ((OkResponseCache) cache) : null;
+  }
+
   /**
    * Creates a URLStreamHandler as a {@link URL#setURLStreamHandlerFactory}.
    *
@@ -17,12 +17,6 @@
 
 import java.io.IOException;
 import java.net.CacheRequest;
-import java.net.CacheResponse;
-import java.net.HttpURLConnection;
-import java.net.URI;
-import java.net.URLConnection;
-import java.util.List;
-import java.util.Map;
 
 /**
  * An extended response cache API. Unlike {@link java.net.ResponseCache}, this
@@ -32,21 +26,25 @@
  * This class is in beta. APIs are subject to change!
  */
 public interface OkResponseCache {
-  CacheResponse get(URI uri, String requestMethod, Map<String, List<String>> requestHeaders)
-      throws IOException;
+  Response get(Request request) throws IOException;
 
-  CacheRequest put(URI uri, URLConnection urlConnection) throws IOException;
+  CacheRequest put(Response response) throws IOException;
 
-  /** Remove any cache entries for the supplied {@code uri} if the request method invalidates. */
-  void maybeRemove(String requestMethod, URI uri) throws IOException;
+  /**
+   * Remove any cache entries for the supplied {@code uri}. Returns true if the
+   * supplied {@code requestMethod} potentially invalidates an entry in the
+   * cache.
+   */
+  // TODO: this shouldn't return a boolean.
+  boolean maybeRemove(Request request) throws IOException;
 
   /**
    * Handles a conditional request hit by updating the stored cache response
-   * with the headers from {@code httpConnection}. The cached response body is
-   * not updated. If the stored response has changed since {@code
-   * conditionalCacheHit} was returned, this does nothing.
+   * with the headers from {@code network}. The cached response body is not
+   * updated. If the stored response has changed since {@code cached} was
+   * returned, this does nothing.
    */
-  void update(CacheResponse conditionalCacheHit, HttpURLConnection connection) throws IOException;
+  void update(Response cached, Response network) throws IOException;
 
   /** Track an conditional GET that was satisfied by this cache. */
   void trackConditionalCacheHit();
@@ -35,7 +35,7 @@
  * <h3>Warning: Experimental OkHttp 2.0 API</h3>
  * This class is in beta. APIs are subject to change!
  */
-/* OkHttp 2.0: public */ final class Request {
+public final class Request {
   private final URL url;
   private final String method;
   private final RawHeaders headers;
@@ -237,7 +237,8 @@ public Builder addHeader(String name, String value) {
       return this;
     }
 
-    Builder rawHeaders(RawHeaders rawHeaders) {
+    // TODO: this shouldn't be public.
+    public Builder rawHeaders(RawHeaders rawHeaders) {
       headers = new RawHeaders(rawHeaders);
       return this;
     }
@@ -18,6 +18,7 @@
 import com.squareup.okhttp.internal.Util;
 import com.squareup.okhttp.internal.http.RawHeaders;
 import java.io.ByteArrayOutputStream;
+import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -36,7 +37,7 @@
  * <h3>Warning: Experimental OkHttp 2.0 API</h3>
  * This class is in beta. APIs are subject to change!
  */
-/* OkHttp 2.0: public */ final class Response {
+public final class Response {
   private final Request request;
   private final int code;
   private final Handshake handshake;
@@ -106,7 +107,8 @@ public String headerName(int index) {
     return headers.getFieldName(index);
   }
 
-  RawHeaders rawHeaders() {
+  // TODO: this shouldn't be public.
+  public RawHeaders rawHeaders() {
     return new RawHeaders(headers);
   }
 
@@ -128,7 +130,7 @@ public Response redirectedBy() {
     return redirectedBy;
   }
 
-  public abstract static class Body {
+  public abstract static class Body implements Closeable {
     /** Multiple calls to {@link #charStream()} must return the same instance. */
     private Reader reader;
 
@@ -154,7 +156,7 @@ public abstract static class Body {
      */
     public abstract long contentLength();
 
-    public abstract InputStream byteStream() throws IOException;
+    public abstract InputStream byteStream();
 
     public final byte[] bytes() throws IOException {
       long contentLength = contentLength();
@@ -181,7 +183,7 @@ public final byte[] bytes() throws IOException {
      * of the Content-Type header. If that header is either absent or lacks a
      * charset, this will attempt to decode the response body as UTF-8.
      */
-    public final Reader charStream() throws IOException {
+    public final Reader charStream() {
       if (reader == null) {
         reader = new InputStreamReader(byteStream(), charset());
       }
@@ -201,6 +203,10 @@ private Charset charset() {
       MediaType contentType = contentType();
       return contentType != null ? contentType.charset(UTF_8) : UTF_8;
     }
+
+    @Override public void close() throws IOException {
+      byteStream().close();
+    }
   }
 
   public interface Receiver {
@@ -282,7 +288,8 @@ public Builder addHeader(String name, String value) {
       return this;
     }
 
-    Builder rawHeaders(RawHeaders rawHeaders) {
+    // TODO: this shouldn't be public.
+    public Builder rawHeaders(RawHeaders rawHeaders) {
       headers = new RawHeaders(rawHeaders);
       return this;
     }
@@ -46,7 +46,7 @@ abstract class AbstractHttpInputStream extends InputStream {
 
     OutputStream cacheBody = cacheRequest != null ? cacheRequest.getBody() : null;
 
-    // some apps return a null body; for compatibility we treat that like a null cache request
+    // Some apps return a null body; for compatibility we treat that like a null cache request.
     if (cacheBody == null) {
       cacheRequest = null;
     }
@@ -20,37 +20,33 @@
 import com.squareup.okhttp.Address;
 import com.squareup.okhttp.Connection;
 import com.squareup.okhttp.Handshake;
+import com.squareup.okhttp.MediaType;
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.OkResponseCache;
+import com.squareup.okhttp.Request;
+import com.squareup.okhttp.Response;
 import com.squareup.okhttp.ResponseSource;
 import com.squareup.okhttp.TunnelRequest;
 import com.squareup.okhttp.internal.Dns;
 import com.squareup.okhttp.internal.Platform;
 import com.squareup.okhttp.internal.Util;
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.CacheRequest;
-import java.net.CacheResponse;
 import java.net.CookieHandler;
-import java.net.HttpURLConnection;
 import java.net.Proxy;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.UnknownHostException;
-import java.util.Collections;
 import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import java.util.zip.GZIPInputStream;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 
-import static com.squareup.okhttp.internal.Util.EMPTY_BYTE_ARRAY;
+import static com.squareup.okhttp.internal.Util.EMPTY_INPUT_STREAM;
 import static com.squareup.okhttp.internal.Util.getDefaultPort;
 import static com.squareup.okhttp.internal.Util.getEffectivePort;
 
@@ -82,16 +78,21 @@
  * implementation type of its HttpEngine.
  */
 public class HttpEngine {
-  private static final CacheResponse GATEWAY_TIMEOUT_RESPONSE = new CacheResponse() {
-    @Override public Map<String, List<String>> getHeaders() throws IOException {
-      Map<String, List<String>> result = new HashMap<String, List<String>>();
-      result.put(null, Collections.singletonList(""HTTP/1.1 504 Gateway Timeout""));
-      return result;
+  private static final Response.Body EMPTY_BODY = new Response.Body() {
+    @Override public boolean ready() throws IOException {
+      return true;
+    }
+    @Override public MediaType contentType() {
+      return null;
+    }
+    @Override public long contentLength() {
+      return 0;
     }
-    @Override public InputStream getBody() throws IOException {
-      return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
+    @Override public InputStream byteStream() {
+      return EMPTY_INPUT_STREAM;
     }
   };
+
   public static final int HTTP_CONTINUE = 100;
 
   protected final Policy policy;
@@ -111,15 +112,9 @@ public class HttpEngine {
   private InputStream responseTransferIn;
   private InputStream responseBodyIn;
 
-  private CacheResponse cacheResponse;
-  private CacheRequest cacheRequest;
-
   /** The time when the request headers were written, or -1 if they haven't been written yet. */
   long sentRequestMillis = -1;
 
-  /** Whether the connection has been established. */
-  boolean connected;
-
   /**
    * True if this client added an ""Accept-Encoding: gzip"" header field and is
    * therefore responsible for also decompressing the transfer stream.
@@ -133,12 +128,16 @@ public class HttpEngine {
   /** Null until a response is received from the network or the cache. */
   ResponseHeaders responseHeaders;
 
-  // The cache response currently being validated on a conditional get. Null
-  // if the cached response doesn't exist or doesn't need validation. If the
-  // conditional get succeeds, these will be used for the response headers and
-  // body. If it fails, these be closed and set to null.
-  private ResponseHeaders cachedResponseHeaders;
-  private InputStream cachedResponseBody;
+  /**
+   * The cache response currently being validated on a conditional get. Null
+   * if the cached response doesn't exist or doesn't need validation. If the
+   * conditional get succeeds, these will be used for the response. If it fails,
+   * it will be set to null.
+   */
+  private Response validatingResponse;
+
+  /** The cache request currently being populated from a network response. */
+  private CacheRequest cacheRequest;
 
   /**
    * True if the socket connection should be released to the connection pool
@@ -173,11 +172,8 @@ public HttpEngine(OkHttpClient client, Policy policy, String method, RawHeaders
 
     this.requestHeaders = new RequestHeaders(uri, new RawHeaders(requestHeaders));
 
-    if (connection != null) {
-      connected = true;
-      if (connection.getSocket() instanceof SSLSocket) {
-        handshake = Handshake.get(((SSLSocket) connection.getSocket()).getSession());
-      }
+    if (connection != null && connection.getSocket() instanceof SSLSocket) {
+      handshake = Handshake.get(((SSLSocket) connection.getSocket()).getSession());
     }
   }
 
@@ -204,16 +200,21 @@ public final void sendRequest() throws IOException {
 
     // The raw response source may require the network, but the request
     // headers may forbid network use. In that case, dispose of the network
-    // response and use a GATEWAY_TIMEOUT response instead, as specified
+    // response and use a gateway timeout response instead, as specified
     // by http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4.
     if (requestHeaders.isOnlyIfCached() && responseSource.requiresConnection()) {
       if (responseSource == ResponseSource.CONDITIONAL_CACHE) {
-        Util.closeQuietly(cachedResponseBody);
+        Util.closeQuietly(validatingResponse.body());
       }
       this.responseSource = ResponseSource.CACHE;
-      this.cacheResponse = GATEWAY_TIMEOUT_RESPONSE;
-      RawHeaders rawResponseHeaders = RawHeaders.fromMultimap(cacheResponse.getHeaders(), true);
-      setResponse(new ResponseHeaders(uri, rawResponseHeaders), cacheResponse.getBody());
+
+      RawHeaders gatewayTimeoutHeaders = new RawHeaders();
+      gatewayTimeoutHeaders.setStatusLine(""HTTP/1.1 504 Gateway Timeout"");
+      this.validatingResponse = new Response.Builder(request(), 504)
+          .rawHeaders(gatewayTimeoutHeaders)
+          .body(EMPTY_BODY)
+          .build();
+      promoteValidatingResponse(new ResponseHeaders(uri, gatewayTimeoutHeaders));
     }
 
     if (responseSource.requiresConnection()) {
@@ -235,35 +236,52 @@ private void initResponseSource() throws IOException {
     OkResponseCache responseCache = client.getOkResponseCache();
     if (responseCache == null) return;
 
-    CacheResponse candidate = responseCache.get(
-        uri, method, requestHeaders.getHeaders().toMultimap(false));
+    Response candidate = responseCache.get(request());
     if (candidate == null) return;
 
-    Map<String, List<String>> responseHeadersMap = candidate.getHeaders();
-    cachedResponseBody = candidate.getBody();
-    if (!acceptCacheResponseType(candidate)
-        || responseHeadersMap == null
-        || cachedResponseBody == null) {
-      Util.closeQuietly(cachedResponseBody);
+    if (!acceptCacheResponseType(candidate)) {
+      Util.closeQuietly(candidate.body());
       return;
     }
 
-    RawHeaders rawResponseHeaders = RawHeaders.fromMultimap(responseHeadersMap, true);
-    cachedResponseHeaders = new ResponseHeaders(uri, rawResponseHeaders);
+    ResponseHeaders cachedResponseHeaders = new ResponseHeaders(uri, candidate.rawHeaders());
     long now = System.currentTimeMillis();
     this.responseSource = cachedResponseHeaders.chooseResponseSource(now, requestHeaders);
     if (responseSource == ResponseSource.CACHE) {
-      this.cacheResponse = candidate;
-      setResponse(cachedResponseHeaders, cachedResponseBody);
+      this.validatingResponse = candidate;
+      promoteValidatingResponse(cachedResponseHeaders);
     } else if (responseSource == ResponseSource.CONDITIONAL_CACHE) {
-      this.cacheResponse = candidate;
+      this.validatingResponse = candidate;
     } else if (responseSource == ResponseSource.NETWORK) {
-      Util.closeQuietly(cachedResponseBody);
+      Util.closeQuietly(candidate.body());
     } else {
       throw new AssertionError();
     }
   }
 
+  private Request request() {
+    // This doesn't have a body. When we're sending requests to the cache, we don't need it.
+    return new Request.Builder(policy.getURL())
+        .method(method, null)
+        .rawHeaders(requestHeaders.getHeaders())
+        .build();
+  }
+
+  private Response response() {
+    RawHeaders rawHeaders = responseHeaders.getHeaders();
+
+    // Use an unreadable response body when offering the response to the cache. The cache isn't
+    // allowed to consume the response body bytes!
+    Response.Body body = new UnreadableResponseBody(responseHeaders.getContentType(),
+        responseHeaders.getContentLength());
+
+    return new Response.Builder(request(), rawHeaders.getResponseCode())
+        .body(body)
+        .rawHeaders(rawHeaders)
+        .handshake(handshake)
+        .build();
+  }
+
   private void sendSocketRequest() throws IOException {
     if (connection == null) {
       connect();
@@ -322,12 +340,11 @@ protected final void connect() throws IOException {
    * Called after a socket connection has been created or retrieved from the
    * pool. Subclasses use this hook to get a reference to the TLS data.
    */
-  protected void connected(Connection connection) {
+  private void connected(Connection connection) {
     if (handshake == null && connection.getSocket() instanceof SSLSocket) {
       handshake = Handshake.get(((SSLSocket) connection.getSocket()).getSession());
     }
     policy.setSelectedProxy(connection.getRoute().getProxy());
-    connected = true;
   }
 
   /**
@@ -341,17 +358,13 @@ public void writingRequestHeaders() {
     sentRequestMillis = System.currentTimeMillis();
   }
 
-  /**
-   * @param body the response body, or null if it doesn't exist or isn't
-   * available.
-   */
-  private void setResponse(ResponseHeaders headers, InputStream body) throws IOException {
-    if (this.responseBodyIn != null) {
-      throw new IllegalStateException();
-    }
-    this.responseHeaders = headers;
-    if (body != null) {
-      initContentStream(body);
+  private void promoteValidatingResponse(ResponseHeaders responseHeaders) throws IOException {
+    if (this.responseBodyIn != null) throw new IllegalStateException();
+
+    this.responseHeaders = responseHeaders;
+    this.handshake = validatingResponse.handshake();
+    if (validatingResponse.body() != null) {
+      initContentStream(validatingResponse.body().byteStream());
     }
   }
 
@@ -396,20 +409,15 @@ public final InputStream getResponseBody() {
     return responseBodyIn;
   }
 
-  public final CacheResponse getCacheResponse() {
-    return cacheResponse;
-  }
-
   public final Connection getConnection() {
     return connection;
   }
 
   /**
-   * Returns true if {@code cacheResponse} is of the right type. This
-   * condition is necessary but not sufficient for the cached response to
-   * be used.
+   * Returns true if {@code response} is of the right type. This condition is
+   * necessary but not sufficient for the cached response to be used.
    */
-  protected boolean acceptCacheResponseType(CacheResponse cacheResponse) {
+  protected boolean acceptCacheResponseType(Response response) {
     return true;
   }
 
@@ -419,16 +427,14 @@ private void maybeCache() throws IOException {
     OkResponseCache responseCache = client.getOkResponseCache();
     if (responseCache == null) return;
 
-    HttpURLConnection connectionToCache = policy.getHttpConnectionToCache();
-
     // Should we cache this response for this request?
     if (!responseHeaders.isCacheable(requestHeaders)) {
-      responseCache.maybeRemove(connectionToCache.getRequestMethod(), uri);
+      responseCache.maybeRemove(request());
       return;
     }
 
     // Offer this request to the cache.
-    cacheRequest = responseCache.put(uri, connectionToCache);
+    cacheRequest = responseCache.put(response());
   }
 
   /**
@@ -452,7 +458,9 @@ public final void automaticallyReleaseConnectionToPool() {
    */
   public final void release(boolean streamCanceled) {
     // If the response body comes from the cache, close it.
-    if (responseBodyIn == cachedResponseBody) {
+    if (validatingResponse != null
+        && validatingResponse.body() != null
+        && responseBodyIn == validatingResponse.body().byteStream()) {
       Util.closeQuietly(responseBodyIn);
     }
 
@@ -477,9 +485,9 @@ private void initContentStream(InputStream transferStream) throws IOException {
       // so clients don't double decompress. http://b/3009828
       //
       // Also remove the Content-Length in this case because it contains the
-      // length 528 of the gzipped response. This isn't terribly useful and is
-      // dangerous because 529 clients can query the content length, but not
-      // the content encoding.
+      // length of the gzipped response. This isn't terribly useful and is
+      // dangerous because clients can query the content length, but not the
+      // content encoding.
       responseHeaders.stripContentEncoding();
       responseHeaders.stripContentLength();
       responseBodyIn = new GZIPInputStream(transferStream);
@@ -614,7 +622,6 @@ protected boolean includeAuthorityInRequestLine() {
    * no TLS connection was made.
    */
   public Handshake getHandshake() {
-    // TODO: initialize handshake when populating a response from the cache.
     return handshake;
   }
 
@@ -672,23 +679,26 @@ public final void readResponse() throws IOException {
     responseHeaders.setResponseSource(responseSource);
 
     if (responseSource == ResponseSource.CONDITIONAL_CACHE) {
-      if (cachedResponseHeaders.validate(responseHeaders)) {
+      ResponseHeaders validatingResponseHeaders = new ResponseHeaders(
+          uri, validatingResponse.rawHeaders());
+
+      if (validatingResponseHeaders.validate(responseHeaders)) {
         release(false);
-        ResponseHeaders combinedHeaders = cachedResponseHeaders.combine(responseHeaders);
-        this.responseHeaders = combinedHeaders;
+        responseHeaders = validatingResponseHeaders.combine(responseHeaders);
+        handshake = validatingResponse.handshake();
 
-        // Update the cache after applying the combined headers but before initializing the content
-        // stream, otherwise the Content-Encoding header (if present) will be stripped from the
-        // combined headers and not end up in the cache file if transparent gzip compression is
-        // turned on.
+        // Update the cache after combining headers but before stripping the
+        // Content-Encoding header (as performed by initContentStream()).
         OkResponseCache responseCache = client.getOkResponseCache();
         responseCache.trackConditionalCacheHit();
-        responseCache.update(cacheResponse, policy.getHttpConnectionToCache());
+        responseCache.update(validatingResponse, response());
 
-        initContentStream(cachedResponseBody);
+        if (validatingResponse.body() != null) {
+          initContentStream(validatingResponse.body().byteStream());
+        }
         return;
       } else {
-        Util.closeQuietly(cachedResponseBody);
+        Util.closeQuietly(validatingResponse.body());
       }
     }
 
@@ -709,4 +719,30 @@ public void receiveHeaders(RawHeaders headers) throws IOException {
       cookieHandler.put(uri, headers.toMultimap(true));
     }
   }
+
+  static class UnreadableResponseBody extends Response.Body {
+    private final String contentType;
+    private final long contentLength;
+
+    public UnreadableResponseBody(String contentType, long contentLength) {
+      this.contentType = contentType;
+      this.contentLength = contentLength;
+    }
+
+    @Override public boolean ready() throws IOException {
+      throw new IllegalStateException(""It is an error to read this response body at this time."");
+    }
+
+    @Override public MediaType contentType() {
+      return contentType != null ? MediaType.parse(contentType) : null;
+    }
+
+    @Override public long contentLength() {
+      return contentLength;
+    }
+
+    @Override public InputStream byteStream() {
+      throw new IllegalStateException(""It is an error to read this response body at this time."");
+    }
+  }
 }
@@ -266,10 +266,6 @@ private void initHttpEngine() throws IOException {
     }
   }
 
-  @Override public HttpURLConnection getHttpConnectionToCache() {
-    return this;
-  }
-
   private HttpEngine newHttpEngine(String method, RawHeaders requestHeaders,
       Connection connection, RetryableOutputStream requestBody) throws IOException {
     if (url.getProtocol().equals(""http"")) {
@@ -18,10 +18,9 @@
 
 import com.squareup.okhttp.Connection;
 import com.squareup.okhttp.OkHttpClient;
+import com.squareup.okhttp.Response;
 import com.squareup.okhttp.TunnelRequest;
 import java.io.IOException;
-import java.net.CacheResponse;
-import java.net.SecureCacheResponse;
 import java.net.URL;
 
 import static com.squareup.okhttp.internal.Util.getEffectivePort;
@@ -32,12 +31,8 @@ public HttpsEngine(OkHttpClient client, Policy policy, String method, RawHeaders
     super(client, policy, method, requestHeaders, connection, requestBody);
   }
 
-  @Override protected void connected(Connection connection) {
-    super.connected(connection);
-  }
-
-  @Override protected boolean acceptCacheResponseType(CacheResponse cacheResponse) {
-    return cacheResponse instanceof SecureCacheResponse;
+  @Override protected boolean acceptCacheResponseType(Response response) {
+    return response.handshake() != null;
   }
 
   @Override protected boolean includeAuthorityInRequestLine() {
@@ -21,9 +21,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.net.HttpURLConnection;
 import java.net.ProtocolException;
-import java.net.SecureCacheResponse;
 import java.net.URL;
 import java.security.Permission;
 import java.security.Principal;
@@ -37,67 +35,45 @@
 
 public final class HttpsURLConnectionImpl extends HttpsURLConnection {
 
-  /** HttpUrlConnectionDelegate allows reuse of HttpURLConnectionImpl. */
-  private final HttpUrlConnectionDelegate delegate;
+  /** Reuse HttpURLConnectionImpl. */
+  private final HttpURLConnectionImpl delegate;
 
   public HttpsURLConnectionImpl(URL url, OkHttpClient client) {
     super(url);
-    delegate = new HttpUrlConnectionDelegate(url, client);
+    delegate = new HttpURLConnectionImpl(url, client);
   }
 
   @Override public String getCipherSuite() {
-    SecureCacheResponse cacheResponse = delegate.getSecureCacheResponse();
-    if (cacheResponse != null) {
-      return cacheResponse.getCipherSuite();
-    }
     Handshake handshake = handshake();
     return handshake != null ? handshake.cipherSuite() : null;
   }
 
   @Override public Certificate[] getLocalCertificates() {
-    SecureCacheResponse cacheResponse = delegate.getSecureCacheResponse();
-    if (cacheResponse != null) {
-      List<Certificate> result = cacheResponse.getLocalCertificateChain();
-      return result != null ? result.toArray(new Certificate[result.size()]) : null;
-    }
     Handshake handshake = handshake();
     if (handshake == null) return null;
     List<Certificate> result = handshake.localCertificates();
     return !result.isEmpty() ? result.toArray(new Certificate[result.size()]) : null;
   }
 
   @Override public Certificate[] getServerCertificates() throws SSLPeerUnverifiedException {
-    SecureCacheResponse cacheResponse = delegate.getSecureCacheResponse();
-    if (cacheResponse != null) {
-      List<Certificate> result = cacheResponse.getServerCertificateChain();
-      return result != null ? result.toArray(new Certificate[result.size()]) : null;
-    }
     Handshake handshake = handshake();
     if (handshake == null) return null;
     List<Certificate> result = handshake.peerCertificates();
     return !result.isEmpty() ? result.toArray(new Certificate[result.size()]) : null;
   }
 
   @Override public Principal getPeerPrincipal() throws SSLPeerUnverifiedException {
-    SecureCacheResponse cacheResponse = delegate.getSecureCacheResponse();
-    if (cacheResponse != null) return cacheResponse.getPeerPrincipal();
     Handshake handshake = handshake();
     return handshake != null ? handshake.peerPrincipal() : null;
   }
 
   @Override public Principal getLocalPrincipal() {
-    SecureCacheResponse cacheResponse = delegate.getSecureCacheResponse();
-    if (cacheResponse != null) return cacheResponse.getLocalPrincipal();
     Handshake handshake = handshake();
     return handshake != null ? handshake.localPrincipal() : null;
   }
 
-  public HttpEngine getHttpEngine() {
-    return delegate.getHttpEngine();
-  }
-
   private Handshake handshake() {
-    if (delegate.httpEngine == null || !delegate.httpEngine.connected) {
+    if (delegate.httpEngine == null) {
       throw new IllegalStateException(""Connection has not yet been established"");
     }
     return delegate.httpEngine.getHandshake();
@@ -324,20 +300,4 @@ private Handshake handshake() {
   @Override public SSLSocketFactory getSSLSocketFactory() {
     return delegate.client.getSslSocketFactory();
   }
-
-  private final class HttpUrlConnectionDelegate extends HttpURLConnectionImpl {
-    private HttpUrlConnectionDelegate(URL url, OkHttpClient client) {
-      super(url, client);
-    }
-
-    @Override public HttpURLConnection getHttpConnectionToCache() {
-      return HttpsURLConnectionImpl.this;
-    }
-
-    public SecureCacheResponse getSecureCacheResponse() {
-      return httpEngine instanceof HttpsEngine
-          ? (SecureCacheResponse) httpEngine.getCacheResponse()
-          : null;
-    }
-  }
 }
@@ -1,57 +0,0 @@
-/*
- * Copyright (C) 2013 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.okhttp.internal.http;
-
-import com.squareup.okhttp.OkResponseCache;
-import com.squareup.okhttp.ResponseSource;
-import java.io.IOException;
-import java.net.CacheRequest;
-import java.net.CacheResponse;
-import java.net.HttpURLConnection;
-import java.net.ResponseCache;
-import java.net.URI;
-import java.net.URLConnection;
-import java.util.List;
-import java.util.Map;
-
-public final class OkResponseCacheAdapter implements OkResponseCache {
-  private final ResponseCache responseCache;
-  public OkResponseCacheAdapter(ResponseCache responseCache) {
-    this.responseCache = responseCache;
-  }
-
-  @Override public CacheResponse get(URI uri, String requestMethod,
-      Map<String, List<String>> requestHeaders) throws IOException {
-    return responseCache.get(uri, requestMethod, requestHeaders);
-  }
-
-  @Override public CacheRequest put(URI uri, URLConnection urlConnection) throws IOException {
-    return responseCache.put(uri, urlConnection);
-  }
-
-  @Override public void maybeRemove(String requestMethod, URI uri) throws IOException {
-  }
-
-  @Override public void update(CacheResponse conditionalCacheHit, HttpURLConnection connection)
-      throws IOException {
-  }
-
-  @Override public void trackConditionalCacheHit() {
-  }
-
-  @Override public void trackResponse(ResponseSource source) {
-  }
-}
@@ -15,17 +15,13 @@
  */
 package com.squareup.okhttp.internal.http;
 
-import java.net.HttpURLConnection;
 import java.net.Proxy;
 import java.net.URL;
 
 public interface Policy {
   /** Returns true if HTTP response caches should be used. */
   boolean getUseCaches();
 
-  /** Returns the HttpURLConnection instance to store in the cache. */
-  HttpURLConnection getHttpConnectionToCache();
-
   /** Returns the current destination URL, possibly a redirect. */
   URL getURL();
 
@@ -16,15 +16,14 @@
 
 package com.squareup.okhttp.internal.http;
 
+import com.squareup.okhttp.Request;
 import com.squareup.okhttp.ResponseSource;
 import com.squareup.okhttp.internal.Platform;
 import java.io.IOException;
 import java.net.HttpURLConnection;
 import java.net.URI;
 import java.util.Collections;
 import java.util.Date;
-import java.util.List;
-import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.concurrent.TimeUnit;
@@ -381,12 +380,9 @@ public boolean hasVaryAll() {
    * Returns true if none of the Vary headers on this response have changed
    * between {@code cachedRequest} and {@code newRequest}.
    */
-  public boolean varyMatches(Map<String, List<String>> cachedRequest,
-      Map<String, List<String>> newRequest) {
+  public boolean varyMatches(RawHeaders varyHeaders, Request newRequest) {
     for (String field : varyFields) {
-      if (!equal(cachedRequest.get(field), newRequest.get(field))) {
-        return false;
-      }
+      if (!equal(varyHeaders.values(field), newRequest.headers(field))) return false;
     }
     return true;
   }
@@ -20,11 +20,16 @@
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.MockWebServer;
 import com.squareup.okhttp.mockwebserver.RecordedRequest;
+import java.io.File;
+import java.net.HttpURLConnection;
+import java.util.UUID;
 import javax.net.ssl.SSLContext;
 import org.junit.After;
+import org.junit.Before;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
 public final class AsyncApiTest {
@@ -33,9 +38,17 @@ public final class AsyncApiTest {
   private RecordingReceiver receiver = new RecordingReceiver();
 
   private static final SSLContext sslContext = SslContextBuilder.localhost();
+  private HttpResponseCache cache;
+
+  @Before public void setUp() throws Exception {
+    String tmp = System.getProperty(""java.io.tmpdir"");
+    File cacheDir = new File(tmp, ""HttpCache-"" + UUID.randomUUID());
+    cache = new HttpResponseCache(cacheDir, Integer.MAX_VALUE);
+  }
 
   @After public void tearDown() throws Exception {
     server.shutdown();
+    cache.delete();
   }
 
   @Test public void get() throws Exception {
@@ -91,4 +104,22 @@ public final class AsyncApiTest {
     assertEquals(""3"", recordedRequest.getHeader(""Content-Length""));
     assertEquals(""text/plain; charset=utf-8"", recordedRequest.getHeader(""Content-Type""));
   }
+
+  @Test public void cache() throws Exception {
+    server.enqueue(new MockResponse().setBody(""A"").addHeader(""ETag: v1""));
+    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
+    server.play();
+
+    client.setOkResponseCache(cache);
+
+    Request request1 = new Request.Builder(server.getUrl(""/"")).build();
+    client.enqueue(request1, receiver);
+    receiver.await(request1).assertCode(200).assertBody(""A"");
+    assertNull(server.takeRequest().getHeader(""If-None-Match""));
+
+    Request request2 = new Request.Builder(server.getUrl(""/"")).build();
+    client.enqueue(request2, receiver);
+    receiver.await(request2).assertCode(200).assertBody(""A"");
+    assertEquals(""v1"", server.takeRequest().getHeader(""If-None-Match""));
+  }
 }
@@ -18,6 +18,9 @@
 
 import com.squareup.okhttp.HttpResponseCache;
 import com.squareup.okhttp.OkHttpClient;
+import com.squareup.okhttp.OkResponseCache;
+import com.squareup.okhttp.Request;
+import com.squareup.okhttp.Response;
 import com.squareup.okhttp.ResponseSource;
 import com.squareup.okhttp.internal.SslContextBuilder;
 import com.squareup.okhttp.internal.Util;
@@ -51,7 +54,6 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
@@ -60,6 +62,7 @@
 import java.util.TimeZone;
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.zip.GZIPOutputStream;
@@ -201,11 +204,10 @@ private void assertCached(boolean shouldPut, int responseCode) throws Exception
     // exhaust the content stream
     readAscii(conn);
 
-    CacheResponse cached =
-        cache.get(url.toURI(), ""GET"", Collections.<String, List<String>>emptyMap());
+    Response cached = cache.get(new Request.Builder(url).build());
     if (shouldPut) {
       assertNotNull(Integer.toString(responseCode), cached);
-      cached.getBody().close();
+      cached.body().close();
     } else {
       assertNull(Integer.toString(responseCode), cached);
     }
@@ -220,40 +222,25 @@ private void assertCached(boolean shouldPut, int responseCode) throws Exception
     final String body = ""ABCDE"";
     final AtomicInteger cacheCount = new AtomicInteger();
 
-    server.enqueue(
-        new MockResponse().setStatus(""HTTP/1.1 200 Fantastic"").addHeader(""fgh: ijk"").setBody(body));
-    server.play();
-
-    ResponseCache.setDefault(new ResponseCache() {
-      @Override public CacheResponse get(URI uri, String requestMethod,
-          Map<String, List<String>> requestHeaders) throws IOException {
-        return null;
-      }
-
-      @Override public CacheRequest put(URI uri, URLConnection conn) throws IOException {
-        HttpURLConnection httpConnection = (HttpURLConnection) conn;
-        try {
-          httpConnection.getRequestProperties();
-          fail();
-        } catch (IllegalStateException expected) {
-        }
+    server.enqueue(new MockResponse()
+        .setStatus(""HTTP/1.1 200 Fantastic"")
+        .addHeader(""Content-Type: text/plain"")
+        .addHeader(""fgh: ijk"")
+        .setBody(body));
+    server.play();
+
+    client.setOkResponseCache(new AbstractOkResponseCache() {
+      @Override public CacheRequest put(Response response) throws IOException {
+        assertEquals(server.getUrl(""/""), response.request().url());
+        assertEquals(200, response.code());
+        assertEquals(body.length(), response.body().contentLength());
+        assertEquals(""text/plain"", response.body().contentType().toString());
+        assertEquals(""ijk"", response.header(""fgh""));
         try {
-          httpConnection.addRequestProperty(""K"", ""V"");
+          response.body().byteStream(); // the RI doesn't forbid this, but it should
           fail();
         } catch (IllegalStateException expected) {
         }
-        assertEquals(""HTTP/1.1 200 Fantastic"", httpConnection.getHeaderField(null));
-        assertEquals(Arrays.asList(""HTTP/1.1 200 Fantastic""),
-            httpConnection.getHeaderFields().get(null));
-        assertEquals(200, httpConnection.getResponseCode());
-        assertEquals(""Fantastic"", httpConnection.getResponseMessage());
-        assertEquals(body.length(), httpConnection.getContentLength());
-        assertEquals(""ijk"", httpConnection.getHeaderField(""fgh""));
-        try {
-          httpConnection.getInputStream(); // the RI doesn't forbid this, but it should
-          fail();
-        } catch (IOException expected) {
-        }
         cacheCount.incrementAndGet();
         return null;
       }
@@ -265,6 +252,32 @@ private void assertCached(boolean shouldPut, int responseCode) throws Exception
     assertEquals(1, cacheCount.get());
   }
 
+  /** Don't explode if the cache returns a null body. http://b/3373699 */
+  @Test public void responseCacheReturnsNullOutputStream() throws Exception {
+    final AtomicBoolean aborted = new AtomicBoolean();
+    client.setOkResponseCache(new AbstractOkResponseCache() {
+      @Override public CacheRequest put(Response response) throws IOException {
+        return new CacheRequest() {
+          @Override public void abort() {
+            aborted.set(true);
+          }
+
+          @Override public OutputStream getBody() throws IOException {
+            return null;
+          }
+        };
+      }
+    });
+
+    server.enqueue(new MockResponse().setBody(""abcdef""));
+    server.play();
+
+    HttpURLConnection connection = client.open(server.getUrl(""/""));
+    assertEquals(""abc"", readAscii(connection, 3));
+    connection.getInputStream().close();
+    assertFalse(aborted.get()); // The best behavior is ambiguous, but RI 6 doesn't abort here
+  }
+
   @Test public void responseCachingAndInputStreamSkipWithFixedLength() throws IOException {
     testResponseCaching(TransferKind.FIXED_LENGTH);
   }
@@ -323,32 +336,32 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .setBody(""ABC""));
     server.play();
 
-    HttpsURLConnection connection = (HttpsURLConnection) client.open(server.getUrl(""/""));
-    connection.setSSLSocketFactory(sslContext.getSocketFactory());
-    connection.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
-    assertEquals(""ABC"", readAscii(connection));
+    HttpsURLConnection c1 = (HttpsURLConnection) client.open(server.getUrl(""/""));
+    c1.setSSLSocketFactory(sslContext.getSocketFactory());
+    c1.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
+    assertEquals(""ABC"", readAscii(c1));
 
     // OpenJDK 6 fails on this line, complaining that the connection isn't open yet
-    String suite = connection.getCipherSuite();
-    List<Certificate> localCerts = toListOrNull(connection.getLocalCertificates());
-    List<Certificate> serverCerts = toListOrNull(connection.getServerCertificates());
-    Principal peerPrincipal = connection.getPeerPrincipal();
-    Principal localPrincipal = connection.getLocalPrincipal();
-
-    connection = (HttpsURLConnection) client.open(server.getUrl(""/"")); // cached!
-    connection.setSSLSocketFactory(sslContext.getSocketFactory());
-    connection.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
-    assertEquals(""ABC"", readAscii(connection));
+    String suite = c1.getCipherSuite();
+    List<Certificate> localCerts = toListOrNull(c1.getLocalCertificates());
+    List<Certificate> serverCerts = toListOrNull(c1.getServerCertificates());
+    Principal peerPrincipal = c1.getPeerPrincipal();
+    Principal localPrincipal = c1.getLocalPrincipal();
+
+    HttpsURLConnection c2 = (HttpsURLConnection) client.open(server.getUrl(""/"")); // cached!
+    c2.setSSLSocketFactory(sslContext.getSocketFactory());
+    c2.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
+    assertEquals(""ABC"", readAscii(c2));
 
     assertEquals(2, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(1, cache.getHitCount());
 
-    assertEquals(suite, connection.getCipherSuite());
-    assertEquals(localCerts, toListOrNull(connection.getLocalCertificates()));
-    assertEquals(serverCerts, toListOrNull(connection.getServerCertificates()));
-    assertEquals(peerPrincipal, connection.getPeerPrincipal());
-    assertEquals(localPrincipal, connection.getLocalPrincipal());
+    assertEquals(suite, c2.getCipherSuite());
+    assertEquals(localCerts, toListOrNull(c2.getLocalCertificates()));
+    assertEquals(serverCerts, toListOrNull(c2.getServerCertificates()));
+    assertEquals(peerPrincipal, c2.getPeerPrincipal());
+    assertEquals(localPrincipal, c2.getLocalPrincipal());
   }
 
   @Test public void cacheReturnsInsecureResponseForSecureRequest() throws IOException {
@@ -486,15 +499,10 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     server.enqueue(new MockResponse().setBody(""ABC""));
     server.play();
 
-    final AtomicReference<Map<String, List<String>>> requestHeadersRef =
-        new AtomicReference<Map<String, List<String>>>();
-    ResponseCache.setDefault(new ResponseCache() {
-      @Override public CacheResponse get(URI uri, String requestMethod,
-          Map<String, List<String>> requestHeaders) throws IOException {
-        requestHeadersRef.set(requestHeaders);
-        return null;
-      }
-      @Override public CacheRequest put(URI uri, URLConnection conn) throws IOException {
+    final AtomicReference<Request> requestRef = new AtomicReference<Request>();
+    client.setOkResponseCache(new AbstractOkResponseCache() {
+      @Override public Response get(Request request) throws IOException {
+        requestRef.set(request);
         return null;
       }
     });
@@ -503,7 +511,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     URLConnection urlConnection = openConnection(url);
     urlConnection.addRequestProperty(""A"", ""android"");
     readAscii(urlConnection);
-    assertEquals(Arrays.asList(""android""), requestHeadersRef.get().get(""A""));
+    assertEquals(Arrays.asList(""android""), requestRef.get().headers(""A""));
   }
 
   @Test public void serverDisconnectsPrematurelyWithContentLengthHeader() throws IOException {
@@ -1903,7 +1911,8 @@ private MockResponse truncateViolently(MockResponse response, int numBytesToKeep
   private String readAscii(URLConnection connection, int count) throws IOException {
     HttpURLConnection httpConnection = (HttpURLConnection) connection;
     InputStream in = httpConnection.getResponseCode() < HttpURLConnection.HTTP_BAD_REQUEST
-        ? connection.getInputStream() : httpConnection.getErrorStream();
+        ? connection.getInputStream()
+        : httpConnection.getErrorStream();
     StringBuilder result = new StringBuilder();
     for (int i = 0; i < count; i++) {
       int value = in.read();
@@ -2002,4 +2011,27 @@ private class InsecureResponseCache extends ResponseCache {
       return response;
     }
   }
+
+  static abstract class AbstractOkResponseCache implements OkResponseCache {
+    @Override public Response get(Request request) throws IOException {
+      return null;
+    }
+
+    @Override public CacheRequest put(Response response) throws IOException {
+      return null;
+    }
+
+    @Override public boolean maybeRemove(Request request) throws IOException {
+      return false;
+    }
+
+    @Override public void update(Response cached, Response network) throws IOException {
+    }
+
+    @Override public void trackConditionalCacheHit() {
+    }
+
+    @Override public void trackResponse(ResponseSource source) {
+    }
+  }
 }
@@ -60,7 +60,6 @@
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
 import javax.net.ssl.HttpsURLConnection;
@@ -2113,35 +2112,22 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
   }
 
   /** Don't explode if the cache returns a null body. http://b/3373699 */
-  @Test public void responseCacheReturnsNullOutputStream() throws Exception {
-    final AtomicBoolean aborted = new AtomicBoolean();
-    client.setResponseCache(new ResponseCache() {
+  @Test public void installDeprecatedJavaNetResponseCache() throws Exception {
+    ResponseCache cache = new ResponseCache() {
       @Override public CacheResponse get(URI uri, String requestMethod,
           Map<String, List<String>> requestHeaders) throws IOException {
         return null;
       }
-
       @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {
-        return new CacheRequest() {
-          @Override public void abort() {
-            aborted.set(true);
-          }
-
-          @Override public OutputStream getBody() throws IOException {
-            return null;
-          }
-        };
+        return null;
       }
-    });
-
-    server.enqueue(new MockResponse().setBody(""abcdef""));
-    server.play();
+    };
 
-    HttpURLConnection connection = client.open(server.getUrl(""/""));
-    InputStream in = connection.getInputStream();
-    assertEquals(""abc"", readAscii(in, 3));
-    in.close();
-    assertFalse(aborted.get()); // The best behavior is ambiguous, but RI 6 doesn't abort here
+    try {
+      client.setResponseCache(cache);
+      fail();
+    } catch (UnsupportedOperationException expected) {
+    }
   }
 
   /** http://code.google.com/p/android/issues/detail?id=14562 */
"
https://github.com/junit-team/junit4/commit/435d41f0d45cfdbc1a38e1ad4eb1d5300da533f9,"Use Google's Maven Central mirror <enter>  <enter> We are using Maven 3.1.1 which by default uses HTTP instead of HTTPS for <enter> resolving artifacts from Maven Central. Maven Central recently <enter> discontinued HTTP support. Therefore the build on Travis started <enter> failing. By using an HTTPS mirror of Maven Central the build on Travis <enter> will work again. <enter>  <enter> I chose Google's mirror because Travis uses this mirror by default, too. <enter> I did not upgrade to a new version of Maven because there is no newer <enter> version with Java 5 support and it should be possible to build JUnit 4 <enter> with Java 5 so that we can easily ensure that it works with Java 5.",https://api.github.com/repos/junit-team/junit4/commits/435d41f0d45cfdbc1a38e1ad4eb1d5300da533f9,"@@ -1,4 +1,12 @@
 <settings>
+    <mirrors xmlns=""http://maven.apache.org/SETTINGS/1.1.0"">
+        <mirror>
+            <mirrorOf>central</mirrorOf>
+            <name>GCS Maven Central mirror</name>
+            <url>https://maven-central.storage-download.googleapis.com/maven2/</url>
+            <id>google-maven-central</id>
+        </mirror>
+    </mirrors>
     <servers>
         <server>
             <id>junit-snapshot-repo</id>
"
https://github.com/apache/dubbo/commit/6764744115bffdcd7cde85112611dade6002fe5c,update version to 2.1.6  <enter> git-svn-id:  http://code.alibabatech.com/svn/dubbo/trunk@1550  1a56cb94-b969-4eaa-88fa-be21384802f2 ,https://api.github.com/repos/apache/dubbo/commits/6764744115bffdcd7cde85112611dade6002fe5c,
https://github.com/square/okhttp/commit/15940665526348d815b26d509ce44c79926c612b,Merge: Fix HttpURLConnection CloseGuard warning due to lack of close on GZIPInputStream <enter> Original AOSP/libcore commit by Brian Carlstrom: java.lang.Throwable: Explicit termination method 'end' not called   at dalvik.system.CloseGuard.open(CloseGuard.java:184)   at java.util.zip.Inflater.<init>(Inflater.java:82)   at java.util.zip.GZIPInputStream.<init>(GZIPInputStream.java:96)   at java.util.zip.GZIPInputStream.<init>(GZIPInputStream.java:81)   at libcore.net.http.HttpEngine.initContentStream(HttpEngine.java:523)   at libcore.net.http.HttpEngine.readResponse(HttpEngine.java:831)   at libcore.net.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:274)   at libcore.net.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:486)   at ... <enter> Bug: 6602529 Change-Id: I9b49cbca561f8780d08844e566820087fdffc4d7 ,https://api.github.com/repos/square/okhttp/commits/15940665526348d815b26d509ce44c79926c612b,"@@ -35,6 +35,7 @@
 import java.util.List;
 import java.util.Map;
 import libcore.io.Base64;
+import libcore.io.IoUtils;
 import libcore.util.Libcore;
 
 /**
@@ -92,6 +93,14 @@ public HttpURLConnectionImpl(URL url, int port, Proxy proxy) {
     @Override public final void disconnect() {
         // Calling disconnect() before a connection exists should have no effect.
         if (httpEngine != null) {
+            // We close the response body here instead of in
+            // HttpEngine.release because that is called when input
+            // has been completely read from the underlying socket.
+            // However the response body can be a GZIPInputStream that
+            // still has unread data.
+            if (httpEngine.hasResponse()) {
+                IoUtils.closeQuietly(httpEngine.getResponseBody());
+            }
             httpEngine.release(false);
         }
     }
@@ -773,6 +773,50 @@ public void testDisconnectBeforeConnect() throws IOException {
         assertEquals(200, connection.getResponseCode());
     }
 
+//    public void testDisconnectAfterOnlyResponseCodeCausesNoCloseGuardWarning() throws IOException {
+//        CloseGuardGuard guard = new CloseGuardGuard();
+//        try {
+//            server.enqueue(new MockResponse()
+//                    .setBody(gzip(""ABCABCABC"".getBytes(""UTF-8"")))
+//                    .addHeader(""Content-Encoding: gzip""));
+//            server.play();
+//
+//            HttpURLConnection connection = (HttpURLConnection) server.getUrl(""/"").openConnection();
+//            assertEquals(200, connection.getResponseCode());
+//            connection.disconnect();
+//            connection = null;
+//            assertFalse(guard.wasCloseGuardCalled());
+//        } finally {
+//            guard.close();
+//        }
+//    }
+//
+//    public static class CloseGuardGuard implements Closeable, CloseGuard.Reporter  {
+//        private final CloseGuard.Reporter oldReporter = CloseGuard.getReporter();
+//
+//        private AtomicBoolean closeGuardCalled = new AtomicBoolean();
+//
+//        public CloseGuardGuard() {
+//            CloseGuard.setReporter(this);
+//        }
+//
+//        @Override public void report(String message, Throwable allocationSite) {
+//            oldReporter.report(message, allocationSite);
+//            closeGuardCalled.set(true);
+//        }
+//
+//        public boolean wasCloseGuardCalled() {
+//            // FinalizationTester.induceFinalization();
+//            close();
+//            return closeGuardCalled.get();
+//        }
+//
+//        @Override public void close() {
+//            CloseGuard.setReporter(oldReporter);
+//        }
+//
+//    }
+
     public void testDefaultRequestProperty() throws Exception {
         URLConnection.setDefaultRequestProperty(""X-testSetDefaultRequestProperty"", ""A"");
         assertNull(URLConnection.getDefaultRequestProperty(""X-setDefaultRequestProperty""));
"
https://github.com/junit-team/junit4/commit/18b23a7ed22080e7412e24060c66cef7fc3b1b93,Fix <issue_link> - correct link to 4.12 release notes ,https://api.github.com/repos/junit-team/junit4/commits/18b23a7ed22080e7412e24060c66cef7fc3b1b93,"@@ -78,8 +78,7 @@
             <li><a href=""https://github.com/junit-team/junit/wiki/Getting-started"">Getting started</a></li>
             <li>Release Notes
               <ul>
-<li>
-<a href=""https://github.com/junit-team/junit/wiki/4.12-release-notes"">4.12</a> - (unreleased)</li>
+<li><a href=""https://github.com/junit-team/junit/blob/master/doc/ReleaseNotes4.12.md"">4.12</a></li>
 <li><a href=""https://github.com/junit-team/junit/blob/master/doc/ReleaseNotes4.11.md"">4.11</a></li>
 <li><a href=""https://github.com/junit-team/junit/blob/master/doc/ReleaseNotes4.10.md"">4.10</a></li>
 <li><a href=""https://github.com/junit-team/junit/blob/master/doc/ReleaseNotes4.9.1.md"">4.9.1</a></li>
"
https://github.com/spring-projects/spring-boot/commit/c3e447c84c8a3d46ef300184787d3c6be8b792fc,"Order char encoding filter so it sets encoding before request is read  <enter> For the character encoding filter to work, it's vital that it sets the request's encoding before any other filters attempt to read the request. This commit updates the order of OrderedCharacterEncodingFilter to be HIGHEST_PRECEDENCE and improves the existing test to check that the ordering is as required. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/c3e447c84c8a3d46ef300184787d3c6be8b792fc,"@@ -27,6 +27,8 @@
 import org.junit.rules.ExpectedException;
 import org.springframework.beans.DirectFieldAccessor;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
+import org.springframework.boot.context.web.OrderedHiddenHttpMethodFilter;
+import org.springframework.boot.context.web.OrderedHttpPutFormContentFilter;
 import org.springframework.boot.test.EnvironmentTestUtils;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
@@ -145,8 +147,13 @@ public CharacterEncodingFilter myCharacterEncodingFilter() {
 	static class OrderedConfiguration {
 
 		@Bean
-		public HiddenHttpMethodFilter hiddenHttpMethodFilter() {
-			return new HiddenHttpMethodFilter();
+		public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {
+			return new OrderedHiddenHttpMethodFilter();
+		}
+
+		@Bean
+		public OrderedHttpPutFormContentFilter httpPutFormContentFilter() {
+			return new OrderedHttpPutFormContentFilter();
 		}
 
 	}
@@ -16,7 +16,6 @@
 
 package org.springframework.boot.context.web;
 
-import org.springframework.boot.context.embedded.FilterRegistrationBean;
 import org.springframework.core.Ordered;
 import org.springframework.web.filter.CharacterEncodingFilter;
 
@@ -29,7 +28,7 @@
 public class OrderedCharacterEncodingFilter extends CharacterEncodingFilter implements
 		Ordered {
 
-	private int order = FilterRegistrationBean.REQUEST_WRAPPER_FILTER_MAX_ORDER - 9800;
+	private int order = Ordered.HIGHEST_PRECEDENCE;
 
 	@Override
 	public int getOrder() {
"
https://github.com/square/okhttp/commit/18f2b5e6e69de28f420298862378abfd243096ce,"Fix source compatibility for some Kotlin callsites. ( <pr_link> )  <enter> We had a problem where boolean vals needed to be reverted back to boolean funs. I'd like to go back to vals later, but supporting existing source patterns is more important. <enter> We also had a problem where single abstract method types (SAM types) could be supplied as lambas when calling into Java but not when calling into Kotlin. <enter> I found these by pointing KotlinSourceCompatibilityTest at the OkHttp <enter> Get there like this:   git co  <otherCommit_link> ^   git co  <otherCommit_link>  okhttp/build.gradle   git co  <otherCommit_link>  build.gradle ",https://api.github.com/repos/square/okhttp/commits/18f2b5e6e69de28f420298862378abfd243096ce,"@@ -183,7 +183,7 @@ class HttpLoggingInterceptor @JvmOverloads constructor(
         logger.log(""--> END ${request.method()}"")
       } else if (bodyHasUnknownEncoding(request.headers())) {
         logger.log(""--> END ${request.method()} (encoded body omitted)"")
-      } else if (requestBody.isDuplex) {
+      } else if (requestBody.isDuplex()) {
         logger.log(""--> END ${request.method()} (duplex request body omitted)"")
       } else {
         val buffer = Buffer()
@@ -115,5 +115,13 @@ interface Authenticator {
         return null
       }
     }
+
+    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method).
+    @JvmName(""-deprecated_Authenticator"")
+    inline operator fun invoke(
+      crossinline block: (route: Route?, response: Response) -> Request?
+    ): Authenticator = object: Authenticator {
+      override fun authenticate(route: Route?, response: Response) = block(route, response)
+    }
   }
 }
@@ -74,9 +74,9 @@ interface Call : Cloneable {
    * Returns true if this call has been either [executed][execute] or [enqueued][enqueue]. It is an
    * error to execute a call more than once.
    */
-  val isExecuted: Boolean
+  fun isExecuted(): Boolean
 
-  val isCanceled: Boolean
+  fun isCanceled(): Boolean
 
   /**
    * Returns a timeout that spans the entire call: resolving DNS, connecting, writing the request
@@ -112,6 +112,11 @@ class Dispatcher constructor() {
     this.idleCallback = idleCallback
   }
 
+  // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method).
+  @JvmName(""-deprecated_setIdleCallback"")
+  inline fun setIdleCallback(crossinline idleCallback: () -> Unit) =
+      setIdleCallback(Runnable { idleCallback() })
+
   internal fun enqueue(call: AsyncCall) {
     synchronized(this) {
       readyAsyncCalls.add(call)
@@ -54,5 +54,13 @@ interface Dns {
         }
       }
     }
+
+    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method).
+    @JvmName(""-deprecated_Dns"")
+    inline operator fun invoke(
+      crossinline block: (String) -> List<InetAddress>
+    ): Dns = object : Dns {
+      override fun lookup(hostname: String): List<InetAddress> = block(hostname)
+    }
   }
 }
@@ -346,6 +346,16 @@ abstract class EventListener {
      * from this method.**
      */
     fun create(call: Call): EventListener
+
+    companion object {
+      // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method).
+      @JvmName(""-deprecated_Factory"")
+      inline operator fun invoke(
+        crossinline block: (call: Call) -> EventListener
+      ): Factory = object : Factory {
+        override fun create(call: Call) = block(call)
+      }
+    }
   }
 
   companion object {
@@ -27,6 +27,16 @@ interface Interceptor {
   @Throws(IOException::class)
   fun intercept(chain: Chain): Response
 
+  companion object {
+    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method).
+    @JvmName(""-deprecated_Interceptor"")
+    inline operator fun invoke(
+      crossinline block: (chain: Chain) -> Response
+    ): Interceptor = object: Interceptor {
+      override fun intercept(chain: Chain) = block(chain)
+    }
+  }
+
   interface Chain {
     fun request(): Request
 
@@ -755,6 +755,16 @@ open class OkHttpClient internal constructor(
       interceptors += interceptor
     }
 
+    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method).
+    @JvmName(""-deprecated_addInterceptor"")
+    inline fun addInterceptor(
+      crossinline interceptor: (chain: Interceptor.Chain) -> Response
+    ) = apply {
+      addInterceptor(object : Interceptor {
+        override fun intercept(chain: Interceptor.Chain): Response = interceptor(chain)
+      })
+    }
+
     /**
      * Returns a modifiable list of interceptors that observe a single network request and response.
      * These interceptors must call [Interceptor.Chain.proceed] exactly once: it is an error for a
@@ -766,6 +776,16 @@ open class OkHttpClient internal constructor(
       networkInterceptors += interceptor
     }
 
+    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method).
+    @JvmName(""-deprecated_addNetworkInterceptor"")
+    inline fun addNetworkInterceptor(
+      crossinline interceptor: (chain: Interceptor.Chain) -> Response
+    ) = apply {
+      addInterceptor(object : Interceptor {
+        override fun intercept(chain: Interceptor.Chain): Response = interceptor(chain)
+      })
+    }
+
     /**
      * Configure a single client scoped listener that will receive all analytic events for this
      * client.
@@ -786,6 +806,14 @@ open class OkHttpClient internal constructor(
       this.eventListenerFactory = eventListenerFactory
     }
 
+    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method).
+    @JvmName(""-deprecated_eventListenerFactory"")
+    inline fun eventListenerFactory(crossinline block: (call: Call) -> EventListener) = apply {
+      eventListenerFactory(object : EventListener.Factory {
+        override fun create(call: Call) = block(call)
+      })
+    }
+
     fun build(): OkHttpClient = OkHttpClient(this)
   }
 
@@ -47,17 +47,18 @@ internal class RealCall private constructor(
   private lateinit var transmitter: Transmitter
 
   // Guarded by this.
-  @get:Synchronized override var isExecuted: Boolean = false
+  var executed: Boolean = false
 
-  override val isCanceled: Boolean
-    get() = transmitter.isCanceled
+  @Synchronized override fun isExecuted(): Boolean = executed
+
+  override fun isCanceled(): Boolean = transmitter.isCanceled
 
   override fun request(): Request = originalRequest
 
   override fun execute(): Response {
     synchronized(this) {
-      check(!isExecuted) { ""Already Executed"" }
-      isExecuted = true
+      check(!executed) { ""Already Executed"" }
+      executed = true
     }
     transmitter.timeoutEnter()
     transmitter.callStart()
@@ -71,8 +72,8 @@ internal class RealCall private constructor(
 
   override fun enqueue(responseCallback: Callback) {
     synchronized(this) {
-      check(!isExecuted) { ""Already Executed"" }
-      isExecuted = true
+      check(!executed) { ""Already Executed"" }
+      executed = true
     }
     transmitter.callStart()
     client.dispatcher().enqueue(AsyncCall(responseCallback))
@@ -153,7 +154,7 @@ internal class RealCall private constructor(
    * sensitive information.
    */
   fun toLoggableString(): String {
-    return ((if (isCanceled) ""canceled "" else """")
+    return ((if (isCanceled()) ""canceled "" else """")
         + (if (forWebSocket) ""web socket"" else ""call"")
         + "" to "" + redactedUrl())
   }
@@ -72,7 +72,7 @@ abstract class RequestBody {
    *
    * [grpc]: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md
    */
-  open val isDuplex: Boolean = false
+  open fun isDuplex(): Boolean = false
 
   /**
    * Returns true if this body expects at most one call to [writeTo] and can be transmitted
@@ -86,7 +86,7 @@ abstract class RequestBody {
    * (HTTP 401 and 407), or a retryable server failure (HTTP 503 with a `Retry-After: 0`
    * header).
    */
-  open val isOneShot: Boolean = false
+  open fun isOneShot(): Boolean = false
 
   companion object {
 
@@ -62,6 +62,8 @@ import javax.net.ssl.SSLSocketFactory
     ""ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE"",
     ""DEPRECATION"",
     ""RedundantExplicitType"",
+    ""RedundantLambdaArrow"",
+    ""UNUSED_ANONYMOUS_PARAMETER"",
     ""UNUSED_VALUE"",
     ""UNUSED_VARIABLE"",
     ""VARIABLE_WITH_REDUNDANT_INITIALIZER""
@@ -97,9 +99,10 @@ class KotlinSourceCompatibilityTest {
 
   @Test @Ignore
   fun authenticator() {
-    val authenticator = object : Authenticator {
+    var authenticator: Authenticator = object : Authenticator {
       override fun authenticate(route: Route?, response: Response): Request? = TODO()
     }
+    authenticator = Authenticator { route: Route?, response: Response -> TODO() }
   }
 
   @Test @Ignore
@@ -160,8 +163,8 @@ class KotlinSourceCompatibilityTest {
       override fun execute(): Response = TODO()
       override fun enqueue(responseCallback: Callback) = TODO()
       override fun cancel() = TODO()
-      override val isExecuted: Boolean get() = TODO()
-      override val isCanceled: Boolean get() = TODO()
+      override fun isExecuted(): Boolean = TODO()
+      override fun isCanceled(): Boolean = TODO()
       override fun timeout(): Timeout = TODO()
       override fun clone(): Call = TODO()
     }
@@ -312,6 +315,7 @@ class KotlinSourceCompatibilityTest {
     dispatcher.setIdleCallback(object : Runnable {
       override fun run() = TODO()
     })
+    dispatcher.setIdleCallback { TODO() }
     val queuedCalls: List<Call> = dispatcher.queuedCalls()
     val runningCalls: List<Call> = dispatcher.runningCalls()
     val queuedCallsCount: Int = dispatcher.queuedCallsCount()
@@ -321,9 +325,11 @@ class KotlinSourceCompatibilityTest {
 
   @Test @Ignore
   fun dns() {
-    val dns = object : Dns {
+    var dns: Dns = object : Dns {
       override fun lookup(hostname: String): List<InetAddress> = TODO()
     }
+    dns = Dns { it: String -> TODO() }
+
     val system: Dns = Dns.SYSTEM
   }
 
@@ -381,9 +387,10 @@ class KotlinSourceCompatibilityTest {
 
   @Test @Ignore
   fun eventListenerBuilder() {
-    val builder = object : EventListener.Factory {
+    var builder: EventListener.Factory = object : EventListener.Factory {
       override fun create(call: Call): EventListener = TODO()
     }
+    builder = EventListener.Factory { it: Call -> TODO() }
   }
 
   @Test @Ignore
@@ -394,7 +401,7 @@ class KotlinSourceCompatibilityTest {
     val name: String = formBody.name(0)
     val encodedValue: String = formBody.encodedValue(0)
     val value: String = formBody.value(0)
-    val contentType: MediaType = formBody.contentType()
+    val contentType: MediaType? = formBody.contentType()
     val contentLength: Long = formBody.contentLength()
     formBody.writeTo(Buffer())
     val requestBody: RequestBody = formBody
@@ -570,9 +577,10 @@ class KotlinSourceCompatibilityTest {
 
   @Test @Ignore
   fun interceptor() {
-    val interceptor = object : Interceptor {
+    var interceptor: Interceptor = object : Interceptor {
       override fun intercept(chain: Interceptor.Chain): Response = TODO()
     }
+    interceptor = Interceptor { it: Interceptor.Chain -> TODO() }
   }
 
   @Test @Ignore
@@ -683,14 +691,17 @@ class KotlinSourceCompatibilityTest {
     builder = builder.addInterceptor(object : Interceptor {
       override fun intercept(chain: Interceptor.Chain): Response = TODO()
     })
+    builder = builder.addInterceptor { it: Interceptor.Chain -> TODO() }
     val networkInterceptors: List<Interceptor> = builder.networkInterceptors()
     builder = builder.addNetworkInterceptor(object : Interceptor {
       override fun intercept(chain: Interceptor.Chain): Response = TODO()
     })
+    builder = builder.addNetworkInterceptor { it: Interceptor.Chain -> TODO() }
     builder = builder.eventListener(EventListener.NONE)
     builder = builder.eventListenerFactory(object : EventListener.Factory {
       override fun create(call: Call): EventListener = TODO()
     })
+    builder = builder.eventListenerFactory { it: Call -> TODO() }
     val client: OkHttpClient = builder.build()
   }
 
@@ -749,8 +760,8 @@ class KotlinSourceCompatibilityTest {
     var requestBody: RequestBody = object : RequestBody() {
       override fun contentType(): MediaType? = TODO()
       override fun contentLength(): Long = TODO()
-      override val isDuplex: Boolean get() = TODO()
-      override val isOneShot: Boolean get() = TODO()
+      override fun isDuplex(): Boolean = TODO()
+      override fun isOneShot(): Boolean = TODO()
       override fun writeTo(sink: BufferedSink) = TODO()
     }
     requestBody = RequestBody.create(null, """")
"
https://github.com/square/okhttp/commit/7a3bb19ea44f6771a20d3f5c323cc8bd15d73a56,"Prevent MockSpdyPeer interfering with Android tests  <enter> On Android we run the OkHttp tests as an instrumented test case. The default UncaughtExceptionHandler on Android will quit the app, causing the current test to fail. <enter> MockSpdyPeer creates a thread that fails for various reasons that are not related to / required for the actual test. Often the exception is thrown during a subsequent test. <enter> This change logs the exception but prevent it from propagating out of the top of the call stack. This decreases overall flakiness. ",https://api.github.com/repos/square/okhttp/commits/7a3bb19ea44f6771a20d3f5c323cc8bd15d73a56,"@@ -122,7 +122,7 @@ public void play() throws IOException {
           readAndWriteFrames();
         } catch (IOException e) {
           Util.closeQuietly(MockSpdyPeer.this);
-          throw new RuntimeException(e);
+          e.printStackTrace();
         }
       }
     });
"
https://github.com/apache/dubbo/commit/203078981bb23517703e7bbb60925b8542bc8983,Ignore testStatusChecker since it is unstable and consider removing it later. ,https://api.github.com/repos/apache/dubbo/commits/203078981bb23517703e7bbb60925b8542bc8983,"@@ -27,6 +27,7 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.List;
@@ -123,8 +124,12 @@ public void testLookup() {
         assertThat(lookup.size(), is(1));
     }
 
-
+    @Ignore
     @Test
+    /*
+      This UT is unstable, consider remove it later.
+      @see https://github.com/apache/incubator-dubbo/issues/1787
+     */
     public void testStatusChecker() {
         RegistryStatusChecker registryStatusChecker = new RegistryStatusChecker();
         Status status = registryStatusChecker.check();
"
https://github.com/square/okhttp/commit/29ab48bf0dfbac1b249f2233de08fa948bad11d8,"Fix a race condition in Connection.isExpired().  <enter> This was causing some SPDY connections to be evicted early, and preventing connection reuse. <enter> The spdyConnectionReuse test becomes flaky with the fix that makes MockWebServer use different sequenceNumbers for different requests on the same socket. With the fix the test is no longer flaky. The old test wasn't good enough to detect what it wanted to detect! <enter> This race has existed in the code since we added more aggressive time-based expiration in January 2013. In my basic tests the race impacted ~20% of connections on a desktop VM. It may have been more on mobile. ",https://api.github.com/repos/square/okhttp/commits/29ab48bf0dfbac1b249f2233de08fa948bad11d8,"@@ -633,6 +633,7 @@ public void run() {
   private class SpdySocketHandler implements IncomingStreamHandler {
     private final Socket socket;
     private final Transport transport;
+    private final AtomicInteger sequenceNumber = new AtomicInteger();
 
     private SpdySocketHandler(Socket socket, Transport transport) {
       this.socket = socket;
@@ -684,7 +685,7 @@ private RecordedRequest readRequest(SpdyStream stream) throws IOException {
       String requestLine = method + ' ' + path + ' ' + version;
       List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for SPDY.
       return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),
-          bodyOut.toByteArray(), 0, socket);
+          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);
     }
 
     private void writeResponse(SpdyStream stream, MockResponse response) throws IOException {
@@ -122,15 +122,18 @@ synchronized SpdyStream removeStream(int streamId) {
   }
 
   private synchronized void setIdle(boolean value) {
-    idleStartTimeNs = value ? System.nanoTime() : 0L;
+    idleStartTimeNs = value ? System.nanoTime() : Long.MAX_VALUE;
   }
 
   /** Returns true if this connection is idle. */
   public synchronized boolean isIdle() {
-    return idleStartTimeNs != 0L;
+    return idleStartTimeNs != Long.MAX_VALUE;
   }
 
-  /** Returns the time in ns when this connection became idle or 0L if connection is not idle. */
+  /**
+   * Returns the time in ns when this connection became idle or Long.MAX_VALUE
+   * if connection is not idle.
+   */
   public synchronized long getIdleStartTimeNs() {
     return idleStartTimeNs;
   }
@@ -244,7 +244,7 @@ public boolean isIdle() {
    * {@code keepAliveDurationNs}.
    */
   public boolean isExpired(long keepAliveDurationNs) {
-    return isIdle() && System.nanoTime() - getIdleStartTimeNs() > keepAliveDurationNs;
+    return getIdleStartTimeNs() < System.nanoTime() - keepAliveDurationNs;
   }
 
   /**
@@ -142,7 +142,7 @@ public boolean verify(String hostname, SSLSession session) {
     assertEquals(""DEF"", readAscii(connection1.getInputStream(), 3));
     assertEquals(""JKL"", readAscii(connection2.getInputStream(), 3));
     assertEquals(0, server.takeRequest().getSequenceNumber());
-    assertEquals(0, server.takeRequest().getSequenceNumber());
+    assertEquals(1, server.takeRequest().getSequenceNumber());
   }
 
   @Test public void gzippedResponseBody() throws Exception {
"
https://github.com/junit-team/junit4/commit/1254795902e56eb545e1fe696827924bc5e82b66,"Mark ThreadGroups created by FailOnTimeout as daemon groups ( <pr_link> )  <enter> Mark ThreadGroup created by FailOnTimeout as a daemon group. <enter> Previously, FailOnTimeout destroyed the ThreadGroup, which could cause race conditions if the ThreadGroup was referenced by other threads. <enter>  Fixes   <issue_link> ",https://api.github.com/repos/junit-team/junit4/commits/1254795902e56eb545e1fe696827924bc5e82b66,"@@ -121,28 +121,21 @@ public void evaluate() throws Throwable {
         CallableStatement callable = new CallableStatement();
         FutureTask<Throwable> task = new FutureTask<Throwable>(callable);
         ThreadGroup threadGroup = new ThreadGroup(""FailOnTimeoutGroup"");
-        Thread thread = new Thread(threadGroup, task, ""Time-limited test"");
-        try {
-            thread.setDaemon(true);
-            thread.start();
-            callable.awaitStarted();
-            Throwable throwable = getResult(task, thread);
-            if (throwable != null) {
-                throw throwable;
-            }
-        } finally {
+        if (!threadGroup.isDaemon()) {
             try {
-                thread.join(1);
-            } catch (InterruptedException e) {
-                Thread.currentThread().interrupt();
-            }
-            try {
-                threadGroup.destroy();
-            } catch (IllegalThreadStateException e) {
-                // If a thread from the group is still alive, the ThreadGroup cannot be destroyed.
-                // Swallow the exception to keep the same behavior prior to this change.
+                threadGroup.setDaemon(true);
+            } catch (SecurityException e) {
+                // Swallow the exception to keep the same behavior as in JUnit 4.12.
             }
         }
+        Thread thread = new Thread(threadGroup, task, ""Time-limited test"");
+        thread.setDaemon(true);
+        thread.start();
+        callable.awaitStarted();
+        Throwable throwable = getResult(task, thread);
+        if (throwable != null) {
+            throw throwable;
+        }
     }
 
     /**
@@ -14,17 +14,16 @@
 import static org.junit.Assert.fail;
 import static org.junit.internal.runners.statements.FailOnTimeout.builder;
 
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicReference;
 
 import org.junit.Test;
 import org.junit.function.ThrowingRunnable;
+import org.junit.internal.runners.statements.Fail;
 import org.junit.runners.model.Statement;
 import org.junit.runners.model.TestTimedOutException;
 
+
 /**
  * @author Asaf Ary, Stefan Birkner
  */
@@ -91,20 +90,24 @@ public void throwsExceptionWithTimeoutValueAndTimeUnitSet() {
         assertEquals(TimeUnit.MILLISECONDS, e.getTimeUnit());
     }
 
-    private ThrowingRunnable evaluateWithException(final Exception exception) {
+    private ThrowingRunnable evaluateWithDelegate(final Statement delegate) {
         return new ThrowingRunnable() {
             public void run() throws Throwable {
-                statement.nextException = exception;
+                statement.nextStatement = delegate;
                 statement.waitDuration = 0;
                 failOnTimeout.evaluate();
             }
         };
     }
 
+    private ThrowingRunnable evaluateWithException(Exception exception) {
+        return evaluateWithDelegate(new Fail(exception));
+    }
+
     private ThrowingRunnable evaluateWithWaitDuration(final long waitDuration) {
         return new ThrowingRunnable() {
             public void run() throws Throwable {
-                statement.nextException = null;
+                statement.nextStatement = null;
                 statement.waitDuration = waitDuration;
                 failOnTimeout.evaluate();
             }
@@ -114,13 +117,13 @@ public void run() throws Throwable {
     private static final class TestStatement extends Statement {
         long waitDuration;
 
-        Exception nextException;
+        Statement nextStatement;
 
         @Override
         public void evaluate() throws Throwable {
             sleep(waitDuration);
-            if (nextException != null) {
-                throw nextException;
+            if (nextStatement != null) {
+                nextStatement.evaluate();
             }
         }
     }
@@ -210,20 +213,22 @@ private void notTheRealCauseOfTheTimeout() {
 
     @Test
     public void threadGroupNotLeaked() throws Throwable {
-        Collection<ThreadGroup> groupsBeforeSet = subGroupsOfCurrentThread();
-        
-        evaluateWithWaitDuration(0);
-        
-        for (ThreadGroup group: subGroupsOfCurrentThread()) {
-            if (!groupsBeforeSet.contains(group) && ""FailOnTimeoutGroup"".equals(group.getName())) {
-                fail(""A 'FailOnTimeoutGroup' thread group remains referenced after the test execution."");
+        final AtomicReference<ThreadGroup> innerThreadGroup = new AtomicReference<ThreadGroup>();
+        final AtomicReference<Thread> innerThread = new AtomicReference<Thread>();
+        ThrowingRunnable runnable = evaluateWithDelegate(new Statement() {
+            @Override
+            public void evaluate() {
+                innerThread.set(currentThread());
+                ThreadGroup group = currentThread().getThreadGroup();
+                innerThreadGroup.set(group);
+                assertTrue(""the 'FailOnTimeoutGroup' thread group should be a daemon thread group"", group.isDaemon());
             }
-        }
-    }
-    
-    private Collection<ThreadGroup> subGroupsOfCurrentThread() {
-        ThreadGroup[] subGroups = new ThreadGroup[256];
-        int numGroups = currentThread().getThreadGroup().enumerate(subGroups);
-        return Arrays.asList(subGroups).subList(0, numGroups);
+        });
+
+        runnable.run();
+
+        assertTrue(""the Statement was never run"", innerThread.get() != null);
+        innerThread.get().join();
+        assertTrue(""the 'FailOnTimeoutGroup' thread group should be destroyed after running the test"", innerThreadGroup.get().isDestroyed());
     }
 }
"
https://github.com/junit-team/junit4/commit/1ef449139923a22333f262dc8c75fa057903040c,Increase running time of statement. Fixes <issue_link> .  <enter> The time between starting the statement and calling the future is arbitrary. Now the execution time of the statement is very very long. This ensures that the statement is not already finished when the future is called. ,https://api.github.com/repos/junit-team/junit4/commits/1ef449139923a22333f262dc8c75fa057903040c,
https://github.com/square/okhttp/commit/2594c6c695f2898bba947ea86a7aaac8dcfd4dc4,Don't call callEnd() twice when application interceptors proceed twice.  <enter> I'm working towards reducing the role StreamAllocation plays. <enter>  <issue_link> ,https://api.github.com/repos/square/okhttp/commits/2594c6c695f2898bba947ea86a7aaac8dcfd4dc4,"@@ -88,8 +88,8 @@ public final class ConnectionPoolTest {
           .build();
       Call call = client.newCall(newRequest(addressA));
       Transmitter transmitter = new Transmitter(client, call);
-      transmitter.newStreamAllocation(addressA);
-      transmitter.acquire(c1, true);
+      transmitter.prepareToConnect(call.request());
+      transmitter.acquireConnection(c1, true);
     }
 
     // Running at time 50, the pool returns that nothing can be evicted until time 150.
@@ -186,8 +186,8 @@ private void allocateAndLeakAllocation(ConnectionPool pool, RealConnection conne
           .build();
       Call call = client.newCall(newRequest(connection.route().address()));
       Transmitter transmitter = new Transmitter(client, call);
-      transmitter.newStreamAllocation(call.request());
-      transmitter.acquire(connection, true);
+      transmitter.prepareToConnect(call.request());
+      transmitter.acquireConnection(connection, true);
     }
   }
 
@@ -1139,4 +1139,33 @@ public void redirectUsingNewConnectionEventSequence() throws IOException {
         ""CallEnd"");
     assertEquals(expectedEvents, listener.recordedEventTypes());
   }
+
+  @Test public void applicationInterceptorProceedsMultipleTimes() throws Exception {
+    server.enqueue(new MockResponse().setBody(""a""));
+    server.enqueue(new MockResponse().setBody(""b""));
+
+    client = client.newBuilder()
+        .addInterceptor(chain -> {
+          try (Response a = chain.proceed(chain.request())) {
+            assertEquals(""a"", a.body().string());
+          }
+          return chain.proceed(chain.request());
+        })
+        .build();
+
+    Call call = client.newCall(new Request.Builder().url(server.url(""/"")).build());
+    Response response = call.execute();
+    assertEquals(""b"", response.body().string());
+
+    List<String> expectedEvents = Arrays.asList(""CallStart"", ""DnsStart"", ""DnsEnd"",
+        ""ConnectStart"", ""ConnectEnd"", ""ConnectionAcquired"", ""RequestHeadersStart"",
+        ""RequestHeadersEnd"", ""ResponseHeadersStart"", ""ResponseHeadersEnd"", ""ResponseBodyStart"",
+        ""ResponseBodyEnd"", ""RequestHeadersStart"", ""RequestHeadersEnd"", ""ResponseHeadersStart"",
+        ""ResponseHeadersEnd"", ""ResponseBodyStart"", ""ResponseBodyEnd"", ""ConnectionReleased"",
+        ""CallEnd"");
+    assertEquals(expectedEvents, listener.recordedEventTypes());
+
+    assertEquals(0, server.takeRequest().getSequenceNumber());
+    assertEquals(1, server.takeRequest().getSequenceNumber());
+  }
 }
@@ -110,17 +110,20 @@ public synchronized int connectionCount() {
   }
 
   /**
-   * Acquires a recycled connection to {@code address} for {@code streamAllocation}. If non-null
-   * {@code route} is the resolved route for a connection.
+   * Attempts to acquire a recycled connection to {@code address} for {@code transmitter}. If
+   * non-null {@code route} is the resolved route for a connection. Returns true if a connection was
+   * acquired.
    */
-  void acquire(Address address, Transmitter transmitter, @Nullable Route route) {
+  boolean transmitterAcquirePooledConnection(
+      Address address, Transmitter transmitter, @Nullable Route route) {
     assert (Thread.holdsLock(this));
     for (RealConnection connection : connections) {
       if (connection.isEligible(address, route)) {
-        transmitter.acquire(connection, true);
-        return;
+        transmitter.acquireConnection(connection, true);
+        return true;
       }
     }
+    return false;
   }
 
   /**
@@ -149,9 +149,9 @@ public class OkHttpClient implements Cloneable, Call.Factory, WebSocket.Factory
         return pool.connectionBecameIdle(connection);
       }
 
-      @Override public void acquire(ConnectionPool pool, Address address,
-          Transmitter transmitter, @Nullable Route route) {
-        pool.acquire(address, transmitter, route);
+      @Override public boolean transmitterAcquirePooledConnection(
+          ConnectionPool pool, Address address, Transmitter transmitter, @Nullable Route route) {
+        return pool.transmitterAcquirePooledConnection(address, transmitter, route);
       }
 
       @Override public boolean equalsNonHost(Address a, Address b) {
@@ -259,6 +259,10 @@ Response getResponseWithInterceptorChain() throws IOException {
         originalRequest, this, client.connectTimeoutMillis(),
         client.readTimeoutMillis(), client.writeTimeoutMillis());
 
-    return chain.proceed(originalRequest);
+    try {
+      return chain.proceed(originalRequest);
+    } finally {
+      transmitter.noMoreStreamsOnCall();
+    }
   }
 }
@@ -51,8 +51,8 @@ public static void initializeInstanceForTests() {
 
   public abstract void setCache(OkHttpClient.Builder builder, InternalCache internalCache);
 
-  public abstract void acquire(ConnectionPool pool, Address address,
-      Transmitter transmitter, @Nullable Route route);
+  public abstract boolean transmitterAcquirePooledConnection(
+      ConnectionPool pool, Address address, Transmitter transmitter, @Nullable Route route);
 
   public abstract boolean equalsNonHost(Address a, Address b);
 
@@ -44,6 +44,8 @@
 import okio.ForwardingSink;
 import okio.Sink;
 
+import static okhttp3.internal.Util.sameConnection;
+
 /**
  * Bridge between OkHttp's application and network layers. This class exposes high-level application
  * layer primitives: connections, requests, responses, and streams.
@@ -55,6 +57,7 @@ public final class Transmitter {
 
   private @Nullable Object callStackTrace;
 
+  private Request request;
   private volatile boolean canceled;
   private volatile StreamAllocation streamAllocation;
 
@@ -68,13 +71,24 @@ public void setCallStackTrace(@Nullable Object callStackTrace) {
     this.callStackTrace = callStackTrace;
   }
 
-  public void newStreamAllocation(Request request) {
-    newStreamAllocation(createAddress(request.url()));
-  }
+  /**
+   * Prepare to create a stream to carry {@code request}. This prefers to use the existing
+   * connection if it exists.
+   */
+  public void prepareToConnect(Request request) {
+    if (this.request != null) {
+      if (sameConnection(this.request.url(), request.url())) {
+        return; // Already ready.
+      }
+      if (streamAllocation != null) {
+        streamAllocation.transmitterReleaseConnection(false);
+        streamAllocation = null;
+      }
+    }
 
-  public void newStreamAllocation(Address address) {
+    this.request = request;
     this.streamAllocation = new StreamAllocation(this, client.connectionPool(),
-        address, call, eventListener, callStackTrace);
+        createAddress(request.url()), call, eventListener, callStackTrace);
   }
 
   private Address createAddress(HttpUrl url) {
@@ -116,7 +130,7 @@ public void streamFailed(@Nullable IOException e) {
   }
 
   public void noNewStreams() {
-    streamAllocation.noNewStreams();
+    streamAllocation.noNewStreamsOnConnection();
   }
 
   public RealWebSocket.Streams newWebSocketStreams() {
@@ -141,8 +155,10 @@ public boolean isConnectionMultiplexed() {
     return streamAllocation.connection().isMultiplexed();
   }
 
-  public void releaseStreamAllocation(boolean callEnd) {
-    streamAllocation.release(callEnd);
+  public void noMoreStreamsOnCall() {
+    if (streamAllocation != null) {
+      streamAllocation.transmitterReleaseConnection(true);
+    }
   }
 
   public boolean hasMoreRoutes() {
@@ -214,8 +230,8 @@ public boolean supportsUrl(HttpUrl url) {
     return streamAllocation.connection().supportsUrl(url);
   }
 
-  public void acquire(RealConnection connection, boolean reportedAcquired) {
-    streamAllocation.acquire(connection, reportedAcquired);
+  public void acquireConnection(RealConnection connection, boolean reportedAcquired) {
+    streamAllocation.transmitterAcquireConnection(connection, reportedAcquired);
   }
 
   public RealConnection connection() {
@@ -678,4 +678,11 @@ public static String getSystemProperty(String key, @Nullable String defaultValue
     }
     return value != null ? value : defaultValue;
   }
+
+  /** Returns true if an HTTP request for {@code a} and {@code b} can reuse a connection. */
+  public static boolean sameConnection(HttpUrl a, HttpUrl b) {
+    return a.host().equals(b.host())
+        && a.port() == b.port()
+        && a.scheme().equals(b.scheme());
+  }
 }
@@ -50,25 +50,26 @@
  *         connections. Each connection has its own allocation limit, which defines how many
  *         concurrent streams that connection can carry. HTTP/1.x connections can carry 1 stream
  *         at a time, HTTP/2 typically carry multiple.
- *     <li><strong>Calls:</strong> a logical sequence of streams, typically an initial request and
- *         its follow up requests. We prefer to keep all streams of a single call on the same
- *         connection for better behavior and locality.
+ *     <li><strong>Transmitters:</strong> a logical sequence of streams, typically an initial
+ *         request and its follow up requests. We prefer to keep all streams of a single {@link
+ *         Call} on the same connection for better behavior and locality.
  * </ul>
  *
- * <p>Instances of this class act on behalf of the call, using one or more streams over one or more
- * connections. This class has APIs to release each of the above resources:
+ * <p>Instances of this class act on behalf of a single transmitter, using one or more streams over
+ * one or more connections. This class has APIs to release each of the above resources:
  *
  * <ul>
- *     <li>{@link #noNewStreams} prevents the connection from being used for new streams in the
- *         future. Use this after a {@code Connection: close} header, or when the connection may be
- *         inconsistent.
+ *     <li>{@link #noNewStreamsOnConnection} prevents the connection from being used for new streams
+ *         in the future. Use this after a {@code Connection: close} header, or when the connection
+ *         may be inconsistent.
  *     <li>{@link #streamFinished streamFinished} releases the active stream from this allocation.
  *         Note that only one stream may be active at a given time, so it is necessary to call
  *         {@link #streamFinished streamFinished()} before creating a subsequent stream with {@link
  *         #newStream newStream()}.
- *     <li>{@link #release} removes the call's hold on the connection. Note that this won't
- *         immediately free the connection if there is a stream still lingering. That happens when a
- *         call is complete but its response body has yet to be fully consumed.
+ *     <li>{@link #transmitterReleaseConnection} removes the transmitter's hold on the connection.
+ *         Note that this won't immediately free the connection if there is a stream still
+ *         lingering. That happens when a call is complete but its response body has yet to be fully
+ *         consumed.
  * </ul>
  *
  * <p>This class supports {@linkplain #cancel asynchronous canceling}. This is intended to have the
@@ -149,7 +150,7 @@ private RealConnection findHealthyConnection(int connectTimeout, int readTimeout
       // Do a (potentially slow) check to confirm that the pooled connection is still good. If it
       // isn't, take it out of the pool and start again.
       if (!candidate.isHealthy(doExtensiveHealthChecks)) {
-        noNewStreams();
+        noNewStreamsOnConnection();
         continue;
       }
 
@@ -189,8 +190,8 @@ private RealConnection findConnection(int connectTimeout, int readTimeout, int w
 
       if (result == null) {
         // Attempt to get a connection from the pool.
-        Internal.instance.acquire(connectionPool, address, transmitter, null);
-        if (connection != null) {
+        if (Internal.instance.transmitterAcquirePooledConnection(
+            connectionPool, address, transmitter, null)) {
           foundPooledConnection = true;
           result = connection;
         } else {
@@ -227,8 +228,8 @@ private RealConnection findConnection(int connectTimeout, int readTimeout, int w
         List<Route> routes = routeSelection.getAll();
         for (int i = 0, size = routes.size(); i < size; i++) {
           Route route = routes.get(i);
-          Internal.instance.acquire(connectionPool, address, transmitter, route);
-          if (connection != null) {
+          if (Internal.instance.transmitterAcquirePooledConnection(
+              connectionPool, address, transmitter, route)) {
             foundPooledConnection = true;
             result = connection;
             this.route = route;
@@ -247,7 +248,7 @@ private RealConnection findConnection(int connectTimeout, int readTimeout, int w
         route = selectedRoute;
         refusedStreamCount = 0;
         result = new RealConnection(connectionPool, selectedRoute);
-        acquire(result, false);
+        transmitterAcquireConnection(result, false);
       }
     }
 
@@ -347,7 +348,7 @@ public synchronized RealConnection connection() {
     return connection;
   }
 
-  public void release(boolean callEnd) {
+  public void transmitterReleaseConnection(boolean callEnd) {
     Socket socket;
     Connection releasedConnection;
     synchronized (connectionPool) {
@@ -368,7 +369,7 @@ public void release(boolean callEnd) {
   }
 
   /** Forbid new streams from being created on the connection that hosts this allocation. */
-  public void noNewStreams() {
+  public void noNewStreamsOnConnection() {
     Socket socket;
     Connection releasedConnection;
     synchronized (connectionPool) {
@@ -398,23 +399,15 @@ private Socket deallocate(boolean noNewStreams, boolean released, boolean stream
     if (released) {
       this.released = true;
     }
-    Socket socket = null;
     if (connection != null) {
       if (noNewStreams) {
         connection.noNewStreams = true;
       }
       if (this.codec == null && (this.released || connection.noNewStreams)) {
-        release(connection);
-        if (connection.transmitters.isEmpty()) {
-          connection.idleAtNanos = System.nanoTime();
-          if (Internal.instance.connectionBecameIdle(connectionPool, connection)) {
-            socket = connection.socket();
-          }
-        }
-        connection = null;
+        return transmitterReleaseConnection();
       }
     }
-    return socket;
+    return null;
   }
 
   public void cancel() {
@@ -476,10 +469,10 @@ public void streamFailed(@Nullable IOException e) {
   }
 
   /**
-   * Use this allocation to hold {@code connection}. Each call to this must be paired with a call to
-   * {@link #release} on the same connection.
+   * Use this allocation to hold {@code connection}. Each use of this must be paired with a call to
+   * {@link #transmitterReleaseConnection} on the same connection.
    */
-  public void acquire(RealConnection connection, boolean reportedAcquired) {
+  public void transmitterAcquireConnection(RealConnection connection, boolean reportedAcquired) {
     assert (Thread.holdsLock(connectionPool));
     if (this.connection != null) throw new IllegalStateException();
 
@@ -488,16 +481,34 @@ public void acquire(RealConnection connection, boolean reportedAcquired) {
     connection.transmitters.add(new TransmitterReference(transmitter, callStackTrace));
   }
 
-  /** Remove this allocation from the connection's list of allocations. */
-  private void release(RealConnection connection) {
+  /**
+   * Remove the transmitter from the connection's list of allocations. Returns a socket that the
+   * caller should close.
+   */
+  private @Nullable Socket transmitterReleaseConnection() {
+    int index = -1;
     for (int i = 0, size = connection.transmitters.size(); i < size; i++) {
       Reference<Transmitter> reference = connection.transmitters.get(i);
       if (reference.get() == transmitter) {
-        connection.transmitters.remove(i);
-        return;
+        index = i;
+        break;
       }
     }
-    throw new IllegalStateException();
+
+    if (index == -1) throw new IllegalStateException();
+
+    RealConnection released = this.connection;
+    released.transmitters.remove(index);
+    this.connection = null;
+
+    if (released.transmitters.isEmpty()) {
+      released.idleAtNanos = System.nanoTime();
+      if (Internal.instance.connectionBecameIdle(connectionPool, released)) {
+        return released.socket();
+      }
+    }
+
+    return null;
   }
 
   /**
@@ -45,6 +45,7 @@
 import static java.net.HttpURLConnection.HTTP_UNAUTHORIZED;
 import static java.net.HttpURLConnection.HTTP_UNAVAILABLE;
 import static okhttp3.internal.Util.closeQuietly;
+import static okhttp3.internal.Util.sameConnection;
 import static okhttp3.internal.http.StatusLine.HTTP_PERM_REDIRECT;
 import static okhttp3.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
 
@@ -70,13 +71,12 @@ public RetryAndFollowUpInterceptor(OkHttpClient client) {
     RealInterceptorChain realChain = (RealInterceptorChain) chain;
     Transmitter transmitter = realChain.transmitter();
 
-    transmitter.newStreamAllocation(request);
-
     int followUpCount = 0;
     Response priorResponse = null;
     while (true) {
+      transmitter.prepareToConnect(request);
+
       if (transmitter.isCanceled()) {
-        transmitter.releaseStreamAllocation(true);
         throw new IOException(""Canceled"");
       }
 
@@ -102,7 +102,6 @@ public RetryAndFollowUpInterceptor(OkHttpClient client) {
         // We're throwing an unchecked exception. Release any resources.
         if (releaseConnection) {
           transmitter.streamFailed(null);
-          transmitter.releaseStreamAllocation(true);
         }
       }
 
@@ -119,35 +118,28 @@ public RetryAndFollowUpInterceptor(OkHttpClient client) {
       try {
         followUp = followUpRequest(response, transmitter.route());
       } catch (IOException e) {
-        transmitter.releaseStreamAllocation(true);
         throw e;
       }
 
       if (followUp == null) {
-        transmitter.releaseStreamAllocation(true);
         return response;
       }
 
       closeQuietly(response.body());
 
+      if (transmitter.hasCodec()) {
+        throw new IllegalStateException(""Closing the body of "" + response
+            + "" didn't close its backing stream. Bad interceptor?"");
+      }
+
       if (++followUpCount > MAX_FOLLOW_UPS) {
-        transmitter.releaseStreamAllocation(true);
         throw new ProtocolException(""Too many follow-up requests: "" + followUpCount);
       }
 
       if (followUp.body() instanceof UnrepeatableRequestBody) {
-        transmitter.releaseStreamAllocation(true);
         throw new HttpRetryException(""Cannot retry streamed HTTP body"", response.code());
       }
 
-      if (!sameConnection(response, followUp.url())) {
-        transmitter.releaseStreamAllocation(false);
-        transmitter.newStreamAllocation(followUp);
-      } else if (transmitter.hasCodec()) {
-        throw new IllegalStateException(""Closing the body of "" + response
-            + "" didn't close its backing stream. Bad interceptor?"");
-      }
-
       request = followUp;
       priorResponse = response;
     }
@@ -285,7 +277,7 @@ private Request followUpRequest(Response userResponse, Route route) throws IOExc
         // When redirecting across hosts, drop all authentication headers. This
         // is potentially annoying to the application layer since they have no
         // way to retain them.
-        if (!sameConnection(userResponse, url)) {
+        if (!sameConnection(userResponse.request().url(), url)) {
           requestBuilder.removeHeader(""Authorization"");
         }
 
@@ -350,15 +342,4 @@ private int retryAfter(Response userResponse, int defaultDelay) {
 
     return Integer.MAX_VALUE;
   }
-
-  /**
-   * Returns true if an HTTP request for {@code followUp} can reuse the connection used by this
-   * engine.
-   */
-  private boolean sameConnection(Response response, HttpUrl followUp) {
-    HttpUrl url = response.request().url();
-    return url.host().equals(followUp.host())
-        && url.port() == followUp.port()
-        && url.scheme().equals(followUp.scheme());
-  }
 }
"
https://github.com/square/okhttp/commit/1ab086360755fcb13356617fe6d738171889d810,"Add a test for interceptors throwing unchecked exceptions.  <enter> Our behavior here is not good. Right now it looks like we're leaking resources; nothing is releasing the socket in a 'finally' clause when interceptors crash. We're also not notifying the callback that the call has failed; that's left hanging. <enter> That said, we don't expect applications to recover from these exceptions. <enter>  Closes   <issue_link> ",https://api.github.com/repos/square/okhttp/commits/1ab086360755fcb13356617fe6d738171889d810,"@@ -23,6 +23,11 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.ForwardingSink;
@@ -430,6 +435,73 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
     callbackB.await(requestB.url()).assertBody(""b"");
   }
 
+  @Test public void applicationkInterceptorThrowsRuntimeExceptionSynchronous() throws Exception {
+    interceptorThrowsRuntimeExceptionSynchronous(client.interceptors());
+  }
+
+  @Test public void networkInterceptorThrowsRuntimeExceptionSynchronous() throws Exception {
+    interceptorThrowsRuntimeExceptionSynchronous(client.networkInterceptors());
+  }
+
+  /**
+   * When an interceptor throws an unexpected exception, synchronous callers can catch it and deal
+   * with it.
+   *
+   * TODO(jwilson): test that resources are not leaked when this happens.
+   */
+  private void interceptorThrowsRuntimeExceptionSynchronous(
+      List<Interceptor> interceptors) throws Exception {
+    interceptors.add(new Interceptor() {
+      @Override public Response intercept(Chain chain) throws IOException {
+        throw new RuntimeException(""boom!"");
+      }
+    });
+
+    Request request = new Request.Builder()
+        .url(server.getUrl(""/""))
+        .build();
+
+    try {
+      client.newCall(request).execute();
+      fail();
+    } catch (RuntimeException expected) {
+      assertEquals(""boom!"", expected.getMessage());
+    }
+  }
+
+  @Test public void applicationInterceptorThrowsRuntimeExceptionAsynchronous() throws Exception {
+    interceptorThrowsRuntimeExceptionAsynchronous(client.interceptors());
+  }
+
+  @Test public void networkInterceptorThrowsRuntimeExceptionAsynchronous() throws Exception {
+    interceptorThrowsRuntimeExceptionAsynchronous(client.networkInterceptors());
+  }
+
+  /**
+   * When an interceptor throws an unexpected exception, asynchronous callers are left hanging. The
+   * exception goes to the uncaught exception handler.
+   *
+   * TODO(jwilson): test that resources are not leaked when this happens.
+   */
+  private void interceptorThrowsRuntimeExceptionAsynchronous(
+        List<Interceptor> interceptors) throws Exception {
+    interceptors.add(new Interceptor() {
+      @Override public Response intercept(Chain chain) throws IOException {
+        throw new RuntimeException(""boom!"");
+      }
+    });
+
+    ExceptionCatchingExecutor executor = new ExceptionCatchingExecutor();
+    client.setDispatcher(new Dispatcher(executor));
+
+    Request request = new Request.Builder()
+        .url(server.getUrl(""/""))
+        .build();
+    client.newCall(request).enqueue(callback);
+
+    assertEquals(""boom!"", executor.takeException().getMessage());
+  }
+
   private RequestBody uppercase(final RequestBody original) {
     return new RequestBody() {
       @Override public MediaType contentType() {
@@ -480,4 +552,29 @@ private Buffer gzip(String data) throws IOException {
     sink.close();
     return result;
   }
+
+  /** Catches exceptions that are otherwise headed for the uncaught exception handler. */
+  private static class ExceptionCatchingExecutor extends ThreadPoolExecutor {
+    private final BlockingQueue<Exception> exceptions = new LinkedBlockingQueue<>();
+
+    public ExceptionCatchingExecutor() {
+      super(1, 1, 0, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());
+    }
+
+    @Override public void execute(final Runnable runnable) {
+      super.execute(new Runnable() {
+        @Override public void run() {
+          try {
+            runnable.run();
+          } catch (Exception e) {
+            exceptions.add(e);
+          }
+        }
+      });
+    }
+
+    public Exception takeException() throws InterruptedException {
+      return exceptions.take();
+    }
+  }
 }
"
https://github.com/square/retrofit/commit/863030b551bc2e3447c5dde55d6bcc312218de6f,Add docs about null responses. ,https://api.github.com/repos/square/retrofit/commits/863030b551bc2e3447c5dde55d6bcc312218de6f,"@@ -74,7 +74,8 @@ public boolean isNetworkError() {
 
   /**
    * HTTP response body converted to the type declared by either the interface method return type or
-   * the generic type of the supplied {@link Callback} parameter.
+   * the generic type of the supplied {@link Callback} parameter. {@code null} if there is no
+   * response.
    */
   public Object getBody() {
     if (response == null) {
@@ -91,7 +92,9 @@ public Object getBody() {
     }
   }
 
-  /** HTTP response body converted to specified {@code type}. */
+  /**
+   * HTTP response body converted to specified {@code type}. {@code null} if there is no response.
+   */
   public Object getBodyAs(Type type) {
     if (response == null) {
       return null;
"
https://github.com/spring-projects/spring-boot/commit/296dc7132b8e444df0e6173740fa6bba5a5f1bd1,Allow JSON Testers to be `@Autowired`  <enter> Switch `@AutoConfigureJsonTesters` to use regular `@Autowired` injection for JSON testers. Prior to this commit JSON Tester fields were initialized directly which caused IDE issues and was also a little confusing. <enter>  Fixes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/296dc7132b8e444df0e6173740fa6bba5a5f1bd1,"@@ -5011,12 +5011,13 @@ annotation.
 Spring Boot includes AssertJ based helpers that work with the JSONassert and JsonPath
 libraries to check that JSON is as expected. The `JacksonHelper`, `GsonHelper` and
 `BasicJsonTester` classes can be used for Jackson, Gson and Strings respectively. Any
-helper fields on the test class will be automatically initialized when using `@JsonTest`.
+helper fields on the test class can be `@Autowired` when using `@JsonTest`.
 
 [source,java,indent=0]
 ----
 	import org.junit.*;
 	import org.junit.runner.*;
+	import org.springframework.beans.factory.annotation.*;
 	import org.springframework.boot.test.autoconfigure.json.*;
 	import org.springframework.boot.test.context.*;
 	import org.springframework.boot.test.json.*;
@@ -5028,6 +5029,7 @@ helper fields on the test class will be automatically initialized when using `@J
 	@JsonTest
 	public class MyJsonTests {
 
+		@Autowired
 		private JacksonTester<VehicleDetails> json;
 
 		@Test
@@ -19,6 +19,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.json.JsonTest;
 import org.springframework.boot.test.json.JacksonTester;
 import org.springframework.test.context.junit4.SpringRunner;
@@ -34,6 +35,7 @@
 @JsonTest
 public class VehicleDetailsJsonTests {
 
+	@Autowired
 	private JacksonTester<VehicleDetails> json;
 
 	@Test
@@ -18,42 +18,34 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
-import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.test.autoconfigure.properties.PropertyMapping;
 import org.springframework.boot.test.json.BasicJsonTester;
 import org.springframework.boot.test.json.GsonTester;
 import org.springframework.boot.test.json.JacksonTester;
-import org.springframework.context.ApplicationContext;
-import org.springframework.test.context.TestExecutionListeners;
-import org.springframework.test.context.TestExecutionListeners.MergeMode;
 
 /**
  * Annotation that can be applied to a test class to enable and configure
  * auto-configuration of JSON testers.
- * <p>
- * NOTE: {@code @AutoConfigureJsonTesters} works in conjunction with
- * {@link JsonTesterInitializationTestExecutionListener}. If you declare your own
- * {@link TestExecutionListeners @TestExecutionListeners} and don't
- * {@link MergeMode#MERGE_WITH_DEFAULTS merge with defaults} you must include
- * {@link JsonTesterInitializationTestExecutionListener} to use this annotation.
  *
  * @author Phillip Webb
- * @see JsonTesterInitializationTestExecutionListener
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Inherited
+@ImportAutoConfiguration
+@PropertyMapping(""spring.test.jsontesters"")
 public @interface AutoConfigureJsonTesters {
 
 	/**
-	 * If {@link BasicJsonTester}, {@link JacksonTester} and {@link GsonTester} fields
-	 * should be initialized using marshallers from the {@link ApplicationContext}.
-	 * @return if JSON tester fields should be initialized
+	 * If {@link BasicJsonTester}, {@link JacksonTester} and {@link GsonTester} beans
+	 * should be registered. Defaults to {@code true}
+	 * @return if tester support is enabled
 	 */
-	boolean initFields() default true;
+	boolean enabled() default true;
 
 }
@@ -1,174 +0,0 @@
-/*
- * Copyright 2012-2016 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.springframework.boot.test.autoconfigure.json;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Field;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.gson.Gson;
-
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.ObjectFactory;
-import org.springframework.boot.test.json.BasicJsonTester;
-import org.springframework.boot.test.json.GsonTester;
-import org.springframework.boot.test.json.JacksonTester;
-import org.springframework.core.annotation.AnnotatedElementUtils;
-import org.springframework.test.context.TestContext;
-import org.springframework.test.context.TestExecutionListener;
-import org.springframework.test.context.support.AbstractTestExecutionListener;
-import org.springframework.util.ClassUtils;
-import org.springframework.util.ReflectionUtils;
-import org.springframework.util.ReflectionUtils.FieldCallback;
-
-/**
- * {@link TestExecutionListener} to initialize JSON tester fields.
- *
- * @author Phillip Webb
- * @since 1.4.0
- */
-public class JsonTesterInitializationTestExecutionListener
-		extends AbstractTestExecutionListener {
-
-	private static final String ASSERTJ_CLASS = ""org.assertj.core.api.Assert"";
-
-	private static final Map<String, Class<?>> INITIALIZERS;
-
-	static {
-		Map<String, Class<?>> initializers = new LinkedHashMap<String, Class<?>>();
-		initializers.put(""com.fasterxml.jackson.databind.ObjectMapper"",
-				JacksonInitializer.class);
-		initializers.put(""com.google.gson.Gson"", GsonInitializer.class);
-		INITIALIZERS = Collections.unmodifiableMap(initializers);
-	}
-
-	@Override
-	public void prepareTestInstance(TestContext testContext) throws Exception {
-		ClassLoader classLoader = getClass().getClassLoader();
-		if (ClassUtils.isPresent(ASSERTJ_CLASS, classLoader)
-				&& shouldInitializeFields(testContext)) {
-			initializeBasicJsonTesterFields(testContext);
-			initializeJsonMarshalTesterFields(classLoader, testContext);
-		}
-	}
-
-	private boolean shouldInitializeFields(TestContext testContext) {
-		AutoConfigureJsonTesters annotation = AnnotatedElementUtils.getMergedAnnotation(
-				testContext.getTestClass(), AutoConfigureJsonTesters.class);
-		return (annotation != null && annotation.initFields());
-	}
-
-	private void initializeBasicJsonTesterFields(final TestContext testContext) {
-		ReflectionUtils.doWithFields(testContext.getTestClass(), new FieldCallback() {
-
-			@Override
-			public void doWith(Field field)
-					throws IllegalArgumentException, IllegalAccessException {
-				if (BasicJsonTester.class.isAssignableFrom(field.getType())) {
-					setupField(field);
-				}
-			}
-
-			private void setupField(Field field) {
-				ReflectionUtils.makeAccessible(field);
-				Object existingInstance = ReflectionUtils.getField(field,
-						testContext.getTestInstance());
-				if (existingInstance == null) {
-					ReflectionUtils.setField(field, testContext.getTestInstance(),
-							new BasicJsonTester(testContext.getTestClass()));
-				}
-			}
-
-		});
-	}
-
-	private void initializeJsonMarshalTesterFields(ClassLoader classLoader,
-			TestContext testContext) {
-		for (Map.Entry<String, Class<?>> entry : INITIALIZERS.entrySet()) {
-			if (ClassUtils.isPresent(entry.getKey(), classLoader)) {
-				initializeJsonMarshalTesterFields(classLoader, testContext,
-						entry.getKey(), entry.getValue());
-			}
-		}
-	}
-
-	@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
-	private void initializeJsonMarshalTesterFields(ClassLoader classLoader,
-			TestContext testContext, String marshallerClassName, Class<?> initializer) {
-		try {
-			Constructor<?> constructor = initializer.getDeclaredConstructor();
-			ReflectionUtils.makeAccessible(constructor);
-			initializeJsonMarshalTesterFields(testContext,
-					ClassUtils.resolveClassName(marshallerClassName, classLoader),
-					(Initializer) constructor.newInstance());
-		}
-		catch (Throwable ex) {
-			throw new IllegalStateException(ex);
-		}
-	}
-
-	private <T> void initializeJsonMarshalTesterFields(final TestContext testContext,
-			final Class<T> marshallerClass, Initializer<T> initializer) {
-		initializer.initialize(testContext, new ObjectFactory<T>() {
-
-			@Override
-			public T getObject() throws BeansException {
-				return testContext.getApplicationContext().getBean(marshallerClass);
-			}
-
-		});
-	}
-
-	/**
-	 * Strategy used to initialize JSON testers without cause class not found exceptions.
-	 * @param <M> the marshaller type
-	 */
-	interface Initializer<M> {
-
-		void initialize(TestContext testContext, ObjectFactory<M> marshaller);
-
-	}
-
-	/**
-	 * {@link Initializer} for {@link JacksonTester}.
-	 */
-	static class JacksonInitializer implements Initializer<ObjectMapper> {
-
-		@Override
-		public void initialize(TestContext testContext,
-				ObjectFactory<ObjectMapper> marshaller) {
-			JacksonTester.initFields(testContext.getTestInstance(), marshaller);
-		}
-
-	}
-
-	/**
-	 * {@link Initializer} for {@link GsonTester}.
-	 */
-	static class GsonInitializer implements Initializer<Gson> {
-
-		@Override
-		public void initialize(TestContext testContext, ObjectFactory<Gson> marshaller) {
-			GsonTester.initFields(testContext.getTestInstance(), marshaller);
-		}
-
-	}
-
-}
@@ -0,0 +1,171 @@
+/*
+ * Copyright 2012-2016 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.boot.test.autoconfigure.json;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.gson.Gson;
+
+import org.springframework.beans.BeanUtils;
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.FactoryBean;
+import org.springframework.beans.factory.config.BeanPostProcessor;
+import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.test.json.AbstractJsonMarshalTester;
+import org.springframework.boot.test.json.BasicJsonTester;
+import org.springframework.boot.test.json.GsonTester;
+import org.springframework.boot.test.json.JacksonTester;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Scope;
+import org.springframework.core.ResolvableType;
+import org.springframework.test.util.ReflectionTestUtils;
+import org.springframework.util.ReflectionUtils;
+import org.springframework.util.ReflectionUtils.FieldCallback;
+
+/**
+ * Auto-configuration for Json testers.
+ *
+ * @author Phillip Webb
+ * @see AutoConfigureJsonTesters
+ * @since 1.4.0
+ */
+@Configuration
+@ConditionalOnClass(name = ""org.assertj.core.api.Assert"")
+@ConditionalOnProperty(""spring.test.jsontesters.enabled"")
+public class JsonTestersAutoConfiguration {
+
+	@Bean
+	public static JsonMarshalTestersBeanPostProcessor jsonMarshalTestersBeanPostProcessor() {
+		return new JsonMarshalTestersBeanPostProcessor();
+	}
+
+	@Bean
+	@Scope(""prototype"")
+	public FactoryBean<BasicJsonTester> BasicJsonTesterFactoryBean() {
+		return new JsonTesterFactoryBean<BasicJsonTester, Void>(BasicJsonTester.class,
+				null);
+	}
+
+	@Bean
+	@Scope(""prototype"")
+	@ConditionalOnClass(ObjectMapper.class)
+	@ConditionalOnBean(ObjectMapper.class)
+	public FactoryBean<JacksonTester<?>> jacksonTesterFactoryBean(ObjectMapper mapper) {
+		return new JsonTesterFactoryBean<JacksonTester<?>, ObjectMapper>(
+				JacksonTester.class, mapper);
+	}
+
+	@Bean
+	@Scope(""prototype"")
+	@ConditionalOnClass(ObjectMapper.class)
+	@ConditionalOnBean(Gson.class)
+	public FactoryBean<GsonTester<?>> gsonTesterFactoryBean(Gson gson) {
+		return new JsonTesterFactoryBean<GsonTester<?>, Gson>(GsonTester.class, gson);
+	}
+
+	/**
+	 * {@link FactoryBean} used to create JSON Tester instances.
+	 */
+	private class JsonTesterFactoryBean<T, M> implements FactoryBean<T> {
+
+		private final Class<?> objectType;
+
+		private final M marshaller;
+
+		JsonTesterFactoryBean(Class<?> objectType, M marshaller) {
+			this.objectType = objectType;
+			this.marshaller = marshaller;
+
+		}
+
+		@Override
+		public boolean isSingleton() {
+			return false;
+		}
+
+		@Override
+		@SuppressWarnings(""unchecked"")
+		public T getObject() throws Exception {
+			if (this.marshaller == null) {
+				Constructor<?> constructor = this.objectType.getDeclaredConstructor();
+				ReflectionUtils.makeAccessible(constructor);
+				return (T) BeanUtils.instantiateClass(constructor);
+			}
+			Constructor<?>[] constructors = this.objectType.getDeclaredConstructors();
+			for (Constructor<?> constructor : constructors) {
+				if (constructor.getParameterTypes().length == 1
+						&& constructor.getParameterTypes()[0]
+								.isInstance(this.marshaller)) {
+					ReflectionUtils.makeAccessible(constructor);
+					return (T) BeanUtils.instantiateClass(constructor, this.marshaller);
+				}
+			}
+			throw new IllegalStateException(
+					this.objectType + "" does not have a usable constructor"");
+		}
+
+		@Override
+		public Class<?> getObjectType() {
+			return this.objectType;
+		}
+
+	}
+
+	/**
+	 * {@link BeanPostProcessor} used to initialize JSON testers.
+	 */
+	private static class JsonMarshalTestersBeanPostProcessor
+			extends InstantiationAwareBeanPostProcessorAdapter {
+
+		@Override
+		public Object postProcessAfterInitialization(final Object bean, String beanName)
+				throws BeansException {
+
+			ReflectionUtils.doWithFields(bean.getClass(), new FieldCallback() {
+
+				@Override
+				public void doWith(Field field)
+						throws IllegalArgumentException, IllegalAccessException {
+					processFiled(bean, field);
+				}
+
+			});
+			return bean;
+		}
+
+		private void processFiled(Object bean, Field field) {
+			if (AbstractJsonMarshalTester.class.isAssignableFrom(field.getType())
+					|| BasicJsonTester.class.isAssignableFrom(field.getType())) {
+				ResolvableType type = ResolvableType.forField(field).getGeneric();
+				ReflectionUtils.makeAccessible(field);
+				Object tester = ReflectionUtils.getField(field, bean);
+				if (tester != null) {
+					ReflectionTestUtils.invokeMethod(tester, ""initialize"",
+							bean.getClass(), type);
+				}
+			}
+		}
+
+	}
+
+}
@@ -17,6 +17,10 @@ org.springframework.boot.test.autoconfigure.json.AutoConfigureJson=\
 org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\
 org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration
 
+# AutoConfigureJsonTesters auto-configuration imports
+org.springframework.boot.test.autoconfigure.json.AutoConfigureJsonTesters=\
+org.springframework.boot.test.autoconfigure.json.JsonTestersAutoConfiguration
+
 # AutoConfigureMockMvc auto-configuration imports
 org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc=\
 org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration,\
@@ -69,6 +73,5 @@ org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCus
 # Test Execution Listeners
 org.springframework.test.context.TestExecutionListener=\
 org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener,\
-org.springframework.boot.test.autoconfigure.json.JsonTesterInitializationTestExecutionListener,\
 org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener,\
 org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener
@@ -19,6 +19,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.json.BasicJsonTester;
 import org.springframework.boot.test.json.GsonTester;
 import org.springframework.boot.test.json.JacksonTester;
@@ -35,12 +36,16 @@
 @JsonTest
 public class JsonTestIntegrationTests {
 
+	@Autowired
 	private BasicJsonTester basicJson;
 
+	@Autowired
 	private JacksonTester<ExampleBasicObject> jacksonBasicJson;
 
+	@Autowired
 	private JacksonTester<ExampleCustomObject> jacksonCustomJson;
 
+	@Autowired
 	private GsonTester<ExampleBasicObject> gsonJson;
 
 	@Test
@@ -19,6 +19,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.json.BasicJsonTester;
 import org.springframework.boot.test.json.GsonTester;
 import org.springframework.boot.test.json.JacksonTester;
@@ -33,13 +34,16 @@
  */
 @RunWith(SpringRunner.class)
 @JsonTest
-@AutoConfigureJsonTesters(initFields = false)
+@AutoConfigureJsonTesters(enabled = false)
 public class JsonTestWithAutoConfigureJsonTestersTests {
 
+	@Autowired(required = false)
 	private BasicJsonTester basicJson;
 
+	@Autowired(required = false)
 	private JacksonTester<ExampleBasicObject> jacksonTester;
 
+	@Autowired(required = false)
 	private GsonTester<ExampleBasicObject> gsonTester;
 
 	@Test
@@ -1,179 +0,0 @@
-/*
- * Copyright 2012-2016 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.springframework.boot.test.autoconfigure.json;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.gson.GsonBuilder;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.ExpectedException;
-
-import org.springframework.boot.test.json.BasicJsonTester;
-import org.springframework.boot.test.json.GsonTester;
-import org.springframework.boot.test.json.JacksonTester;
-import org.springframework.context.support.StaticApplicationContext;
-import org.springframework.test.context.TestContext;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.BDDMockito.given;
-import static org.mockito.Mockito.mock;
-
-/**
- * Tests for {@link JsonTesterInitializationTestExecutionListener}.
- *
- * @author Phillip Webb
- */
-public class JsonTesterInitializationTestExecutionListenerTests {
-
-	@Rule
-	public ExpectedException thrown = ExpectedException.none();
-
-	private JsonTesterInitializationTestExecutionListener listener = new JsonTesterInitializationTestExecutionListener();
-
-	@Test
-	public void prepareTestContextShouldInitializeBasicJsonTester() throws Exception {
-		WithBasicJsonTester instance = new WithBasicJsonTester();
-		this.listener.prepareTestInstance(mockTestContext(instance));
-		assertThat(instance.tester).isNotNull();
-	}
-
-	@Test
-	public void prepareTestContextShouldInitializeJacksonTester() throws Exception {
-		WithJacksonTester instance = new WithJacksonTester();
-		this.listener.prepareTestInstance(mockTestContext(instance, new ObjectMapper()));
-		assertThat(instance.tester).isNotNull();
-	}
-
-	@Test
-	public void prepareTestContextShouldInitializeGsonTester() throws Exception {
-		WithGsonTester instance = new WithGsonTester();
-		this.listener.prepareTestInstance(
-				mockTestContext(instance, new GsonBuilder().create()));
-		assertThat(instance.tester).isNotNull();
-	}
-
-	@Test
-	public void prepareTestContextWhenInitFieldsFalseShouldNotInitializeTesters()
-			throws Exception {
-		WithInitFieldsFalse instance = new WithInitFieldsFalse();
-		this.listener.prepareTestInstance(mockTestContext(instance, new ObjectMapper()));
-		assertThat(instance.basicTester).isNull();
-		assertThat(instance.jacksonTester).isNull();
-		assertThat(instance.gsonTester).isNull();
-	}
-
-	@Test
-	public void prepareTestContextWhenInitFieldsTrueShouldInitializeTesters()
-			throws Exception {
-		WithInitFieldsTrue instance = new WithInitFieldsTrue();
-		this.listener.prepareTestInstance(mockTestContext(instance));
-		assertThat(instance.tester).isNotNull();
-	}
-
-	@Test
-	public void prepareTestContextWhenMissingAnnotationShouldNotInitializeTesters()
-			throws Exception {
-		WithoutAnnotation instance = new WithoutAnnotation();
-		this.listener.prepareTestInstance(mockTestContext(instance));
-		assertThat(instance.basicTester).isNull();
-		assertThat(instance.jacksonTester).isNull();
-		assertThat(instance.gsonTester).isNull();
-	}
-
-	@Test
-	public void prepareTestContextWhenHasJacksonTesterButNoObjectMapperBeanShouldThrowException()
-			throws Exception {
-		WithJacksonTester instance = new WithJacksonTester();
-		this.thrown.expect(IllegalStateException.class);
-		this.thrown.expectMessage(""ObjectMapper"");
-		this.listener.prepareTestInstance(mockTestContext(instance));
-	}
-
-	@Test
-	public void prepareTestContextWhenHasJacksonTesterButNoGsonBeanShouldThrowException()
-			throws Exception {
-		WithGsonTester instance = new WithGsonTester();
-		this.thrown.expect(IllegalStateException.class);
-		this.thrown.expectMessage(""Gson"");
-		this.listener.prepareTestInstance(mockTestContext(instance));
-	}
-
-	private TestContext mockTestContext(Object testInstance) {
-		return mockTestContext(testInstance, null);
-	}
-
-	@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
-	private TestContext mockTestContext(Object testInstance, Object bean) {
-		TestContext testContext = mock(TestContext.class);
-		StaticApplicationContext applicationContext = new StaticApplicationContext();
-		if (bean != null) {
-			applicationContext.getBeanFactory().registerSingleton(""bean"", bean);
-		}
-		given(testContext.getApplicationContext()).willReturn(applicationContext);
-		given(testContext.getTestClass()).willReturn((Class) testInstance.getClass());
-		given(testContext.getTestInstance()).willReturn(testInstance);
-		return testContext;
-	}
-
-	@AutoConfigureJsonTesters
-	static class WithBasicJsonTester {
-
-		private BasicJsonTester tester;
-
-	}
-
-	@AutoConfigureJsonTesters
-	static class WithJacksonTester {
-
-		private JacksonTester<Object> tester;
-	}
-
-	@AutoConfigureJsonTesters
-	static class WithGsonTester {
-
-		private GsonTester<Object> tester;
-	}
-
-	@AutoConfigureJsonTesters(initFields = false)
-	static class WithInitFieldsFalse {
-
-		private BasicJsonTester basicTester;
-
-		private JacksonTester<Object> jacksonTester;
-
-		private GsonTester<Object> gsonTester;
-
-	}
-
-	@AutoConfigureJsonTesters(initFields = true)
-	static class WithInitFieldsTrue {
-
-		private BasicJsonTester tester;
-
-	}
-
-	static class WithoutAnnotation {
-
-		private BasicJsonTester basicTester;
-
-		private JacksonTester<Object> jacksonTester;
-
-		private GsonTester<Object> gsonTester;
-
-	}
-
-}
@@ -70,9 +70,15 @@
  */
 public abstract class AbstractJsonMarshalTester<T> {
 
-	private final Class<?> resourceLoadClass;
+	private Class<?> resourceLoadClass;
 
-	private final ResolvableType type;
+	private ResolvableType type;
+
+	/**
+	 * Create a new uninitialized {@link AbstractJsonMarshalTester} instance.
+	 */
+	protected AbstractJsonMarshalTester() {
+	}
 
 	/**
 	 * Create a new {@link AbstractJsonMarshalTester} instance.
@@ -83,8 +89,20 @@ public abstract class AbstractJsonMarshalTester<T> {
 	public AbstractJsonMarshalTester(Class<?> resourceLoadClass, ResolvableType type) {
 		Assert.notNull(resourceLoadClass, ""ResourceLoadClass must not be null"");
 		Assert.notNull(type, ""Type must not be null"");
-		this.resourceLoadClass = resourceLoadClass;
-		this.type = type;
+		initialize(resourceLoadClass, type);
+	}
+
+	/**
+	 * Initialize the marshal tester for use.
+	 * @param resourceLoadClass the source class used when loading relative classpath
+	 * resources
+	 * @param type the type under test
+	 */
+	protected final void initialize(Class<?> resourceLoadClass, ResolvableType type) {
+		if (this.resourceLoadClass == null && this.type == null) {
+			this.resourceLoadClass = resourceLoadClass;
+			this.type = type;
+		}
 	}
 
 	/**
@@ -102,6 +120,7 @@ protected final ResolvableType getType() {
 	 * @throws IOException on write error
 	 */
 	public JsonContent<T> write(T value) throws IOException {
+		verify();
 		Assert.notNull(value, ""Value must not be null"");
 		String json = writeObject(value, this.type);
 		return new JsonContent<T>(this.resourceLoadClass, this.type, json);
@@ -114,6 +133,7 @@ public JsonContent<T> write(T value) throws IOException {
 	 * @throws IOException on parse error
 	 */
 	public T parseObject(byte[] jsonBytes) throws IOException {
+		verify();
 		return parse(jsonBytes).getObject();
 	}
 
@@ -124,6 +144,7 @@ public T parseObject(byte[] jsonBytes) throws IOException {
 	 * @throws IOException on parse error
 	 */
 	public ObjectContent<T> parse(byte[] jsonBytes) throws IOException {
+		verify();
 		Assert.notNull(jsonBytes, ""JsonBytes must not be null"");
 		return read(new ByteArrayResource(jsonBytes));
 	}
@@ -135,6 +156,7 @@ public ObjectContent<T> parse(byte[] jsonBytes) throws IOException {
 	 * @throws IOException on parse error
 	 */
 	public T parseObject(String jsonString) throws IOException {
+		verify();
 		return parse(jsonString).getObject();
 	}
 
@@ -145,6 +167,7 @@ public T parseObject(String jsonString) throws IOException {
 	 * @throws IOException on parse error
 	 */
 	public ObjectContent<T> parse(String jsonString) throws IOException {
+		verify();
 		Assert.notNull(jsonString, ""JsonString must not be null"");
 		return read(new StringReader(jsonString));
 	}
@@ -157,6 +180,7 @@ public ObjectContent<T> parse(String jsonString) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public T readObject(String resourcePath) throws IOException {
+		verify();
 		return read(resourcePath).getObject();
 	}
 
@@ -168,6 +192,7 @@ public T readObject(String resourcePath) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public ObjectContent<T> read(String resourcePath) throws IOException {
+		verify();
 		Assert.notNull(resourcePath, ""ResourcePath must not be null"");
 		return read(new ClassPathResource(resourcePath, this.resourceLoadClass));
 	}
@@ -179,6 +204,7 @@ public ObjectContent<T> read(String resourcePath) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public T readObject(File file) throws IOException {
+		verify();
 		return read(file).getObject();
 	}
 
@@ -189,6 +215,7 @@ public T readObject(File file) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public ObjectContent<T> read(File file) throws IOException {
+		verify();
 		Assert.notNull(file, ""File must not be null"");
 		return read(new FileSystemResource(file));
 	}
@@ -200,6 +227,7 @@ public ObjectContent<T> read(File file) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public T readObject(InputStream inputStream) throws IOException {
+		verify();
 		return read(inputStream).getObject();
 	}
 
@@ -210,6 +238,7 @@ public T readObject(InputStream inputStream) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public ObjectContent<T> read(InputStream inputStream) throws IOException {
+		verify();
 		Assert.notNull(inputStream, ""InputStream must not be null"");
 		return read(new InputStreamResource(inputStream));
 	}
@@ -221,6 +250,7 @@ public ObjectContent<T> read(InputStream inputStream) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public T readObject(Resource resource) throws IOException {
+		verify();
 		return read(resource).getObject();
 	}
 
@@ -231,6 +261,7 @@ public T readObject(Resource resource) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public ObjectContent<T> read(Resource resource) throws IOException {
+		verify();
 		Assert.notNull(resource, ""Resource must not be null"");
 		InputStream inputStream = resource.getInputStream();
 		T object = readObject(inputStream, this.type);
@@ -245,6 +276,7 @@ public ObjectContent<T> read(Resource resource) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public T readObject(Reader reader) throws IOException {
+		verify();
 		return read(reader).getObject();
 	}
 
@@ -255,6 +287,7 @@ public T readObject(Reader reader) throws IOException {
 	 * @throws IOException on read error
 	 */
 	public ObjectContent<T> read(Reader reader) throws IOException {
+		verify();
 		Assert.notNull(reader, ""Reader must not be null"");
 		T object = readObject(reader, this.type);
 		closeQuietly(reader);
@@ -269,6 +302,12 @@ private void closeQuietly(Closeable closeable) {
 		}
 	}
 
+	private void verify() {
+		Assert.state(this.resourceLoadClass != null,
+				""Unitialized JsonMarshalTester (ResourceLoadClass is null)"");
+		Assert.state(this.type != null, ""Unitialized JsonMarshalTester (Type is null)"");
+	}
+
 	/**
 	 * Write the specified object to a JSON string.
 	 * @param value the source value (never {@code null})
@@ -19,6 +19,7 @@
 import java.io.File;
 import java.io.InputStream;
 
+import org.springframework.core.ResolvableType;
 import org.springframework.core.io.Resource;
 import org.springframework.util.Assert;
 
@@ -45,7 +46,13 @@
  */
 public class BasicJsonTester {
 
-	private final JsonLoader loader;
+	private JsonLoader loader;
+
+	/**
+	 * Create a new uninialized {@link BasicJsonTester} instance.
+	 */
+	protected BasicJsonTester() {
+	}
 
 	/**
 	 * Create a new {@link BasicJsonTester} instance.
@@ -56,6 +63,18 @@ public BasicJsonTester(Class<?> resourceLoadClass) {
 		this.loader = new JsonLoader(resourceLoadClass);
 	}
 
+	/**
+	 * Initialize the marshal tester for use.
+	 * @param resourceLoadClass the source class used when loading relative classpath
+	 * resources
+	 * @param type the type under test
+	 */
+	protected final void initialize(Class<?> resourceLoadClass, ResolvableType type) {
+		if (this.loader == null) {
+			this.loader = new JsonLoader(resourceLoadClass);
+		}
+	}
+
 	/**
 	 * Create JSON content from the specified String source. The source can contain the
 	 * JSON itself or, if it ends with {@code .json}, the name of a resource to be loaded
@@ -64,6 +83,7 @@ public BasicJsonTester(Class<?> resourceLoadClass) {
 	 * @return the JSON content
 	 */
 	public JsonContent<Object> from(CharSequence source) {
+		verify();
 		return getJsonContent(this.loader.getJson(source));
 	}
 
@@ -74,6 +94,7 @@ public JsonContent<Object> from(CharSequence source) {
 	 * @return the JSON content
 	 */
 	public JsonContent<Object> from(String path, Class<?> resourceLoadClass) {
+		verify();
 		return getJsonContent(this.loader.getJson(path, resourceLoadClass));
 	}
 
@@ -83,6 +104,7 @@ public JsonContent<Object> from(String path, Class<?> resourceLoadClass) {
 	 * @return the JSON content
 	 */
 	public JsonContent<Object> from(byte[] source) {
+		verify();
 		return getJsonContent(this.loader.getJson(source));
 	}
 
@@ -92,6 +114,7 @@ public JsonContent<Object> from(byte[] source) {
 	 * @return the JSON content
 	 */
 	public JsonContent<Object> from(File source) {
+		verify();
 		return getJsonContent(this.loader.getJson(source));
 	}
 
@@ -101,6 +124,7 @@ public JsonContent<Object> from(File source) {
 	 * @return the JSON content
 	 */
 	public JsonContent<Object> from(InputStream source) {
+		verify();
 		return getJsonContent(this.loader.getJson(source));
 	}
 
@@ -110,9 +134,14 @@ public JsonContent<Object> from(InputStream source) {
 	 * @return the JSON content
 	 */
 	public JsonContent<Object> from(Resource source) {
+		verify();
 		return getJsonContent(this.loader.getJson(source));
 	}
 
+	private void verify() {
+		Assert.state(this.loader != null, ""Unitialized BasicJsonTester"");
+	}
+
 	private JsonContent<Object> getJsonContent(String json) {
 		return new JsonContent<Object>(this.loader.getResourceLoadClass(), null, json);
 	}
@@ -57,6 +57,15 @@ public class GsonTester<T> extends AbstractJsonMarshalTester<T> {
 
 	private final Gson gson;
 
+	/**
+	 * Create a new uninitialized {@link GsonTester} instance.
+	 * @param gson the Gson instance
+	 */
+	protected GsonTester(Gson gson) {
+		Assert.notNull(gson, ""Gson must not be null"");
+		this.gson = gson;
+	}
+
 	/**
 	 * Create a new {@link GsonTester} instance.
 	 * @param resourceLoadClass the source class used to load resources
@@ -59,6 +59,15 @@ public class JacksonTester<T> extends AbstractJsonMarshalTester<T> {
 
 	private final ObjectMapper objectMapper;
 
+	/**
+	 * Create a new {@link JacksonTester} instance.
+	 * @param objectMapper the Jackson object mapper
+	 */
+	protected JacksonTester(ObjectMapper objectMapper) {
+		Assert.notNull(objectMapper, ""ObjectMapper must not be null"");
+		this.objectMapper = objectMapper;
+	}
+
 	/**
 	 * Create a new {@link JacksonTester} instance.
 	 * @param resourceLoadClass the source class used to load resources
"
https://github.com/spring-projects/spring-boot/commit/12724bf33211d68899d710fda376bd5636731e4c,"Fix ordering of keys in PropertySourcesPropertyValues  <enter> Since  @ConfigurationProperties  binding uses a single instance of PropertySourcesPropertyValues per bean, there doesn't seem to be any issue with using a normal LinkedHashMap. Then the order passed in as PropertySources will be preserved. <enter>  Fixes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/12724bf33211d68899d710fda376bd5636731e4c,"@@ -19,8 +19,8 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
 
 import org.springframework.beans.MutablePropertyValues;
 import org.springframework.beans.PropertyValue;
@@ -42,7 +42,7 @@
  */
 public class PropertySourcesPropertyValues implements PropertyValues {
 
-	private final Map<String, PropertyValue> propertyValues = new ConcurrentHashMap<String, PropertyValue>();
+	private final Map<String, PropertyValue> propertyValues = new LinkedHashMap<String, PropertyValue>();
 
 	private final PropertySources propertySources;
 
@@ -16,11 +16,14 @@
 
 package org.springframework.boot.bind;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.LinkedHashMap;
 
 import org.junit.Before;
 import org.junit.Test;
+import org.springframework.beans.PropertyValue;
 import org.springframework.core.env.CompositePropertySource;
 import org.springframework.core.env.MapPropertySource;
 import org.springframework.core.env.MutablePropertySources;
@@ -61,6 +64,26 @@ public void testSize() {
 		assertEquals(1, propertyValues.getPropertyValues().length);
 	}
 
+	@Test
+	public void testOrderPreserved() {
+		LinkedHashMap<String, Object> map = new LinkedHashMap<String, Object>();
+		map.put(""one"", 1);
+		map.put(""two"", 2);
+		map.put(""three"", 3);
+		map.put(""four"", 4);
+		map.put(""five"", 5);
+		this.propertySources.addFirst(new MapPropertySource(""ordered"", map));
+		PropertySourcesPropertyValues propertyValues = new PropertySourcesPropertyValues(
+				this.propertySources);
+		PropertyValue[] values = propertyValues.getPropertyValues();
+		assertEquals(6, values.length);
+		Collection<String> names = new ArrayList<String>();
+		for (PropertyValue value : values) {
+			names.add(value.getName());
+		}
+		assertEquals(""[one, two, three, four, five, name]"", names.toString());
+	}
+
 	@Test
 	public void testNonEnumeratedValue() {
 		PropertySourcesPropertyValues propertyValues = new PropertySourcesPropertyValues(
"
https://github.com/spring-projects/spring-boot/commit/1de2316a0b4c2d5896c34b954208a4c550466f22,"Refine validator and MVC validator configuration  <enter> This commit ensures that a primary JSR 303 and Spring Validator will be exposed if the auto-configuration kicks in. As `LocalValidatorFactoryBean` exposes 3 contracts (JSR-303 `Validator` and `ValidatorFactory` as well as the `Spring` validator one), this makes sure that those types can be injected by type. <enter> `LocalValidatorFactoryBean` exposes 3 contracts and we're only checking for the absence of a `javax.validation.Validator` to auto-configure a `LocalValidatorFactoryBean`. If no standard JSR validator exists but a Spring's `Validator` exists and is primary, we shouldn't flag the auto-configured one as `@Primary`. Previous iterations on this feature have made sure that we'll auto-configure at most one `javax.validation.Validator` so not flagging it `@Primary` is no problem. <enter> This commit also restores and adds tests that validates `ValidationAutoConfiguration` will configure a JSR validator even if a Spring Validator is present. <enter> This effectively  fixes   <issue_link>  in a different way. <enter>  Closes   <issue_link>   Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/1de2316a0b4c2d5896c34b954208a4c550466f22,"@@ -0,0 +1,88 @@
+/*
+ * Copyright 2012-2017 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.springframework.boot.autoconfigure.validation;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.BeanFactory;
+import org.springframework.beans.factory.BeanFactoryAware;
+import org.springframework.beans.factory.BeanFactoryUtils;
+import org.springframework.beans.factory.config.BeanDefinition;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
+import org.springframework.core.type.AnnotationMetadata;
+import org.springframework.validation.Validator;
+import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
+
+/**
+ * Enable the {@code Primary} flag on the auto-configured validator if necessary.
+ * <p>
+ * As {@link LocalValidatorFactoryBean} exposes 3 validator related contracts and we're
+ * only checking for the absence {@link javax.validation.Validator}, we should flag the
+ * auto-configured validator as primary only if no Spring's {@link Validator} is flagged
+ * as primary.
+ *
+ * @author Stephane Nicoll
+ */
+class PrimaryDefaultValidatorPostProcessor
+		implements ImportBeanDefinitionRegistrar, BeanFactoryAware {
+
+	/**
+	 * The bean name of the auto-configured Validator.
+	 */
+	private static final String VALIDATOR_BEAN_NAME = ""defaultValidator"";
+
+	private ConfigurableListableBeanFactory beanFactory;
+
+	@Override
+	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
+		if (beanFactory instanceof ConfigurableListableBeanFactory) {
+			this.beanFactory = (ConfigurableListableBeanFactory) beanFactory;
+		}
+	}
+
+	@Override
+	public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,
+			BeanDefinitionRegistry registry) {
+		if (this.beanFactory == null) {
+			return;
+		}
+		if (!registry.containsBeanDefinition(VALIDATOR_BEAN_NAME)) {
+			return;
+		}
+		BeanDefinition def = registry.getBeanDefinition(VALIDATOR_BEAN_NAME);
+		if (def != null
+				&& this.beanFactory.isTypeMatch(VALIDATOR_BEAN_NAME, LocalValidatorFactoryBean.class)
+				&& def.getRole() == BeanDefinition.ROLE_INFRASTRUCTURE) {
+			def.setPrimary(!hasPrimarySpringValidator(registry));
+		}
+	}
+
+	private boolean hasPrimarySpringValidator(BeanDefinitionRegistry registry) {
+		String[] validatorBeans = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(
+				this.beanFactory, Validator.class, false, false);
+		for (String validatorBean : validatorBeans) {
+			BeanDefinition def = registry.getBeanDefinition(validatorBean);
+			if (def != null && def.isPrimary()) {
+				return true;
+			}
+		}
+		return false;
+	}
+
+}
+
@@ -28,6 +28,7 @@
 import org.springframework.boot.validation.MessageInterpolatorFactory;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
 import org.springframework.context.annotation.Role;
 import org.springframework.core.env.Environment;
 import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
@@ -43,12 +44,13 @@
 @Configuration
 @ConditionalOnClass(ExecutableValidator.class)
 @ConditionalOnResource(resources = ""classpath:META-INF/services/javax.validation.spi.ValidationProvider"")
+@Import(PrimaryDefaultValidatorPostProcessor.class)
 public class ValidationAutoConfiguration {
 
 	@Bean
 	@Role(BeanDefinition.ROLE_INFRASTRUCTURE)
-	@ConditionalOnMissingBean
-	public static Validator jsr303Validator() {
+	@ConditionalOnMissingBean(Validator.class)
+	public static LocalValidatorFactoryBean defaultValidator() {
 		LocalValidatorFactoryBean factoryBean = new LocalValidatorFactoryBean();
 		MessageInterpolatorFactory interpolatorFactory = new MessageInterpolatorFactory();
 		factoryBean.setMessageInterpolator(interpolatorFactory.getObject());
@@ -31,15 +31,20 @@
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Primary;
 import org.springframework.validation.annotation.Validated;
+import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
 import org.springframework.validation.beanvalidation.MethodValidationPostProcessor;
+import org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 
 /**
  * Tests for {@link ValidationAutoConfiguration}.
  *
  * @author Stephane Nicoll
+ * @author Phillip Webb
  */
 public class ValidationAutoConfigurationTests {
 
@@ -55,6 +60,95 @@ public void close() {
 		}
 	}
 
+	@Test
+	public void validationAutoConfigurationShouldConfigureDefaultValidator() {
+		load(Config.class);
+		String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class);
+		String[] springValidatorNames = this.context
+				.getBeanNamesForType(org.springframework.validation.Validator.class);
+		assertThat(jsrValidatorNames).containsExactly(""defaultValidator"");
+		assertThat(springValidatorNames).containsExactly(""defaultValidator"");
+		Validator jsrValidator = this.context.getBean(Validator.class);
+		org.springframework.validation.Validator springValidator = this.context
+				.getBean(org.springframework.validation.Validator.class);
+		assertThat(jsrValidator).isInstanceOf(LocalValidatorFactoryBean.class);
+		assertThat(jsrValidator).isEqualTo(springValidator);
+		assertThat(isPrimaryBean(""defaultValidator"")).isTrue();
+	}
+
+	@Test
+	public void validationAutoConfigurationWhenUserProvidesValidatorShouldBackOff() {
+		load(UserDefinedValidatorConfig.class);
+		String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class);
+		String[] springValidatorNames = this.context
+				.getBeanNamesForType(org.springframework.validation.Validator.class);
+		assertThat(jsrValidatorNames).containsExactly(""customValidator"");
+		assertThat(springValidatorNames).containsExactly(""customValidator"");
+		org.springframework.validation.Validator springValidator = this.context
+				.getBean(org.springframework.validation.Validator.class);
+		Validator jsrValidator = this.context.getBean(Validator.class);
+		assertThat(jsrValidator).isInstanceOf(OptionalValidatorFactoryBean.class);
+		assertThat(jsrValidator).isEqualTo(springValidator);
+		assertThat(isPrimaryBean(""customValidator"")).isFalse();
+	}
+
+	@Test
+	public void validationAutoConfigurationWhenUserProvidesDefaultValidatorShouldNotEnablePrimary() {
+		load(UserDefinedDefaultValidatorConfig.class);
+		String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class);
+		String[] springValidatorNames = this.context
+				.getBeanNamesForType(org.springframework.validation.Validator.class);
+		assertThat(jsrValidatorNames).containsExactly(""defaultValidator"");
+		assertThat(springValidatorNames).containsExactly(""defaultValidator"");
+		assertThat(isPrimaryBean(""defaultValidator"")).isFalse();
+	}
+
+	@Test
+	public void validationAutoConfigurationWhenUserProvidesJsrValidatorShouldBackOff() {
+		load(UserDefinedJsrValidatorConfig.class);
+		String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class);
+		String[] springValidatorNames = this.context
+				.getBeanNamesForType(org.springframework.validation.Validator.class);
+		assertThat(jsrValidatorNames).containsExactly(""customValidator"");
+		assertThat(springValidatorNames).isEmpty();
+		assertThat(isPrimaryBean(""customValidator"")).isFalse();
+	}
+
+	@Test
+	public void validationAutoConfigurationWhenUserProvidesSpringValidatorShouldCreateJsrValidator() {
+		load(UserDefinedSpringValidatorConfig.class);
+		String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class);
+		String[] springValidatorNames = this.context
+				.getBeanNamesForType(org.springframework.validation.Validator.class);
+		assertThat(jsrValidatorNames).containsExactly(""defaultValidator"");
+		assertThat(springValidatorNames).containsExactly(
+				""customValidator"", ""anotherCustomValidator"", ""defaultValidator"");
+		Validator jsrValidator = this.context.getBean(Validator.class);
+		org.springframework.validation.Validator springValidator = this.context
+				.getBean(org.springframework.validation.Validator.class);
+		assertThat(jsrValidator).isInstanceOf(LocalValidatorFactoryBean.class);
+		assertThat(jsrValidator).isEqualTo(springValidator);
+		assertThat(isPrimaryBean(""defaultValidator"")).isTrue();
+	}
+
+	@Test
+	public void validationAutoConfigurationWhenUserProvidesPrimarySpringValidatorShouldRemovePrimaryFlag() {
+		load(UserDefinedPrimarySpringValidatorConfig.class);
+		String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class);
+		String[] springValidatorNames = this.context
+				.getBeanNamesForType(org.springframework.validation.Validator.class);
+		assertThat(jsrValidatorNames).containsExactly(""defaultValidator"");
+		assertThat(springValidatorNames).containsExactly(
+				""customValidator"", ""anotherCustomValidator"", ""defaultValidator"");
+		Validator jsrValidator = this.context.getBean(Validator.class);
+		org.springframework.validation.Validator springValidator = this.context
+				.getBean(org.springframework.validation.Validator.class);
+		assertThat(jsrValidator).isInstanceOf(LocalValidatorFactoryBean.class);
+		assertThat(springValidator).isEqualTo(
+				this.context.getBean(""anotherCustomValidator""));
+		assertThat(isPrimaryBean(""defaultValidator"")).isFalse();
+	}
+
 	@Test
 	public void validationIsEnabled() {
 		load(SampleService.class);
@@ -104,7 +198,11 @@ public void userDefinedMethodValidationPostProcessorTakesPrecedence() {
 						.getPropertyValue(""validator""));
 	}
 
-	public void load(Class<?> config, String... environment) {
+	private boolean isPrimaryBean(String beanName) {
+		return this.context.getBeanDefinition(beanName).isPrimary();
+	}
+
+	private void load(Class<?> config, String... environment) {
 		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
 		EnvironmentTestUtils.addEnvironment(ctx, environment);
 		if (config != null) {
@@ -115,6 +213,72 @@ public void load(Class<?> config, String... environment) {
 		this.context = ctx;
 	}
 
+	@Configuration
+	static class Config {
+
+	}
+
+	@Configuration
+	static class UserDefinedValidatorConfig {
+
+		@Bean
+		public OptionalValidatorFactoryBean customValidator() {
+			return new OptionalValidatorFactoryBean();
+		}
+
+	}
+
+	@Configuration
+	static class UserDefinedDefaultValidatorConfig {
+
+		@Bean
+		public OptionalValidatorFactoryBean defaultValidator() {
+			return new OptionalValidatorFactoryBean();
+		}
+
+	}
+
+	@Configuration
+	static class UserDefinedJsrValidatorConfig {
+
+		@Bean
+		public Validator customValidator() {
+			return mock(Validator.class);
+		}
+
+	}
+
+	@Configuration
+	static class UserDefinedSpringValidatorConfig {
+
+		@Bean
+		public org.springframework.validation.Validator customValidator() {
+			return mock(org.springframework.validation.Validator.class);
+		}
+
+		@Bean
+		public org.springframework.validation.Validator anotherCustomValidator() {
+			return mock(org.springframework.validation.Validator.class);
+		}
+
+	}
+
+	@Configuration
+	static class UserDefinedPrimarySpringValidatorConfig {
+
+		@Bean
+		public org.springframework.validation.Validator customValidator() {
+			return mock(org.springframework.validation.Validator.class);
+		}
+
+		@Bean
+		@Primary
+		public org.springframework.validation.Validator anotherCustomValidator() {
+			return mock(org.springframework.validation.Validator.class);
+		}
+
+	}
+
 	@Validated
 	static class SampleService {
 
@@ -39,6 +39,7 @@
 import org.springframework.beans.DirectFieldAccessor;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
+import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;
 import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter;
 import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration.WelcomePageHandlerMapping;
 import org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext;
@@ -59,6 +60,7 @@
 import org.springframework.test.util.ReflectionTestUtils;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import org.springframework.util.ObjectUtils;
 import org.springframework.util.ReflectionUtils;
 import org.springframework.util.StringUtils;
 import org.springframework.validation.Validator;
@@ -655,77 +657,126 @@ public boolean matches(Object value) {
 	}
 
 	@Test
-	public void validationNoJsr303ValidatorExposedByDefault() {
-		load();
+	public void validatorWhenNoValidatorShouldUseDefault() {
+		load(null, new Class<?>[] { ValidationAutoConfiguration.class });
 		assertThat(this.context.getBeansOfType(ValidatorFactory.class)).isEmpty();
 		assertThat(this.context.getBeansOfType(javax.validation.Validator.class))
 				.isEmpty();
-		assertThat(this.context.getBeansOfType(Validator.class)).hasSize(1);
+		String[] springValidatorBeans = this.context.getBeanNamesForType(Validator.class);
+		assertThat(springValidatorBeans).containsExactly(""mvcValidator"");
 	}
 
 	@Test
-	public void validationCustomConfigurerTakesPrecedence() {
-		load(MvcValidator.class);
+	public void validatorWhenNoCustomizationShouldUseAutoConfigured() {
+		load();
+		String[] jsrValidatorBeans = this.context
+				.getBeanNamesForType(javax.validation.Validator.class);
+		String[] springValidatorBeans = this.context.getBeanNamesForType(Validator.class);
+		assertThat(jsrValidatorBeans).containsExactly(""defaultValidator"");
+		assertThat(springValidatorBeans).containsExactly(""defaultValidator"", ""mvcValidator"");
+		Validator validator = this.context.getBean(""mvcValidator"", Validator.class);
+		assertThat(validator).isInstanceOf(WebMvcValidator.class);
+		Object defaultValidator = this.context.getBean(""defaultValidator"");
+		assertThat(((WebMvcValidator) validator).getTarget()).isSameAs(defaultValidator);
+		// Primary Spring validator is the one use by MVC behind the scenes
+		assertThat(this.context.getBean(Validator.class)).isEqualTo(defaultValidator);
+	}
+
+	@Test
+	public void validatorWithConfigurerShouldUseSpringValidator() {
+		load(MvcValidator.class, new Class<?>[] { ValidationAutoConfiguration.class });
 		assertThat(this.context.getBeansOfType(ValidatorFactory.class)).isEmpty();
 		assertThat(this.context.getBeansOfType(javax.validation.Validator.class))
 				.isEmpty();
-		assertThat(this.context.getBeansOfType(Validator.class)).hasSize(1);
-		Validator validator = this.context.getBean(Validator.class);
-		assertThat(validator)
+		String[] springValidatorBeans = this.context.getBeanNamesForType(Validator.class);
+		assertThat(springValidatorBeans).containsExactly(""mvcValidator"");
+		assertThat(this.context.getBean(""mvcValidator""))
 				.isSameAs(this.context.getBean(MvcValidator.class).validator);
 	}
 
 	@Test
-	public void validationCustomConfigurerTakesPrecedenceAndDoNotExposeJsr303() {
-		load(MvcJsr303Validator.class);
+	public void validatorWithConfigurerDoesNotExposeJsr303() {
+		load(MvcJsr303Validator.class, new Class<?>[] { ValidationAutoConfiguration.class });
 		assertThat(this.context.getBeansOfType(ValidatorFactory.class)).isEmpty();
 		assertThat(this.context.getBeansOfType(javax.validation.Validator.class))
 				.isEmpty();
-		assertThat(this.context.getBeansOfType(Validator.class)).hasSize(1);
-		Validator validator = this.context.getBean(Validator.class);
+		String[] springValidatorBeans = this.context.getBeanNamesForType(Validator.class);
+		assertThat(springValidatorBeans).containsExactly(""mvcValidator"");
+		Validator validator = this.context.getBean(""mvcValidator"", Validator.class);
 		assertThat(validator).isInstanceOf(WebMvcValidator.class);
 		assertThat(((WebMvcValidator) validator).getTarget())
 				.isSameAs(this.context.getBean(MvcJsr303Validator.class).validator);
 	}
 
 	@Test
-	public void validationJsr303CustomValidatorReusedAsSpringValidator() {
-		load(CustomValidator.class);
+	public void validatorWithConfigurerTakesPrecedence() {
+		load(MvcValidator.class);
 		assertThat(this.context.getBeansOfType(ValidatorFactory.class)).hasSize(1);
 		assertThat(this.context.getBeansOfType(javax.validation.Validator.class))
 				.hasSize(1);
-		assertThat(this.context.getBeansOfType(Validator.class)).hasSize(2);
+		String[] springValidatorBeans = this.context.getBeanNamesForType(Validator.class);
+		assertThat(springValidatorBeans).containsExactly(""defaultValidator"", ""mvcValidator"");
+		assertThat(this.context.getBean(""mvcValidator""))
+				.isSameAs(this.context.getBean(MvcValidator.class).validator);
+		// Primary Spring validator is the auto-configured one as the MVC one has been
+		// customized via a WebMvcConfigurer
+		assertThat(this.context.getBean(Validator.class))
+				.isEqualTo(this.context.getBean(""defaultValidator""));
+	}
+
+	@Test
+	public void validatorWithCustomSpringValidatorIgnored() {
+		load(CustomSpringValidator.class);
+		String[] jsrValidatorBeans = this.context
+				.getBeanNamesForType(javax.validation.Validator.class);
+		String[] springValidatorBeans = this.context.getBeanNamesForType(Validator.class);
+		assertThat(jsrValidatorBeans).containsExactly(""defaultValidator"");
+		assertThat(springValidatorBeans).containsExactly(
+				""customSpringValidator"", ""defaultValidator"", ""mvcValidator"");
 		Validator validator = this.context.getBean(""mvcValidator"", Validator.class);
 		assertThat(validator).isInstanceOf(WebMvcValidator.class);
+		Object defaultValidator = this.context.getBean(""defaultValidator"");
 		assertThat(((WebMvcValidator) validator).getTarget())
-				.isSameAs(this.context.getBean(javax.validation.Validator.class));
+				.isSameAs(defaultValidator);
+		// Primary Spring validator is the one use by MVC behind the scenes
+		assertThat(this.context.getBean(Validator.class)).isEqualTo(defaultValidator);
 	}
 
 	@Test
-	public void validationJsr303ValidatorExposedAsSpringValidator() {
-		load(Jsr303Validator.class);
+	public void validatorWithCustomJsr303ValidatorExposedAsSpringValidator() {
+		load(CustomJsr303Validator.class);
 		assertThat(this.context.getBeansOfType(ValidatorFactory.class)).isEmpty();
-		assertThat(this.context.getBeansOfType(javax.validation.Validator.class))
-				.hasSize(1);
-		assertThat(this.context.getBeansOfType(Validator.class)).hasSize(1);
+		String[] jsrValidatorBeans = this.context
+				.getBeanNamesForType(javax.validation.Validator.class);
+		String[] springValidatorBeans = this.context.getBeanNamesForType(Validator.class);
+		assertThat(jsrValidatorBeans).containsExactly(""customJsr303Validator"");
+		assertThat(springValidatorBeans).containsExactly(""mvcValidator"");
 		Validator validator = this.context.getBean(Validator.class);
 		assertThat(validator).isInstanceOf(WebMvcValidator.class);
 		SpringValidatorAdapter target = ((WebMvcValidator) validator)
 				.getTarget();
 		assertThat(new DirectFieldAccessor(target).getPropertyValue(""targetValidator""))
-				.isSameAs(this.context.getBean(javax.validation.Validator.class));
+				.isSameAs(this.context.getBean(""customJsr303Validator""));
 	}
 
 	private void load(Class<?> config, String... environment) {
+		load(config, null, environment);
+	}
+
+	private void load(Class<?> config, Class<?>[] exclude, String... environment) {
 		this.context = new AnnotationConfigEmbeddedWebApplicationContext();
 		EnvironmentTestUtils.addEnvironment(this.context, environment);
 		List<Class<?>> configClasses = new ArrayList<Class<?>>();
 		if (config != null) {
 			configClasses.add(config);
 		}
-		configClasses.addAll(Arrays.asList(Config.class, WebMvcAutoConfiguration.class,
+		configClasses.addAll(Arrays.asList(Config.class,
+				ValidationAutoConfiguration.class, WebMvcAutoConfiguration.class,
 				HttpMessageConvertersAutoConfiguration.class,
 				PropertyPlaceholderAutoConfiguration.class));
+		if (!ObjectUtils.isEmpty(exclude)) {
+			configClasses.removeAll(Arrays.asList(exclude));
+		}
 		this.context.register(configClasses.toArray(new Class<?>[configClasses.size()]));
 		this.context.refresh();
 	}
@@ -919,21 +970,21 @@ public Validator getValidator() {
 	}
 
 	@Configuration
-	static class Jsr303Validator {
+	static class CustomJsr303Validator {
 
 		@Bean
-		public javax.validation.Validator jsr303Validator() {
+		public javax.validation.Validator customJsr303Validator() {
 			return mock(javax.validation.Validator.class);
 		}
 
 	}
 
 	@Configuration
-	static class CustomValidator {
+	static class CustomSpringValidator {
 
 		@Bean
-		public Validator customValidator() {
-			return new LocalValidatorFactoryBean();
+		public Validator customSpringValidator() {
+			return mock(Validator.class);
 		}
 
 	}
"
https://github.com/spring-projects/spring-boot/commit/05e6af23cf2e60d5c61388fbb954bd56f00b9f94,Prepend without replacing in HttpMessageConverters  <enter> It was incorrect to simply replace existing instances because you can't tell from the instance which media types and java types it supports. This fix just prepends the custom converters so they get higher priority. <enter>  Fixes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/05e6af23cf2e60d5c61388fbb954bd56f00b9f94,"@@ -75,15 +75,7 @@ public HttpMessageConverters(HttpMessageConverter<?>... additionalConverters) {
 	public HttpMessageConverters(Collection<HttpMessageConverter<?>> additionalConverters) {
 		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>();
 		List<HttpMessageConverter<?>> defaultConverters = getDefaultConverters();
-		for (HttpMessageConverter<?> converter : additionalConverters) {
-			int defaultConverterIndex = indexOfItemClass(defaultConverters, converter);
-			if (defaultConverterIndex == -1) {
-				converters.add(converter);
-			}
-			else {
-				defaultConverters.set(defaultConverterIndex, converter);
-			}
-		}
+		converters.addAll(additionalConverters);
 		converters.addAll(defaultConverters);
 		this.converters = Collections.unmodifiableList(converters);
 	}
@@ -120,16 +112,6 @@ private void reorderXmlConvertersToEnd(List<HttpMessageConverter<?>> converters)
 		converters.addAll(xml);
 	}
 
-	private <E> int indexOfItemClass(List<E> list, E item) {
-		Class<? extends Object> itemClass = item.getClass();
-		for (int i = 0; i < list.size(); i++) {
-			if (list.get(i).getClass().isAssignableFrom(itemClass)) {
-				return i;
-			}
-		}
-		return -1;
-	}
-
 	@Override
 	public Iterator<HttpMessageConverter<?>> iterator() {
 		return getConverters().iterator();
@@ -69,6 +69,15 @@ public void overrideExistingConverter() {
 		MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
 		HttpMessageConverters converters = new HttpMessageConverters(converter);
 		assertTrue(converters.getConverters().contains(converter));
+		int count = 0;
+		for (HttpMessageConverter<?> httpMessageConverter : converters) {
+			if (httpMessageConverter instanceof MappingJackson2HttpMessageConverter) {
+				count++;
+			}
+		}
+		// The existing converter is still there, but with a lower priority
+		assertEquals(2, count);
+		assertEquals(0, converters.getConverters().indexOf(converter));
 	}
 
 	@Test
"
https://github.com/square/retrofit/commit/238a9e59e69d61479a4505dba5f5659a599c699f,"Doc error. `@QueryMap` with `encoded=true` will stop default url encoding. So, calling with `foo.list(ImmutableMap.of('foo', 'foo+bar'))` yields '/search?foo=foo+bar' instead of '/search?foo=foo%2Bbar'. ",https://api.github.com/repos/square/retrofit/commits/238a9e59e69d61479a4505dba5f5659a599c699f,"@@ -43,8 +43,8 @@
  * &#64;GET(""/search"")
  * Call&lt;ResponseBody> list(@QueryMap(encoded=true) Map&lt;String, String&gt; filters);
  * }</pre>
- * Calling with {@code foo.list(ImmutableMap.of(""foo"", ""foo+foo""))} yields
- * {@code /search?foo=foo%2Bbar}.
+ * Calling with {@code foo.list(ImmutableMap.of(""foo"", ""foo+bar""))} yields
+ * {@code /search?foo=foo+bar}.
  *
  * @see Query
  */
"
https://github.com/square/retrofit/commit/f4ee9e28a6380662ea0ab8a9a02adbd021ef55e8,Added more tests for RxJava Single type support  <enter> Single.toBlocking() is present since RxJava 1.0.16 version. ,https://api.github.com/repos/square/retrofit/commits/f4ee9e28a6380662ea0ab8a9a02adbd021ef55e8,"@@ -54,7 +54,7 @@
     <animal.sniffer.version>1.14</animal.sniffer.version>
 
     <!-- Adapter Dependencies -->
-    <rxjava.version>1.0.14</rxjava.version>
+    <rxjava.version>1.1.0</rxjava.version>
 
     <!-- Converter Dependencies -->
     <gson.version>2.4</gson.version>
@@ -32,10 +32,10 @@
 import rx.Observable;
 import rx.Single;
 import rx.observables.BlockingObservable;
+import rx.singles.BlockingSingle;
 
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
 
 public final class RxJavaCallAdapterFactoryTest {
@@ -236,11 +236,97 @@ interface Service {
     }
   }
 
-  @Test public void single() {
-    // TODO Better tests here. Why is there no toBlocking() on Single?
-    assertNotNull(service.singleBody());
-    assertNotNull(service.singleResponse());
-    assertNotNull(service.singleResult());
+  @Test public void singleBodySuccess200() {
+    server.enqueue(new MockResponse().setBody(""Hi""));
+
+    BlockingSingle<String> o = service.singleBody().toBlocking();
+    assertThat(o.value()).isEqualTo(""Hi"");
+  }
+
+  @Test public void singleBodySuccess404() {
+    server.enqueue(new MockResponse().setResponseCode(404));
+
+    BlockingSingle<String> o = service.singleBody().toBlocking();
+    try {
+      o.value();
+      fail();
+    } catch (RuntimeException e) {
+      Throwable cause = e.getCause();
+      assertThat(cause).isInstanceOf(HttpException.class).hasMessage(""HTTP 404 OK"");
+    }
+  }
+
+  @Test public void singleBodyFailure() {
+    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
+
+    BlockingSingle<String> o = service.singleBody().toBlocking();
+    try {
+      o.value();
+      fail();
+    } catch (RuntimeException e) {
+      assertThat(e.getCause()).isInstanceOf(IOException.class);
+    }
+  }
+
+  @Test public void singleResponseSuccess200() {
+    server.enqueue(new MockResponse().setBody(""Hi""));
+
+    BlockingSingle<Response<String>> o = service.singleResponse().toBlocking();
+    Response<String> response = o.value();
+    assertThat(response.isSuccess()).isTrue();
+    assertThat(response.body()).isEqualTo(""Hi"");
+  }
+
+  @Test public void singleResponseSuccess404() throws IOException {
+    server.enqueue(new MockResponse().setResponseCode(404).setBody(""Hi""));
+
+    BlockingSingle<Response<String>> o = service.singleResponse().toBlocking();
+    Response<String> response = o.value();
+    assertThat(response.isSuccess()).isFalse();
+    assertThat(response.errorBody().string()).isEqualTo(""Hi"");
+  }
+
+  @Test public void singleResponseFailure() {
+    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
+
+    BlockingSingle<Response<String>> o = service.singleResponse().toBlocking();
+    try {
+      o.value();
+      fail();
+    } catch (RuntimeException t) {
+      assertThat(t.getCause()).isInstanceOf(IOException.class);
+    }
+  }
+
+  @Test public void singleResultSuccess200() {
+    server.enqueue(new MockResponse().setBody(""Hi""));
+
+    BlockingSingle<Result<String>> o = service.singleResult().toBlocking();
+    Result<String> result = o.value();
+    assertThat(result.isError()).isFalse();
+    Response<String> response = result.response();
+    assertThat(response.isSuccess()).isTrue();
+    assertThat(response.body()).isEqualTo(""Hi"");
+  }
+
+  @Test public void singleResultSuccess404() throws IOException {
+    server.enqueue(new MockResponse().setResponseCode(404).setBody(""Hi""));
+
+    BlockingSingle<Result<String>> o = service.singleResult().toBlocking();
+    Result<String> result = o.value();
+    assertThat(result.isError()).isFalse();
+    Response<String> response = result.response();
+    assertThat(response.isSuccess()).isFalse();
+    assertThat(response.errorBody().string()).isEqualTo(""Hi"");
+  }
+
+  @Test public void singleResultFailure() {
+    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
+
+    BlockingSingle<Result<String>> o = service.singleResult().toBlocking();
+    Result<String> result = o.value();
+    assertThat(result.isError()).isTrue();
+    assertThat(result.error()).isInstanceOf(IOException.class);
   }
 
   static class StringConverterFactory extends Converter.Factory {
"
https://github.com/spring-projects/spring-boot/commit/09200361defde95ec48bd9169ab5db7590c9440b,"Align expectations of various JMX configurations  <enter> They all want to create an MBeanServer and when that happens user sees no MBeans, or sometimes just one set (Spring Core, Spring Integration or Spring Boot). To harmonise them we create a  @bean  of type MBeanServer and link to it in the other autoconfigs <enter>  Fixes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/09200361defde95ec48bd9169ab5db7590c9440b,"@@ -16,12 +16,15 @@
 
 package org.springframework.boot.actuate.autoconfigure;
 
+import javax.management.MBeanServer;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.actuate.endpoint.Endpoint;
 import org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
+import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -35,21 +38,22 @@
  */
 @Configuration
 @ConditionalOnExpression(""${endpoints.jmx.enabled:true} && ${spring.jmx.enabled:true}"")
-@AutoConfigureAfter({ EndpointAutoConfiguration.class })
+@AutoConfigureAfter({ EndpointAutoConfiguration.class, JmxAutoConfiguration.class })
 @EnableConfigurationProperties(EndpointMBeanExportProperties.class)
 public class EndpointMBeanExportAutoConfiguration {
 
 	@Autowired
 	EndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();
 
 	@Bean
-	public EndpointMBeanExporter endpointMBeanExporter() {
+	public EndpointMBeanExporter endpointMBeanExporter(MBeanServer server) {
 		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();
 
 		String domain = this.properties.getDomain();
 		if (StringUtils.hasText(domain)) {
 			mbeanExporter.setDomain(domain);
 		}
+		mbeanExporter.setServer(server);
 
 		mbeanExporter.setEnsureUniqueRuntimeObjectNames(this.properties.isUniqueNames());
 		mbeanExporter.setObjectNameStaticProperties(this.properties.getStaticNames());
@@ -26,6 +26,7 @@
 import org.junit.Test;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter;
+import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Configuration;
@@ -56,7 +57,8 @@ public void close() {
 	@Test
 	public void testEndpointMBeanExporterIsInstalled() {
 		this.context = new AnnotationConfigApplicationContext();
-		this.context.register(TestConfiguration.class, EndpointAutoConfiguration.class,
+		this.context.register(TestConfiguration.class, JmxAutoConfiguration.class,
+				EndpointAutoConfiguration.class,
 				EndpointMBeanExportAutoConfiguration.class);
 		this.context.refresh();
 		assertNotNull(this.context.getBean(EndpointMBeanExporter.class));
@@ -68,7 +70,8 @@ public void testEndpointMBeanExporterIsNotInstalled() {
 		environment.setProperty(""endpoints.jmx.enabled"", ""false"");
 		this.context = new AnnotationConfigApplicationContext();
 		this.context.setEnvironment(environment);
-		this.context.register(EndpointAutoConfiguration.class,
+		this.context.register(JmxAutoConfiguration.class,
+				EndpointAutoConfiguration.class,
 				EndpointMBeanExportAutoConfiguration.class);
 		this.context.refresh();
 		this.context.getBean(EndpointMBeanExporter.class);
@@ -84,7 +87,8 @@ public void testEndpointMBeanExporterWithProperties() throws IntrospectionExcept
 		environment.setProperty(""endpoints.jmx.static_names"", ""key1=value1, key2=value2"");
 		this.context = new AnnotationConfigApplicationContext();
 		this.context.setEnvironment(environment);
-		this.context.register(EndpointAutoConfiguration.class,
+		this.context.register(JmxAutoConfiguration.class,
+				EndpointAutoConfiguration.class,
 				EndpointMBeanExportAutoConfiguration.class);
 		this.context.refresh();
 		this.context.getBean(EndpointMBeanExporter.class);
@@ -101,11 +105,12 @@ public void testEndpointMBeanExporterWithProperties() throws IntrospectionExcept
 	public void testEndpointMBeanExporterInParentChild() throws IntrospectionException,
 			InstanceNotFoundException, MalformedObjectNameException, ReflectionException {
 		this.context = new AnnotationConfigApplicationContext();
-		this.context.register(EndpointAutoConfiguration.class,
+		this.context.register(JmxAutoConfiguration.class,
+				EndpointAutoConfiguration.class,
 				EndpointMBeanExportAutoConfiguration.class);
 
 		AnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();
-		parent.register(EndpointAutoConfiguration.class,
+		parent.register(JmxAutoConfiguration.class, EndpointAutoConfiguration.class,
 				EndpointMBeanExportAutoConfiguration.class);
 		this.context.setParent(parent);
 
@@ -136,6 +136,11 @@
 			<artifactId>spring-integration-core</artifactId>
 			<optional>true</optional>
 		</dependency>
+		<dependency>
+			<groupId>org.springframework.integration</groupId>
+			<artifactId>spring-integration-jmx</artifactId>
+			<optional>true</optional>
+		</dependency>
 		<dependency>
 			<groupId>org.springframework</groupId>
 			<artifactId>spring-jms</artifactId>
@@ -16,24 +16,40 @@
 
 package org.springframework.boot.autoconfigure.integration;
 
+import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.integration.config.EnableIntegration;
+import org.springframework.integration.jmx.config.EnableIntegrationMBeanExport;
+import org.springframework.integration.jmx.config.IntegrationMBeanExportConfiguration;
 
 /**
  * {@link org.springframework.boot.autoconfigure.EnableAutoConfiguration
  * Auto-configuration} for Spring Integration.
  * 
  * @author Artem Bilan
+ * @author Dave Syer
  * @since 1.1
  */
 @Configuration
 @ConditionalOnClass(EnableIntegration.class)
+@AutoConfigureAfter(JmxAutoConfiguration.class)
 public class IntegrationAutoConfiguration {
 
 	@Configuration
 	@EnableIntegration
 	protected static class IntegrationConfiguration {
 	}
 
+	@Configuration
+	@ConditionalOnClass(EnableIntegrationMBeanExport.class)
+	@ConditionalOnMissingBean(IntegrationMBeanExportConfiguration.class)
+	@ConditionalOnExpression(""${spring.jmx.enabled:true}"")
+	@EnableIntegrationMBeanExport(defaultDomain = ""${spring.jmx.default_domain:}"", server = ""${spring.jmx.server:mbeanServer}"")
+	protected static class IntegrationJmxConfiguration {
+	}
+
 }
@@ -16,13 +16,17 @@
 
 package org.springframework.boot.autoconfigure.jmx;
 
+import javax.management.MBeanServer;
+
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.EnableMBeanExport;
 import org.springframework.jmx.export.MBeanExporter;
+import org.springframework.jmx.support.MBeanServerFactoryBean;
 
 /**
  * {@link EnableAutoConfiguration Auto-configuration} to enable/disable Spring's
@@ -34,14 +38,21 @@
  */
 @Configuration
 @ConditionalOnClass({ MBeanExporter.class })
-@ConditionalOnMissingBean({ MBeanExporter.class })
 @ConditionalOnExpression(""${spring.jmx.enabled:true}"")
 public class JmxAutoConfiguration {
 
 	@Configuration
-	@EnableMBeanExport(defaultDomain = ""${spring.jmx.default_domain:}"", server = ""${spring.jmx.server:}"")
+	@ConditionalOnMissingBean({ MBeanExporter.class })
+	@EnableMBeanExport(defaultDomain = ""${spring.jmx.default_domain:}"", server = ""${spring.jmx.server:mbeanServer}"")
 	public static class MBeanExport {
+	}
 
+	@Bean
+	@ConditionalOnMissingBean(MBeanServer.class)
+	public MBeanServerFactoryBean mbeanServer() {
+		MBeanServerFactoryBean factory = new MBeanServerFactoryBean();
+		factory.setLocateExistingServerIfPossible(true);
+		return factory;
 	}
 
 }
@@ -17,6 +17,7 @@
 package org.springframework.boot.autoconfigure.integration;
 
 import org.junit.Test;
+import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.integration.support.channel.HeaderChannelRegistry;
 
@@ -32,7 +33,8 @@ public class IntegrationAutoConfigurationTests {
 
 	@Test
 	public void integrationIsAvailable() {
-		this.context.register(IntegrationAutoConfiguration.class);
+		this.context.register(JmxAutoConfiguration.class,
+				IntegrationAutoConfiguration.class);
 		this.context.refresh();
 		assertNotNull(this.context.getBean(HeaderChannelRegistry.class));
 		this.context.close();
@@ -1688,6 +1688,17 @@ infrastructure to receive messages asynchronously. Spring AMQP provides a simila
 feature set for the ``Advanced Message Queuing Protocol'' and Boot also provides
 auto-configuration options for `RabbitTemplate` and RabbitMQ.
 
+[[boot-features-messaging]]
+== Spring Integration
+
+Spring Integration provides abstractions over messaging and also other 
+transports such as HTTP, TCP etc. If Spring Integration is available
+on your classpath it will be initialized through the `@EnableIntegration`
+annotation. Message processing statistics will be published over JMX if
+``spring-integration-jmx'' is also on the classpath. 
+See the {sc-spring-boot-autoconfigure}/integration/IntegrationAutoConfiguration.{sc-ext}[`IntegrationAutoConfiguration`]
+class for more details.
+
 [[boot-features-jms]]
 == JMS
 
@@ -1792,6 +1803,17 @@ into your own beans:
 	}
 ----
 
+[[boot-features-jmx]]
+== Monitoring and management over JMX
+
+Java Management Extensions (JMX) provide a standard mechanism to
+monitor and manage applications. By default Spring Boot will create an
+`MBeanServer` with bean id ""mbeanServer"" and expose any of your beans
+that are annotated with Spring JMX annotations (`@ManagedResource`,
+`@ManagedAttribute`, `@ManagedOperation`).
+
+See the {sc-spring-boot-autoconfigure}/jmx/JmxAutoConfiguration.{sc-ext}[`JmxAutoConfiguration`]
+class for more details.
 
 [[boot-features-testing]]
 == Testing
@@ -23,6 +23,10 @@
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-integration</artifactId>
 		</dependency>
+		<dependency>
+			<groupId>org.springframework.integration</groupId>
+			<artifactId>spring-integration-jmx</artifactId>
+		</dependency>
 		<dependency>
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-test</artifactId>
@@ -1,2 +1,3 @@
 logging.file: /tmp/logs/app.log
-service.greeting: Hello
\ No newline at end of file
+service.greeting: Hello
+debug: true
\ No newline at end of file
"
https://github.com/spring-projects/spring-boot/commit/2516dc033f909281702dfd2f99e8d0f05d59af8b,"Fix documentation example  <enter> Previously, the nested private static class would cause an error at startup stating that it was not accessible when trying to bind the property from the environment. The nested class should be public. <enter>  Closes   <pr_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/2516dc033f909281702dfd2f99e8d0f05d59af8b,"@@ -813,7 +813,7 @@ as `@Valid` to trigger its validation. For example, building upon the above
 
 		// ... getters and setters
 
-		private static class RemoteAddress {
+		public static class RemoteAddress {
 
 			@NotEmpty
 			public String hostname;
"
https://github.com/apache/dubbo/commit/fa157deadf65d00c9884d611430ec78e585840ff,Refactor: remove NetUtils.getHostAddress() and relace it with NetUtils.getLocalHost() ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/fa157deadf65d00c9884d611430ec78e585840ff,"@@ -31,7 +31,7 @@ public class ConsumerContextClusterInterceptor implements ClusterInterceptor, Cl
     public void before(AbstractClusterInvoker<?> invoker, Invocation invocation) {
         RpcContext.getContext()
                 .setInvocation(invocation)
-                .setLocalAddress(NetUtils.getHostAddress(), 0);
+                .setLocalAddress(NetUtils.getLocalHost(), 0);
         if (invocation instanceof RpcInvocation) {
             ((RpcInvocation) invocation).setInvoker(invoker);
         }
@@ -139,12 +139,12 @@ static boolean isValidV4Address(InetAddress address) {
         if (address == null || address.isLoopbackAddress()) {
             return false;
         }
+
         String name = address.getHostAddress();
-        boolean result = (name != null
+        return (name != null
                 && IP_PATTERN.matcher(name).matches()
                 && !ANYHOST_VALUE.equals(name)
                 && !LOCALHOST_VALUE.equals(name));
-        return result;
     }
 
     /**
@@ -186,18 +186,16 @@ static InetAddress normalizeV6Address(Inet6Address address) {
 
     private static volatile String HOST_ADDRESS;
 
-    public static String getHostAddress () {
+    public static String getLocalHost() {
         if (HOST_ADDRESS != null) {
             return HOST_ADDRESS;
         }
 
-        HOST_ADDRESS = getLocalHost();
-        return HOST_ADDRESS;
-    }
-
-    public static String getLocalHost() {
         InetAddress address = getLocalAddress();
-        return address == null ? LOCALHOST_VALUE : address.getHostAddress();
+        if (address != null) {
+            return HOST_ADDRESS = address.getHostAddress();
+        }
+        return LOCALHOST_VALUE;
     }
 
     public static String filterLocalHost(String host) {
@@ -287,7 +285,7 @@ private static InetAddress getLocalAddress0() {
                             Optional<InetAddress> addressOp = toValidAddress(addresses.nextElement());
                             if (addressOp.isPresent()) {
                                 try {
-                                    if(addressOp.get().isReachable(100)){
+                                    if (addressOp.get().isReachable(100)) {
                                         return addressOp.get();
                                     }
                                 } catch (IOException e) {
@@ -387,7 +385,7 @@ public static void setInterface(MulticastSocket multicastSocket, boolean preferI
                 InetAddress address = (InetAddress) addresses.nextElement();
                 if (preferIpv6 && address instanceof Inet6Address) {
                     try {
-                        if(address.isReachable(100)){
+                        if (address.isReachable(100)) {
                             multicastSocket.setInterface(address);
                             interfaceSet = true;
                             break;
@@ -397,7 +395,7 @@ public static void setInterface(MulticastSocket multicastSocket, boolean preferI
                     }
                 } else if (!preferIpv6 && address instanceof Inet4Address) {
                     try {
-                        if(address.isReachable(100)){
+                        if (address.isReachable(100)) {
                             multicastSocket.setInterface(address);
                             interfaceSet = true;
                             break;
@@ -300,4 +300,11 @@ public void testMatchIpv4WithIpPort() throws UnknownHostException {
         assertFalse(NetUtils.matchIpRange(""192.168.1.1-61:90"", ""192.168.1.62"", 90));
         assertFalse(NetUtils.matchIpRange(""192.168.1.62:90"", ""192.168.1.63"", 90));
     }
+
+    @Test
+    public void testLocalHost() {
+        assertEquals(NetUtils.getLocalHost(), NetUtils.getLocalAddress().getHostAddress());
+        assertTrue(NetUtils.isValidLocalHost(NetUtils.getLocalHost()));
+        assertFalse(NetUtils.isInvalidLocalHost(NetUtils.getLocalHost()));
+    }
 }
"
https://github.com/apache/dubbo/commit/f9f10ba5225e80c34953f56123ac1702c13e45c7,"In order to facilitate the consumer to better locate the failure of provider token check, the token value called by consumer will be printed out in the exception information ( <pr_link> ) ",https://api.github.com/repos/apache/dubbo/commits/f9f10ba5225e80c34953f56123ac1702c13e45c7,"@@ -48,7 +48,9 @@ public Result invoke(Invoker<?> invoker, Invocation inv)
             Map<String, Object> attachments = inv.getObjectAttachments();
             String remoteToken = (attachments == null ? null : (String) attachments.get(TOKEN_KEY));
             if (!token.equals(remoteToken)) {
-                throw new RpcException(""Invalid token! Forbid invoke remote service "" + serviceType + "" method "" + inv.getMethodName() + ""() from consumer "" + RpcContext.getContext().getRemoteHost() + "" to provider "" + RpcContext.getContext().getLocalHost());
+                throw new RpcException(""Invalid token! Forbid invoke remote service "" + serviceType + "" method "" + inv.getMethodName()
+                        + ""() from consumer "" + RpcContext.getContext().getRemoteHost() + "" to provider "" + RpcContext.getContext().getLocalHost()
+                        + "", consumer incorrect token is "" + remoteToken);
             }
         }
         return invoker.invoke(inv);
"
https://github.com/square/okhttp/commit/bffee2336725dde0f74933d5a7d12536c9bcbd06,"Introduce intermediate storage for frame contents.  <enter> This eliminates the need to always send a frame for every FrameSink#write and to always send an empty frame for FrameSink#close. Now, we only emit bytes once Okio reports complete segments. ",https://api.github.com/repos/square/okhttp/commits/bffee2336725dde0f74933d5a7d12536c9bcbd06,"@@ -246,13 +246,6 @@ public final class RealWebSocketTest {
         client.readMessage();
         clientListener.assertClose(1000, ""Hello!"");
 
-        try {
-          sink.writeUtf8(""lo!"").emit(); // No writing to the underlying sink.
-          fail();
-        } catch (IOException e) {
-          assertEquals(""closed"", e.getMessage());
-          sink.buffer().clear();
-        }
         try {
           sink.flush(); // No flushing.
           fail();
@@ -320,7 +313,7 @@ public final class RealWebSocketTest {
     clientListener.assertClose(1000, ""Bye!"");
   }
 
-  @Test public void protocolErrorBeforeCloseSendsClose() {
+  @Test public void protocolErrorBeforeCloseSendsClose() throws IOException {
     server2client.write(ByteString.decodeHex(""0a00"")); // Invalid non-final ping frame.
 
     client.readMessage(); // Detects error, send close.
@@ -31,6 +31,8 @@
 
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_BINARY;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_TEXT;
+import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX;
+import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_SHORT_MAX;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.toggleMask;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
@@ -71,15 +73,30 @@ public final class WebSocketWriterTest {
     assertData(""8000"");
   }
 
-  @Test public void serverCloseFlushes() throws IOException {
+  @Test public void closeFlushes() throws IOException {
     BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT));
 
     sink.writeUtf8(""Hel"").flush();
     assertData(""010348656c"");
 
     sink.writeUtf8(""lo"").close();
-    assertData(""00026c6f"");
-    assertData(""8000"");
+    assertData(""80026c6f"");
+  }
+
+  @Test public void noWritesAfterClose() throws IOException {
+    Sink sink = serverWriter.newMessageSink(OPCODE_TEXT);
+
+    sink.close();
+    assertData(""8100"");
+
+    Buffer payload = new Buffer().writeUtf8(""Hello"");
+    try {
+      // Write to the unbuffered sink as BufferedSink keeps its own closed state.
+      sink.write(payload, payload.size());
+      fail();
+    } catch (IOException e) {
+      assertEquals(""closed"", e.getMessage());
+    }
   }
 
   @Test public void clientTextMessage() throws IOException {
@@ -96,39 +113,55 @@ public final class WebSocketWriterTest {
   }
 
   @Test public void serverBinaryMessage() throws IOException {
-    Sink sink = serverWriter.newMessageSink(OPCODE_BINARY);
+    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_BINARY));
 
-    sink.write(binaryData(50), 50);
+    sink.write(binaryData(50)).flush();
     assertData(""0232"");
-    assertData(binaryData(50).readByteArray());
+    assertData(binaryData(50));
 
-    sink.write(binaryData(50), 50);
+    sink.write(binaryData(50)).flush();
     assertData(""0032"");
-    assertData(binaryData(50).readByteArray());
+    assertData(binaryData(50));
 
     sink.close();
     assertData(""8000"");
   }
 
-  @Test public void serverBinaryMessageLengthShort() throws IOException {
+  @Test public void serverMessageLengthShort() throws IOException {
     Sink sink = serverWriter.newMessageSink(OPCODE_BINARY);
 
-    int length = 0xffff;
-    sink.write(binaryData(length), length);
-    assertData(""027effff"");
-    assertData(binaryData(length).readByteArray());
+    // Create a payload which will overflow the normal payload byte size.
+    Buffer payload = new Buffer();
+    while (payload.completeSegmentByteCount() <= PAYLOAD_BYTE_MAX) {
+      payload.writeByte('0');
+    }
+    long byteCount = payload.completeSegmentByteCount();
+
+    // Write directly to the unbuffered sink. This ensures it will become single frame.
+    sink.write(payload.clone(), byteCount);
+    assertData(""027e""); // 'e' == 4-byte follow-up length.
+    assertData(String.format(""%04X"", payload.completeSegmentByteCount()));
+    assertData(payload.readByteArray());
 
     sink.close();
     assertData(""8000"");
   }
 
-  @Test public void serverBinaryMessageLengthLong() throws IOException {
+  @Test public void serverMessageLengthLong() throws IOException {
     Sink sink = serverWriter.newMessageSink(OPCODE_BINARY);
 
-    int length = 65537;
-    sink.write(binaryData(length), length);
-    assertData(""027f0000000000010001"");
-    assertData(binaryData(length).readByteArray());
+    // Create a payload which will overflow the normal and short payload byte size.
+    Buffer payload = new Buffer();
+    while (payload.completeSegmentByteCount() <= PAYLOAD_SHORT_MAX) {
+      payload.writeByte('0');
+    }
+    long byteCount = payload.completeSegmentByteCount();
+
+    // Write directly to the unbuffered sink. This ensures it will become single frame.
+    sink.write(payload.clone(), byteCount);
+    assertData(""027f""); // 'f' == 16-byte follow-up length.
+    assertData(String.format(""%016X"", byteCount));
+    assertData(payload.readByteArray(byteCount));
 
     sink.close();
     assertData(""8000"");
@@ -139,30 +172,24 @@ public final class WebSocketWriterTest {
     random.nextBytes(maskKey1);
     byte[] maskKey2 = new byte[4];
     random.nextBytes(maskKey2);
-    byte[] maskKey3 = new byte[4];
-    random.nextBytes(maskKey3);
 
     random.setSeed(0); // Reset the seed so real data matches.
 
-    Sink sink = clientWriter.newMessageSink(OPCODE_BINARY);
+    BufferedSink sink = Okio.buffer(clientWriter.newMessageSink(OPCODE_BINARY));
 
-    sink.write(binaryData(50), 50);
-    byte[] part1 = binaryData(50).readByteArray();
+    byte[] part1 = binaryData(50);
+    sink.write(part1).flush();
     toggleMask(part1, 50, maskKey1, 0);
     assertData(""02b2"");
     assertData(maskKey1);
     assertData(part1);
 
-    sink.write(binaryData(50), 50);
-    byte[] part2 = binaryData(50).readByteArray();
+    byte[] part2 = binaryData(50);
+    sink.write(part2).close();
     toggleMask(part2, 50, maskKey2, 0);
-    assertData(""00b2"");
+    assertData(""80b2"");
     assertData(maskKey2);
     assertData(part2);
-
-    sink.close();
-    assertData(""8080"");
-    assertData(maskKey3);
   }
 
   @Test public void serverEmptyClose() throws IOException {
@@ -251,7 +278,7 @@ public final class WebSocketWriterTest {
 
   @Test public void pingTooLongThrows() throws IOException {
     try {
-      serverWriter.writePing(binaryData(1000));
+      serverWriter.writePing(new Buffer().write(binaryData(1000)));
       fail();
     } catch (IllegalArgumentException e) {
       assertEquals(""Payload size must be less than or equal to 125"", e.getMessage());
@@ -260,7 +287,7 @@ public final class WebSocketWriterTest {
 
   @Test public void pongTooLongThrows() throws IOException {
     try {
-      serverWriter.writePong(binaryData(1000));
+      serverWriter.writePong(new Buffer().write(binaryData(1000)));
       fail();
     } catch (IllegalArgumentException e) {
       assertEquals(""Payload size must be less than or equal to 125"", e.getMessage());
@@ -269,7 +296,7 @@ public final class WebSocketWriterTest {
 
   @Test public void closeTooLongThrows() throws IOException {
     try {
-      String longString = binaryData(75).readByteString().hex();
+      String longString = ByteString.of(binaryData(75)).hex();
       serverWriter.writeClose(1000, longString);
       fail();
     } catch (IllegalArgumentException e) {
@@ -303,9 +330,9 @@ private void assertData(byte[] data) throws IOException {
     }
   }
 
-  private static Buffer binaryData(int length) {
+  private static byte[] binaryData(int length) {
     byte[] junk = new byte[length];
     new Random(0).nextBytes(junk);
-    return new Buffer().write(junk);
+    return junk;
   }
 }
@@ -87,28 +87,48 @@ private Object nextEvent() {
     }
   }
 
-  public void assertTextMessage(String payload) {
+  public void assertTextMessage(String payload) throws IOException {
     Message message = new Message(TEXT);
     message.buffer.writeUtf8(payload);
-    assertEquals(message, nextEvent());
+    Object actual = nextEvent();
+    if (actual instanceof IOException) {
+      throw (IOException) actual;
+    }
+    assertEquals(message, actual);
   }
 
-  public void assertBinaryMessage(byte[] payload) {
+  public void assertBinaryMessage(byte[] payload) throws IOException {
     Message message = new Message(BINARY);
     message.buffer.write(payload);
-    assertEquals(message, nextEvent());
+    Object actual = nextEvent();
+    if (actual instanceof IOException) {
+      throw (IOException) actual;
+    }
+    assertEquals(message, actual);
   }
 
-  public void assertPing(Buffer payload) {
-    assertEquals(new Ping(payload), nextEvent());
+  public void assertPing(Buffer payload) throws IOException {
+    Object actual = nextEvent();
+    if (actual instanceof IOException) {
+      throw (IOException) actual;
+    }
+    assertEquals(new Ping(payload), actual);
   }
 
-  public void assertPong(Buffer payload) {
-    assertEquals(new Pong(payload), nextEvent());
+  public void assertPong(Buffer payload) throws IOException {
+    Object actual = nextEvent();
+    if (actual instanceof IOException) {
+      throw (IOException) actual;
+    }
+    assertEquals(new Pong(payload), actual);
   }
 
-  public void assertClose(int code, String reason) {
-    assertEquals(new Close(code, reason), nextEvent());
+  public void assertClose(int code, String reason) throws IOException {
+    Object actual = nextEvent();
+    if (actual instanceof IOException) {
+      throw (IOException) actual;
+    }
+    assertEquals(new Close(code, reason), actual);
   }
 
   public void assertFailure(Class<? extends IOException> cls, String message) {
@@ -68,14 +68,16 @@ public final class WebSocketProtocol {
   static final int OPCODE_CONTROL_PONG = 0xa;
 
   /**
-   * Maximum length of frame payload. Larger payloads, if supported, can use the special values
-   * {@link #PAYLOAD_SHORT} or {@link #PAYLOAD_LONG}.
+   * Maximum length of frame payload. Larger payloads, if supported by the frame type, can use the
+   * special values {@link #PAYLOAD_SHORT} or {@link #PAYLOAD_LONG}.
    */
-  static final int PAYLOAD_MAX = 125;
+  static final long PAYLOAD_BYTE_MAX = 125L;
   /**
    * Value for {@link #B1_MASK_LENGTH} which indicates the next two bytes are the unsigned length.
    */
   static final int PAYLOAD_SHORT = 126;
+  /** Maximum length of a frame payload to be denoted as {@link #PAYLOAD_SHORT}. */
+  static final long PAYLOAD_SHORT_MAX = 0xffffL;
   /**
    * Value for {@link #B1_MASK_LENGTH} which indicates the next eight bytes are the unsigned
    * length.
@@ -42,7 +42,7 @@
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_FLAG_CONTROL;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_TEXT;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_LONG;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_MAX;
+import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_SHORT;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.toggleMask;
 import static java.lang.Integer.toHexString;
@@ -147,8 +147,8 @@ private void readHeader() throws IOException {
     }
     frameBytesRead = 0;
 
-    if (isControlFrame && frameLength > PAYLOAD_MAX) {
-      throw new ProtocolException(""Control frame must be less than "" + PAYLOAD_MAX + ""B."");
+    if (isControlFrame && frameLength > PAYLOAD_BYTE_MAX) {
+      throw new ProtocolException(""Control frame must be less than "" + PAYLOAD_BYTE_MAX + ""B."");
     }
 
     if (isMasked) {
@@ -30,8 +30,9 @@
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PING;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PONG;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_LONG;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_MAX;
+import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_SHORT;
+import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_SHORT_MAX;
 import static com.squareup.okhttp.internal.ws.WebSocketProtocol.toggleMask;
 
 /**
@@ -44,13 +45,16 @@
  */
 public final class WebSocketWriter {
   private final boolean isClient;
-  /** Writes must be guarded by synchronizing on this instance! */
-  private final BufferedSink sink;
   private final Random random;
 
+  /** Writes must be guarded by synchronizing on 'this'. */
+  private final BufferedSink sink;
+  /** Access must be guarded by synchronizing on 'this'. */
+  private boolean writerClosed;
+
+  private final Buffer buffer = new Buffer();
   private final FrameSink frameSink = new FrameSink();
 
-  private boolean closed;
   private boolean activeWriter;
 
   private final byte[] maskKey;
@@ -70,15 +74,15 @@ public WebSocketWriter(boolean isClient, BufferedSink sink, Random random) {
 
   /** Send a ping with the supplied {@code payload}. Payload may be {@code null} */
   public void writePing(Buffer payload) throws IOException {
-    synchronized (sink) {
-      writeControlFrame(OPCODE_CONTROL_PING, payload);
+    synchronized (this) {
+      writeControlFrameSynchronized(OPCODE_CONTROL_PING, payload);
     }
   }
 
   /** Send a pong with the supplied {@code payload}. Payload may be {@code null} */
   public void writePong(Buffer payload) throws IOException {
-    synchronized (sink) {
-      writeControlFrame(OPCODE_CONTROL_PONG, payload);
+    synchronized (this) {
+      writeControlFrameSynchronized(OPCODE_CONTROL_PONG, payload);
     }
   }
 
@@ -103,21 +107,23 @@ public void writeClose(int code, String reason) throws IOException {
       }
     }
 
-    synchronized (sink) {
-      writeControlFrame(OPCODE_CONTROL_CLOSE, payload);
-      closed = true;
+    synchronized (this) {
+      writeControlFrameSynchronized(OPCODE_CONTROL_CLOSE, payload);
+      writerClosed = true;
     }
   }
 
-  private void writeControlFrame(int opcode, Buffer payload) throws IOException {
-    if (closed) throw new IOException(""closed"");
+  private void writeControlFrameSynchronized(int opcode, Buffer payload) throws IOException {
+    assert Thread.holdsLock(this);
+
+    if (writerClosed) throw new IOException(""closed"");
 
     int length = 0;
     if (payload != null) {
       length = (int) payload.size();
-      if (length > PAYLOAD_MAX) {
+      if (length > PAYLOAD_BYTE_MAX) {
         throw new IllegalArgumentException(
-            ""Payload size must be less than or equal to "" + PAYLOAD_MAX);
+            ""Payload size must be less than or equal to "" + PAYLOAD_BYTE_MAX);
       }
     }
 
@@ -133,7 +139,7 @@ private void writeControlFrame(int opcode, Buffer payload) throws IOException {
       sink.write(maskKey);
 
       if (payload != null) {
-        writeAllMasked(payload, length);
+        writeMaskedSynchronized(payload, length);
       }
     } else {
       sink.writeByte(b1);
@@ -143,7 +149,7 @@ private void writeControlFrame(int opcode, Buffer payload) throws IOException {
       }
     }
 
-    sink.flush();
+    sink.emit();
   }
 
   /**
@@ -156,54 +162,57 @@ public Sink newMessageSink(int formatOpcode) {
     }
     activeWriter = true;
 
+    // Reset FrameSink state for a new writer.
     frameSink.formatOpcode = formatOpcode;
     frameSink.isFirstFrame = true;
+    frameSink.closed = false;
+
     return frameSink;
   }
 
-  private void writeFrame(int formatOpcode, Buffer source, long byteCount,
-      boolean isFirstFrame, boolean isFinal) throws IOException {
-    if (closed) throw new IOException(""closed"");
-
-    int opcode = isFirstFrame ? formatOpcode : OPCODE_CONTINUATION;
+  private void writeMessageFrameSynchronized(int formatOpcode, long byteCount, boolean isFirstFrame,
+      boolean isFinal) throws IOException {
+    assert Thread.holdsLock(this);
 
-    synchronized (sink) {
-      int b0 = opcode;
-      if (isFinal) {
-        b0 |= B0_FLAG_FIN;
-      }
-      sink.writeByte(b0);
+    if (writerClosed) throw new IOException(""closed"");
 
-      int b1 = 0;
-      if (isClient) {
-        b1 |= B1_FLAG_MASK;
-        random.nextBytes(maskKey);
-      }
-      if (byteCount <= PAYLOAD_MAX) {
-        b1 |= (int) byteCount;
-        sink.writeByte(b1);
-      } else if (byteCount <= 0xffffL) { // Unsigned short.
-        b1 |= PAYLOAD_SHORT;
-        sink.writeByte(b1);
-        sink.writeShort((int) byteCount);
-      } else {
-        b1 |= PAYLOAD_LONG;
-        sink.writeByte(b1);
-        sink.writeLong(byteCount);
-      }
+    int b0 = isFirstFrame ? formatOpcode : OPCODE_CONTINUATION;
+    if (isFinal) {
+      b0 |= B0_FLAG_FIN;
+    }
+    sink.writeByte(b0);
 
-      if (isClient) {
-        sink.write(maskKey);
-        writeAllMasked(source, byteCount);
-      } else {
-        sink.write(source, byteCount);
-      }
+    int b1 = 0;
+    if (isClient) {
+      b1 |= B1_FLAG_MASK;
+      random.nextBytes(maskKey);
+    }
+    if (byteCount <= PAYLOAD_BYTE_MAX) {
+      b1 |= (int) byteCount;
+      sink.writeByte(b1);
+    } else if (byteCount <= PAYLOAD_SHORT_MAX) {
+      b1 |= PAYLOAD_SHORT;
+      sink.writeByte(b1);
+      sink.writeShort((int) byteCount);
+    } else {
+      b1 |= PAYLOAD_LONG;
+      sink.writeByte(b1);
+      sink.writeLong(byteCount);
+    }
 
-      sink.flush();
+    if (isClient) {
+      sink.write(maskKey);
+      writeMaskedSynchronized(buffer, byteCount);
+    } else {
+      sink.write(buffer, byteCount);
     }
+
+    sink.emit();
   }
 
-  private void writeAllMasked(BufferedSource source, long byteCount) throws IOException {
+  private void writeMaskedSynchronized(BufferedSource source, long byteCount) throws IOException {
+    assert Thread.holdsLock(this);
+
     long written = 0;
     while (written < byteCount) {
       int toRead = (int) Math.min(byteCount, maskBuffer.length);
@@ -218,18 +227,29 @@ private void writeAllMasked(BufferedSource source, long byteCount) throws IOExce
   private final class FrameSink implements Sink {
     private int formatOpcode;
     private boolean isFirstFrame;
+    private boolean closed;
 
     @Override public void write(Buffer source, long byteCount) throws IOException {
-      writeFrame(formatOpcode, source, byteCount, isFirstFrame, false /* final */);
-      isFirstFrame = false;
+      if (closed) throw new IOException(""closed"");
+
+      buffer.write(source, byteCount);
+
+      long emitCount = buffer.completeSegmentByteCount();
+      if (emitCount > 0) {
+        synchronized (WebSocketWriter.this) {
+          writeMessageFrameSynchronized(formatOpcode, emitCount, isFirstFrame, false /* final */);
+        }
+        isFirstFrame = false;
+      }
     }
 
     @Override public void flush() throws IOException {
       if (closed) throw new IOException(""closed"");
 
-      synchronized (sink) {
-        sink.flush();
+      synchronized (WebSocketWriter.this) {
+        writeMessageFrameSynchronized(formatOpcode, buffer.size(), isFirstFrame, false /* final */);
       }
+      isFirstFrame = false;
     }
 
     @Override public Timeout timeout() {
@@ -240,21 +260,10 @@ private final class FrameSink implements Sink {
     @Override public void close() throws IOException {
       if (closed) throw new IOException(""closed"");
 
-      int length = 0;
-
-      synchronized (sink) {
-        sink.writeByte(B0_FLAG_FIN | OPCODE_CONTINUATION);
-
-        if (isClient) {
-          sink.writeByte(B1_FLAG_MASK | length);
-          random.nextBytes(maskKey);
-          sink.write(maskKey);
-        } else {
-          sink.writeByte(length);
-        }
-        sink.flush();
+      synchronized (WebSocketWriter.this) {
+        writeMessageFrameSynchronized(formatOpcode, buffer.size(), isFirstFrame, true /* final */);
       }
-
+      closed = true;
       activeWriter = false;
     }
   }
@@ -17,10 +17,6 @@
 import static com.squareup.okhttp.ws.WebSocket.BINARY;
 import static com.squareup.okhttp.ws.WebSocket.TEXT;
 
-/**
- * NOTE: This is currently broken because the Echo server does not correctly echo empty frames
- * which OkHttp uses for final frames on streamed messages.
- */
 public final class WebSocketEcho implements WebSocketListener {
   private final Executor writeExecutor = Executors.newSingleThreadExecutor();
 
"
https://github.com/square/okhttp/commit/ba5d3e278b027ee7a2cb741a1bec3646f9d11e16,Migrate from Travis to GitHub Action for publishing ,https://api.github.com/repos/square/okhttp/commits/ba5d3e278b027ee7a2cb741a1bec3646f9d11e16,"@@ -1,26 +0,0 @@
-#!/bin/bash
-#
-# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo.
-#
-# Adapted from https://coderwall.com/p/9b_lfq and
-# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/
-
-SLUG=""square/okhttp""
-JDK=""openjdk11""
-BRANCH=""master""
-
-set -e
-
-if [ ""$TRAVIS_REPO_SLUG"" != ""$SLUG"" ]; then
-  echo ""Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'.""
-elif [ ""$TRAVIS_JDK_VERSION"" != ""$JDK"" ]; then
-  echo ""Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'.""
-elif [ ""$TRAVIS_PULL_REQUEST"" != ""false"" ]; then
-  echo ""Skipping snapshot deployment: was pull request.""
-elif [ ""$TRAVIS_BRANCH"" != ""$BRANCH"" ]; then
-  echo ""Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.""
-else
-  echo ""Deploying snapshot...""
-  ./gradlew clean uploadArchives
-  echo ""Snapshot deployed!""
-fi
@@ -0,0 +1,29 @@
+name: build
+
+on: [push, pull_request]
+
+env:
+  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""
+
+jobs:
+  publish:
+    runs-on: ubuntu-latest
+    if: github.ref == 'refs/heads/master'
+
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v2
+
+      - name: Validate Gradle Wrapper
+        uses: gradle/wrapper-validation-action@v1
+
+      - name: Configure JDK
+        uses: actions/setup-java@v1
+        with:
+          java-version: 11
+
+      - name: Upload Artifacts
+        run: ./gradlew uploadArchives
+        env:
+          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
+          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
@@ -1,35 +0,0 @@
-language: java
-
-dist: trusty
-
-jdk:
-  - openjdk11
-
-script:
-  - ./gradlew jar --parallel
-
-after_success:
-  - .buildscript/deploy_snapshot.sh
-
-env:
-  global:
-    - secure: ""fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY=""
-    - secure: ""WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38=""
-
-branches:
-  only:
-    - master
-
-notifications:
-  email: false
-
-sudo: false
-
-before_cache:
-  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
-  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
-
-cache:
-  directories:
-    - $HOME/.gradle/caches/
-    - $HOME/.gradle/wrapper/
"
https://github.com/square/okhttp/commit/fd509b937c4a5438fe02ddf06ade5ad56736af5d,Inject a leading . for better matching under JavaNetCookieJar  <enter> Closes :  <issue_link> ,https://api.github.com/repos/square/okhttp/commits/fd509b937c4a5438fe02ddf06ade5ad56736af5d,"@@ -23,6 +23,7 @@
 import java.net.HttpURLConnection;
 import java.net.InetAddress;
 import java.net.URI;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -271,6 +272,58 @@ public void testNetscapeResponse() throws Exception {
     assertNull(request.getHeader(""Quux""));
   }
 
+  @Test public void acceptOriginalServerMatchesSubdomain() throws Exception {
+    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
+    JavaNetCookieJar cookieJar = new JavaNetCookieJar(cookieManager);
+
+    HttpUrl url = HttpUrl.parse(""https://www.squareup.com/"");
+    cookieJar.saveFromResponse(url, Arrays.asList(
+        Cookie.parse(url, ""a=android; Domain=squareup.com"")));
+    List<Cookie> actualCookies = cookieJar.loadForRequest(url);
+    assertEquals(1, actualCookies.size());
+    assertEquals(""a"", actualCookies.get(0).name());
+    assertEquals(""android"", actualCookies.get(0).value());
+  }
+
+  @Test public void acceptOriginalServerMatchesRfc2965Dot() throws Exception {
+    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
+    JavaNetCookieJar cookieJar = new JavaNetCookieJar(cookieManager);
+
+    HttpUrl url = HttpUrl.parse(""https://www.squareup.com/"");
+    cookieJar.saveFromResponse(url, Arrays.asList(
+        Cookie.parse(url, ""a=android; Domain=.squareup.com"")));
+    List<Cookie> actualCookies = cookieJar.loadForRequest(url);
+    assertEquals(1, actualCookies.size());
+    assertEquals(""a"", actualCookies.get(0).name());
+    assertEquals(""android"", actualCookies.get(0).value());
+  }
+
+  @Test public void acceptOriginalServerMatchesExactly() throws Exception {
+    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
+    JavaNetCookieJar cookieJar = new JavaNetCookieJar(cookieManager);
+
+    HttpUrl url = HttpUrl.parse(""https://squareup.com/"");
+    cookieJar.saveFromResponse(url, Arrays.asList(
+        Cookie.parse(url, ""a=android; Domain=squareup.com"")));
+    List<Cookie> actualCookies = cookieJar.loadForRequest(url);
+    assertEquals(1, actualCookies.size());
+    assertEquals(""a"", actualCookies.get(0).name());
+    assertEquals(""android"", actualCookies.get(0).value());
+  }
+
+  @Test public void acceptOriginalServerDoesNotMatchDifferentServer() throws Exception {
+    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
+    JavaNetCookieJar cookieJar = new JavaNetCookieJar(cookieManager);
+
+    HttpUrl url1 = HttpUrl.parse(""https://api.squareup.com/"");
+    cookieJar.saveFromResponse(url1, Arrays.asList(
+        Cookie.parse(url1, ""a=android; Domain=api.squareup.com"")));
+
+    HttpUrl url2 = HttpUrl.parse(""https://www.squareup.com/"");
+    List<Cookie> actualCookies = cookieJar.loadForRequest(url2);
+    assertEquals(Collections.<Cookie>emptyList(), actualCookies);
+  }
+
   private HttpUrl urlWithIpAddress(MockWebServer server, String path) throws Exception {
     return server.url(path)
         .newBuilder()
@@ -40,7 +40,7 @@ public JavaNetCookieJar(CookieHandler cookieHandler) {
     if (cookieHandler != null) {
       List<String> cookieStrings = new ArrayList<>();
       for (Cookie cookie : cookies) {
-        cookieStrings.add(cookie.toString());
+        cookieStrings.add(cookie.toString(true));
       }
       Map<String, List<String>> multimap = Collections.singletonMap(""Set-Cookie"", cookieStrings);
       try {
@@ -530,6 +530,15 @@ public Cookie build() {
   }
 
   @Override public String toString() {
+    return toString(false);
+  }
+
+  /**
+   * @param forObsoleteRfc2965 true to include a leading {@code .} on the domain pattern. This is
+   *     necessary for {@code example.com} to match {@code www.example.com} under RFC 2965. This
+   *     extra dot is ignored by more recent specifications.
+   */
+  String toString(boolean forObsoleteRfc2965) {
     StringBuilder result = new StringBuilder();
     result.append(name);
     result.append('=');
@@ -544,7 +553,11 @@ public Cookie build() {
     }
 
     if (!hostOnly) {
-      result.append(""; domain="").append(domain);
+      result.append(""; domain="");
+      if (forObsoleteRfc2965) {
+        result.append(""."");
+      }
+      result.append(domain);
     }
 
     result.append(""; path="").append(path);
"
https://github.com/junit-team/junit4/commit/078e45bd31a9920e00633ad6ce658e22529304f2,Brought in old JUnit4ClassRunner for compatibility. Renamed new JUnit4ClassRunner to BlockJUnit4ClassRunner. ,https://api.github.com/repos/junit-team/junit4/commits/078e45bd31a9920e00633ad6ce658e22529304f2,"@@ -16,11 +16,11 @@
 import org.junit.experimental.theories.internal.ParameterizedAssertionError;
 import org.junit.internal.AssumptionViolatedException;
 import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
 import org.junit.internal.runners.links.Statement;
 import org.junit.internal.runners.model.FrameworkMethod;
 
-public class Theories extends JUnit4ClassRunner {
+public class Theories extends BlockJUnit4ClassRunner {
 	public Theories(Class<?> klass) throws InitializationError {
 		super(klass);
 	}
@@ -91,7 +91,7 @@ protected void runWithIncompleteAssignment(Assignments incomplete)
 		protected void runWithCompleteAssignment(final Assignments complete)
 				throws InstantiationException, IllegalAccessException,
 				InvocationTargetException, NoSuchMethodException, Throwable {
-			new JUnit4ClassRunner(getTestClass()) {
+			new BlockJUnit4ClassRunner(getTestClass()) {
 				@Override
 				protected void collectInitializationErrors(
 						List<Throwable> errors) {
@@ -3,13 +3,13 @@
  */
 package org.junit.internal.builders;
 
-import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
 import org.junit.runner.Runner;
 import org.junit.runners.RunnerBuilder;
 
 public class JUnit4Builder extends RunnerBuilder {
 	@Override
 	public Runner runnerForClass(Class<?> testClass) throws Throwable {
-		return new JUnit4ClassRunner(testClass);
+		return new BlockJUnit4ClassRunner(testClass);
 	}
 }
\ No newline at end of file
@@ -0,0 +1,80 @@
+package org.junit.internal.deprecated;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.List;
+
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
+import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.runner.Description;
+import org.junit.runner.notification.Failure;
+import org.junit.runner.notification.RunNotifier;
+
+/**
+ * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
+ *             removed in the next release. Please use
+ *             {@link BlockJUnit4ClassRunner} in place of {@link JUnit4ClassRunner}.
+ */
+@Deprecated
+public
+class ClassRoadie {
+	private RunNotifier fNotifier;
+	private TestClass fTestClass;
+	private Description fDescription;
+	private final Runnable fRunnable;
+	
+	public ClassRoadie(RunNotifier notifier, TestClass testClass,
+			Description description, Runnable runnable) {
+		fNotifier= notifier;
+		fTestClass= testClass;
+		fDescription= description;
+		fRunnable= runnable;
+	}
+
+	protected void runUnprotected() {
+		fRunnable.run();
+	};
+
+	protected void addFailure(Throwable targetException) {
+		fNotifier.fireTestFailure(new Failure(fDescription, targetException));
+	}
+
+	public void runProtected() {
+		try {
+			runBefores();
+			runUnprotected();
+		} catch (FailedBefore e) {
+		} finally {
+			runAfters();
+		}
+	}
+
+	private void runBefores() throws FailedBefore {
+		try {
+			try {
+				List<Method> befores= fTestClass.getBefores();
+				for (Method before : befores)
+					before.invoke(null);
+			} catch (InvocationTargetException e) {
+				throw e.getTargetException();
+			}
+		} catch (org.junit.internal.AssumptionViolatedException e) {
+			throw new FailedBefore();
+		} catch (Throwable e) {
+			addFailure(e);
+			throw new FailedBefore();
+		}
+	}
+
+	private void runAfters() {
+		List<Method> afters= fTestClass.getAfters();
+		for (Method after : afters)
+			try {
+				after.invoke(null);
+			} catch (InvocationTargetException e) {
+				addFailure(e.getTargetException());
+			} catch (Throwable e) {
+				addFailure(e); // Untested, but seems impossible
+			}
+	}
+}
\ No newline at end of file
@@ -0,0 +1,14 @@
+package org.junit.internal.deprecated;
+
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
+import org.junit.internal.runners.JUnit4ClassRunner;
+
+/**
+ * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
+ *             removed in the next release. Please use
+ *             {@link BlockJUnit4ClassRunner} in place of {@link JUnit4ClassRunner}.
+ */
+@Deprecated
+class FailedBefore extends Exception {
+	private static final long serialVersionUID= 1L;
+}
\ No newline at end of file
@@ -0,0 +1,158 @@
+package org.junit.internal.deprecated;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.List;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+import org.junit.internal.AssumptionViolatedException;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
+import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.runner.Description;
+import org.junit.runner.notification.Failure;
+import org.junit.runner.notification.RunNotifier;
+
+/**
+ * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
+ *             removed in the next release. Please use
+ *             {@link BlockJUnit4ClassRunner} in place of {@link JUnit4ClassRunner}.
+ */
+@Deprecated
+public class MethodRoadie {
+	private final Object fTest;
+	private final RunNotifier fNotifier;
+	private final Description fDescription;
+	private TestMethod fTestMethod;
+
+	public MethodRoadie(Object test, TestMethod method, RunNotifier notifier, Description description) {
+		fTest= test;
+		fNotifier= notifier;
+		fDescription= description;
+		fTestMethod= method;
+	}
+
+	public void run() {
+		if (fTestMethod.isIgnored()) {
+			fNotifier.fireTestIgnored(fDescription);
+			return;
+		}
+		fNotifier.fireTestStarted(fDescription);
+		try {
+			long timeout= fTestMethod.getTimeout();
+			if (timeout > 0)
+				runWithTimeout(timeout);
+			else
+				runTest();
+		} finally {
+			fNotifier.fireTestFinished(fDescription);
+		}
+	}
+
+	private void runWithTimeout(final long timeout) {
+		runBeforesThenTestThenAfters(new Runnable() {
+		
+			public void run() {
+				ExecutorService service= Executors.newSingleThreadExecutor();
+				Callable<Object> callable= new Callable<Object>() {
+					public Object call() throws Exception {
+						runTestMethod();
+						return null;
+					}
+				};
+				Future<Object> result= service.submit(callable);
+				service.shutdown();
+				try {
+					boolean terminated= service.awaitTermination(timeout,
+							TimeUnit.MILLISECONDS);
+					if (!terminated)
+						service.shutdownNow();
+					result.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation
+				} catch (TimeoutException e) {
+					addFailure(new Exception(String.format(""test timed out after %d milliseconds"", timeout)));
+				} catch (Exception e) {
+					addFailure(e);
+				}				
+			}
+		});
+	}
+	
+	public void runTest() {
+		runBeforesThenTestThenAfters(new Runnable() {
+			public void run() {
+				runTestMethod();
+			}
+		});
+	}
+
+	public void runBeforesThenTestThenAfters(Runnable test) {
+		try {
+			runBefores();
+			test.run();
+		} catch (FailedBefore e) {
+		} catch (Exception e) {
+			throw new RuntimeException(""test should never throw an exception to this level"");
+		} finally {
+			runAfters();
+		}		
+	}
+	
+	protected void runTestMethod() {
+		try {
+			fTestMethod.invoke(fTest);
+			if (fTestMethod.expectsException())
+				addFailure(new AssertionError(""Expected exception: "" + fTestMethod.getExpectedException().getName()));
+		} catch (InvocationTargetException e) {
+			Throwable actual= e.getTargetException();
+			if (actual instanceof AssumptionViolatedException)
+				return;
+			else if (!fTestMethod.expectsException())
+				addFailure(actual);
+			else if (fTestMethod.isUnexpected(actual)) {
+				String message= ""Unexpected exception, expected<"" + fTestMethod.getExpectedException().getName() + ""> but was<""
+					+ actual.getClass().getName() + "">"";
+				addFailure(new Exception(message, actual));
+			}
+		} catch (Throwable e) {
+			addFailure(e);
+		}
+	}
+	
+	private void runBefores() throws FailedBefore {
+		try {
+			try {
+				List<Method> befores= fTestMethod.getBefores();
+				for (Method before : befores)
+					before.invoke(fTest);
+			} catch (InvocationTargetException e) {
+				throw e.getTargetException();
+			}
+		} catch (AssumptionViolatedException e) {
+			throw new FailedBefore();
+		} catch (Throwable e) {
+			addFailure(e);
+			throw new FailedBefore();
+		}
+	}
+
+	private void runAfters() {
+		List<Method> afters= fTestMethod.getAfters();
+		for (Method after : afters)
+			try {
+				after.invoke(fTest);
+			} catch (InvocationTargetException e) {
+				addFailure(e.getTargetException());
+			} catch (Throwable e) {
+				addFailure(e); // Untested, but seems impossible
+			}
+	}
+
+	protected void addFailure(Throwable e) {
+		fNotifier.fireTestFailure(new Failure(fDescription, e));
+	}
+}
+
@@ -0,0 +1,93 @@
+package org.junit.internal.deprecated;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
+import org.junit.internal.runners.InitializationError;
+import org.junit.internal.runners.JUnit4ClassRunner;
+
+/**
+ * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
+ *             removed in the next release. Please use
+ *             {@link BlockJUnit4ClassRunner} in place of {@link JUnit4ClassRunner}.
+ */
+@Deprecated
+public class MethodValidator {
+
+	private final List<Throwable> fErrors= new ArrayList<Throwable>();
+
+	private TestClass fTestClass;
+
+	public MethodValidator(TestClass testClass) {
+		fTestClass = testClass;
+	}
+
+	public void validateInstanceMethods() {
+		validateTestMethods(After.class, false);
+		validateTestMethods(Before.class, false);
+		validateTestMethods(Test.class, false);
+		
+		List<Method> methods= fTestClass.getAnnotatedMethods(Test.class);
+		if (methods.size() == 0)
+			fErrors.add(new Exception(""No runnable methods""));
+	}
+
+	public void validateStaticMethods() {
+		validateTestMethods(BeforeClass.class, true);
+		validateTestMethods(AfterClass.class, true);
+	}
+	
+	public List<Throwable> validateMethodsForDefaultRunner() {
+		validateNoArgConstructor();
+		validateStaticMethods();
+		validateInstanceMethods();
+		return fErrors;
+	}
+	
+	public void assertValid() throws InitializationError {
+		if (!fErrors.isEmpty())
+			throw new InitializationError(fErrors);
+	}
+
+	public void validateNoArgConstructor() {
+		try {
+			fTestClass.getConstructor();
+		} catch (Exception e) {
+			fErrors.add(new Exception(""Test class should have public zero-argument constructor"", e));
+		}
+	}
+
+	private void validateTestMethods(Class<? extends Annotation> annotation,
+			boolean isStatic) {
+		List<Method> methods= fTestClass.getAnnotatedMethods(annotation);
+		
+		for (Method each : methods) {
+			if (Modifier.isStatic(each.getModifiers()) != isStatic) {
+				String state= isStatic ? ""should"" : ""should not"";
+				fErrors.add(new Exception(""Method "" + each.getName() + ""() ""
+						+ state + "" be static""));
+			}
+			if (!Modifier.isPublic(each.getDeclaringClass().getModifiers()))
+				fErrors.add(new Exception(""Class "" + each.getDeclaringClass().getName()
+						+ "" should be public""));
+			if (!Modifier.isPublic(each.getModifiers()))
+				fErrors.add(new Exception(""Method "" + each.getName()
+						+ "" should be public""));
+			if (each.getReturnType() != Void.TYPE)
+				fErrors.add(new Exception(""Method "" + each.getName()
+						+ "" should be void""));
+			if (each.getParameterTypes().length != 0)
+				fErrors.add(new Exception(""Method "" + each.getName()
+						+ "" should have no parameters""));
+		}
+	}
+}
@@ -0,0 +1,103 @@
+package org.junit.internal.deprecated;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
+import org.junit.internal.runners.JUnit4ClassRunner;
+
+/**
+ * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
+ *             removed in the next release. Please use
+ *             {@link BlockJUnit4ClassRunner} in place of {@link JUnit4ClassRunner}.
+ */
+@Deprecated
+public class TestClass {
+	private final Class<?> fClass;
+	
+	public TestClass(Class<?> klass) {
+		fClass= klass;
+	}
+
+	public List<Method> getTestMethods() {
+		return getAnnotatedMethods(Test.class);
+	}
+
+	List<Method> getBefores() {
+		return getAnnotatedMethods(BeforeClass.class);
+	}
+
+	List<Method> getAfters() {
+		return getAnnotatedMethods(AfterClass.class);
+	}
+	
+	public List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {
+		List<Method> results= new ArrayList<Method>();
+		for (Class<?> eachClass : getSuperClasses(fClass)) {
+			Method[] methods= eachClass.getDeclaredMethods();
+			for (Method eachMethod : methods) {
+				Annotation annotation= eachMethod.getAnnotation(annotationClass);
+				if (annotation != null && ! isShadowed(eachMethod, results)) 
+					results.add(eachMethod);
+			}
+		}
+		if (runsTopToBottom(annotationClass))
+			Collections.reverse(results);
+		return results;
+	}
+
+	private boolean runsTopToBottom(Class< ? extends Annotation> annotation) {
+		return annotation.equals(Before.class) || annotation.equals(BeforeClass.class);
+	}
+	
+	private boolean isShadowed(Method method, List<Method> results) {
+		for (Method each : results) {
+			if (isShadowed(method, each))
+				return true;
+		}
+		return false;
+	}
+
+	private boolean isShadowed(Method current, Method previous) {
+		if (! previous.getName().equals(current.getName()))
+			return false;
+		if (previous.getParameterTypes().length != current.getParameterTypes().length)
+			return false;
+		for (int i= 0; i < previous.getParameterTypes().length; i++) {
+			if (! previous.getParameterTypes()[i].equals(current.getParameterTypes()[i]))
+				return false;
+		}
+		return true;
+	}
+
+	private List<Class<?>> getSuperClasses(Class< ?> testClass) {
+		ArrayList<Class<?>> results= new ArrayList<Class<?>>();
+		Class<?> current= testClass;
+		while (current != null) {
+			results.add(current);
+			current= current.getSuperclass();
+		}
+		return results;
+	}
+
+	public Constructor<?> getConstructor() throws SecurityException, NoSuchMethodException {
+		return fClass.getConstructor();
+	}
+
+	public Class<?> getJavaClass() {
+		return fClass;
+	}
+
+	public String getName() {
+		return fClass.getName();
+	}
+
+}
@@ -0,0 +1,70 @@
+package org.junit.internal.deprecated;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.List;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.Test.None;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
+import org.junit.internal.runners.JUnit4ClassRunner;
+
+/**
+ * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
+ *             removed in the next release. Please use
+ *             {@link BlockJUnit4ClassRunner} in place of {@link JUnit4ClassRunner}.
+ */
+@Deprecated
+public class TestMethod {
+	private final Method fMethod;
+	private TestClass fTestClass;
+
+	public TestMethod(Method method, TestClass testClass) {
+		fMethod= method;
+		fTestClass= testClass;
+	}
+
+	public boolean isIgnored() {
+		return fMethod.getAnnotation(Ignore.class) != null;
+	}
+
+	public long getTimeout() {
+		Test annotation= fMethod.getAnnotation(Test.class);
+		if (annotation == null)
+			return 0;
+		long timeout= annotation.timeout();
+		return timeout;
+	}
+
+	protected Class<? extends Throwable> getExpectedException() {
+		Test annotation= fMethod.getAnnotation(Test.class);
+		if (annotation == null || annotation.expected() == None.class)
+			return null;
+		else
+			return annotation.expected();
+	}
+
+	boolean isUnexpected(Throwable exception) {
+		return ! getExpectedException().isAssignableFrom(exception.getClass());
+	}
+
+	boolean expectsException() {
+		return getExpectedException() != null;
+	}
+
+	List<Method> getBefores() {
+		return fTestClass.getAnnotatedMethods(Before.class);
+	}
+
+	List<Method> getAfters() {
+		return fTestClass.getAnnotatedMethods(After.class);
+	}
+
+	public void invoke(Object test) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
+		fMethod.invoke(test);
+	}
+
+}
@@ -0,0 +1,140 @@
+package org.junit.internal.runners;
+
+import java.util.List;
+
+import org.junit.internal.runners.links.ExpectException;
+import org.junit.internal.runners.links.Fail;
+import org.junit.internal.runners.links.FailOnTimeout;
+import org.junit.internal.runners.links.IgnoreTestNotifier;
+import org.junit.internal.runners.links.InvokeMethod;
+import org.junit.internal.runners.links.Notifier;
+import org.junit.internal.runners.links.RunAfters;
+import org.junit.internal.runners.links.RunBefores;
+import org.junit.internal.runners.links.RunTestNotifier;
+import org.junit.internal.runners.links.Statement;
+import org.junit.internal.runners.model.EachTestNotifier;
+import org.junit.internal.runners.model.FrameworkMethod;
+import org.junit.internal.runners.model.ReflectiveCallable;
+import org.junit.internal.runners.model.TestAnnotation;
+import org.junit.internal.runners.model.TestClass;
+import org.junit.internal.runners.model.TestMethod;
+import org.junit.runner.Description;
+import org.junit.runner.manipulation.Filterable;
+import org.junit.runner.manipulation.Sortable;
+import org.junit.runner.notification.RunNotifier;
+
+public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> implements Filterable, Sortable {
+	protected final List<FrameworkMethod> fTestMethods;
+
+	public BlockJUnit4ClassRunner(Class<?> klass) throws InitializationError {
+		this(new TestClass(klass));
+	}
+	
+	public BlockJUnit4ClassRunner(TestClass testClass) throws InitializationError {
+		super(testClass);
+		fTestMethods= computeTestMethods();
+		validate();
+	}
+	
+	//
+	// Override in subclasses
+	//
+
+	protected List<FrameworkMethod> computeTestMethods() {
+		return getTestClass().getTestMethods();
+	}
+
+	@Override
+	protected void collectInitializationErrors(List<Throwable> errors) {
+		getTestClass().validateMethodsForDefaultRunner(errors);
+	}
+
+	protected Object createTest() throws Exception {
+		return getTestClass().getConstructor().newInstance();
+	}
+
+	protected String testName(FrameworkMethod method) {
+		return method.getName();
+	}
+	
+	protected Statement childBlock(FrameworkMethod method) {
+		Object test;
+		try {
+			test= new ReflectiveCallable() {
+				@Override
+				protected Object runReflectiveCall() throws Throwable {
+					return createTest();
+				}
+			}.run();
+		} catch (Throwable e) {
+			return new Fail(e);
+		}
+
+		TestAnnotation annotation= new TestAnnotation(method);
+		
+		Statement link= invoke(method, test);
+		link= possiblyExpectingExceptions(annotation, link);
+		link= withPotentialTimeout(annotation, link);
+		link= withBefores(method, test, link);
+		link= withAfters(method, test, link);
+		return link;
+	}
+	
+	//
+	// Implementation of ParentRunner
+	// 
+	
+	@Override
+	protected void runChild(FrameworkMethod method, RunNotifier notifier) {
+		Description description= describeChild(method);
+		EachTestNotifier eachNotifier= new EachTestNotifier(notifier,
+				description);
+		notifying(method, childBlock(method)).run(eachNotifier);
+	}
+
+	@Override
+	protected Description describeChild(FrameworkMethod method) {
+		return Description.createTestDescription(getTestClass().getJavaClass(),
+				testName(method), method.getMethod().getAnnotations());
+	}
+
+	@Override
+	protected List<FrameworkMethod> getChildren() {
+		return fTestMethods;
+	}
+
+	//
+	// Statement builders
+	//
+	
+	protected Statement invoke(FrameworkMethod method, Object test) {
+		return new InvokeMethod(method, test);
+	}
+
+	protected Statement possiblyExpectingExceptions(TestAnnotation annotation,
+			Statement next) {
+		return annotation.expectsException() ? new ExpectException(next, annotation
+				.getExpectedException()) : next;
+	}
+
+	protected Statement withPotentialTimeout(TestAnnotation annotation,
+			Statement next) {
+		long timeout= annotation.getTimeout();
+		return timeout > 0 ? new FailOnTimeout(next, timeout) : next;
+	}
+
+	protected Statement withAfters(FrameworkMethod method, Object target,
+			Statement link) {
+		return new RunAfters(link, new TestMethod(getTestClass()), target);
+	}
+
+	protected Statement withBefores(FrameworkMethod method, Object target,
+			Statement link) {
+		return new RunBefores(link, new TestMethod(getTestClass()), target);
+	}
+
+	protected Notifier notifying(FrameworkMethod method, Statement link) {
+		return method.isIgnored() ? new IgnoreTestNotifier()
+				: new RunTestNotifier(link);
+	}
+}
@@ -1,140 +1,147 @@
 package org.junit.internal.runners;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Iterator;
 import java.util.List;
 
-import org.junit.internal.runners.links.ExpectException;
-import org.junit.internal.runners.links.Fail;
-import org.junit.internal.runners.links.FailOnTimeout;
-import org.junit.internal.runners.links.IgnoreTestNotifier;
-import org.junit.internal.runners.links.InvokeMethod;
-import org.junit.internal.runners.links.Notifier;
-import org.junit.internal.runners.links.RunAfters;
-import org.junit.internal.runners.links.RunBefores;
-import org.junit.internal.runners.links.RunTestNotifier;
-import org.junit.internal.runners.links.Statement;
-import org.junit.internal.runners.model.EachTestNotifier;
-import org.junit.internal.runners.model.FrameworkMethod;
-import org.junit.internal.runners.model.ReflectiveCallable;
-import org.junit.internal.runners.model.TestAnnotation;
-import org.junit.internal.runners.model.TestClass;
-import org.junit.internal.runners.model.TestMethod;
+import org.junit.internal.deprecated.ClassRoadie;
+import org.junit.internal.deprecated.MethodRoadie;
+import org.junit.internal.deprecated.MethodValidator;
+import org.junit.internal.deprecated.TestClass;
+import org.junit.internal.deprecated.TestMethod;
 import org.junit.runner.Description;
+import org.junit.runner.Runner;
+import org.junit.runner.manipulation.Filter;
 import org.junit.runner.manipulation.Filterable;
+import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.manipulation.Sortable;
+import org.junit.runner.manipulation.Sorter;
+import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
 
-public class JUnit4ClassRunner extends ParentRunner<FrameworkMethod> implements Filterable, Sortable {
-	protected final List<FrameworkMethod> fTestMethods;
+/**
+ * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
+ *             removed in the next release. Please use
+ *             {@link BlockJUnit4ClassRunner} in place of {@link JUnit4ClassRunner}.
+ */
+@Deprecated
+public class JUnit4ClassRunner extends Runner implements Filterable, Sortable {
+	private final List<Method> fTestMethods;
+	private TestClass fTestClass;
 
 	public JUnit4ClassRunner(Class<?> klass) throws InitializationError {
-		this(new TestClass(klass));
+		fTestClass= new TestClass(klass);
+		fTestMethods= getTestMethods();
+		validate();
 	}
 	
-	public JUnit4ClassRunner(TestClass testClass) throws InitializationError {
-		super(testClass);
-		fTestMethods= computeTestMethods();
-		validate();
+	protected List<Method> getTestMethods() {
+		return fTestClass.getTestMethods();
 	}
 	
-	//
-	// Override in subclasses
-	//
+	protected void validate() throws InitializationError {
+		MethodValidator methodValidator= new MethodValidator(fTestClass);
+		methodValidator.validateMethodsForDefaultRunner();
+		methodValidator.assertValid();
+	}
+
+	@Override
+	public void run(final RunNotifier notifier) {
+		new ClassRoadie(notifier, fTestClass, getDescription(), new Runnable() {
+			public void run() {
+				runMethods(notifier);
+			}
+		}).runProtected();
+	}
 
-	protected List<FrameworkMethod> computeTestMethods() {
-		return getTestClass().getTestMethods();
+	protected void runMethods(final RunNotifier notifier) {
+		for (Method method : fTestMethods)
+			invokeTestMethod(method, notifier);
 	}
 
 	@Override
-	protected void collectInitializationErrors(List<Throwable> errors) {
-		getTestClass().validateMethodsForDefaultRunner(errors);
+	public Description getDescription() {
+		Description spec= Description.createSuiteDescription(getName(), classAnnotations());
+		List<Method> testMethods= fTestMethods;
+		for (Method method : testMethods)
+			spec.addChild(methodDescription(method));
+		return spec;
 	}
 
-	protected Object createTest() throws Exception {
-		return getTestClass().getConstructor().newInstance();
+	protected Annotation[] classAnnotations() {
+		return fTestClass.getJavaClass().getAnnotations();
 	}
 
-	protected String testName(FrameworkMethod method) {
-		return method.getName();
+	protected String getName() {
+		return getTestClass().getName();
 	}
 	
-	protected Statement childBlock(FrameworkMethod method) {
+	protected Object createTest() throws Exception {
+		return getTestClass().getConstructor().newInstance();
+	}
+
+	protected void invokeTestMethod(Method method, RunNotifier notifier) {
+		Description description= methodDescription(method);
 		Object test;
 		try {
-			test= new ReflectiveCallable() {
-				@Override
-				protected Object runReflectiveCall() throws Throwable {
-					return createTest();
-				}
-			}.run();
-		} catch (Throwable e) {
-			return new Fail(e);
+			test= createTest();
+		} catch (InvocationTargetException e) {
+			testAborted(notifier, description, e.getCause());
+			return;			
+		} catch (Exception e) {
+			testAborted(notifier, description, e);
+			return;
 		}
-
-		TestAnnotation annotation= new TestAnnotation(method);
-		
-		Statement link= invoke(method, test);
-		link= possiblyExpectingExceptions(annotation, link);
-		link= withPotentialTimeout(annotation, link);
-		link= withBefores(method, test, link);
-		link= withAfters(method, test, link);
-		return link;
-	}
-	
-	//
-	// Implementation of ParentRunner
-	// 
-	
-	@Override
-	protected void runChild(FrameworkMethod method, RunNotifier notifier) {
-		Description description= describeChild(method);
-		EachTestNotifier eachNotifier= new EachTestNotifier(notifier,
-				description);
-		notifying(method, childBlock(method)).run(eachNotifier);
+		TestMethod testMethod= wrapMethod(method);
+		new MethodRoadie(test, testMethod, notifier, description).run();
 	}
 
-	@Override
-	protected Description describeChild(FrameworkMethod method) {
-		return Description.createTestDescription(getTestClass().getJavaClass(),
-				testName(method), method.getMethod().getAnnotations());
+	private void testAborted(RunNotifier notifier, Description description,
+			Throwable e) {
+		notifier.fireTestStarted(description);
+		notifier.fireTestFailure(new Failure(description, e));
+		notifier.fireTestFinished(description);
 	}
 
-	@Override
-	protected List<FrameworkMethod> getChildren() {
-		return fTestMethods;
+	protected TestMethod wrapMethod(Method method) {
+		return new TestMethod(method, fTestClass);
 	}
 
-	//
-	// Statement builders
-	//
-	
-	protected Statement invoke(FrameworkMethod method, Object test) {
-		return new InvokeMethod(method, test);
+	protected String testName(Method method) {
+		return method.getName();
 	}
 
-	protected Statement possiblyExpectingExceptions(TestAnnotation annotation,
-			Statement next) {
-		return annotation.expectsException() ? new ExpectException(next, annotation
-				.getExpectedException()) : next;
+	protected Description methodDescription(Method method) {
+		return Description.createTestDescription(getTestClass().getJavaClass(), testName(method), testAnnotations(method));
 	}
 
-	protected Statement withPotentialTimeout(TestAnnotation annotation,
-			Statement next) {
-		long timeout= annotation.getTimeout();
-		return timeout > 0 ? new FailOnTimeout(next, timeout) : next;
+	protected Annotation[] testAnnotations(Method method) {
+		return method.getAnnotations();
 	}
 
-	protected Statement withAfters(FrameworkMethod method, Object target,
-			Statement link) {
-		return new RunAfters(link, new TestMethod(getTestClass()), target);
+	public void filter(Filter filter) throws NoTestsRemainException {
+		for (Iterator<Method> iter= fTestMethods.iterator(); iter.hasNext();) {
+			Method method= iter.next();
+			if (!filter.shouldRun(methodDescription(method)))
+				iter.remove();
+		}
+		if (fTestMethods.isEmpty())
+			throw new NoTestsRemainException();
 	}
 
-	protected Statement withBefores(FrameworkMethod method, Object target,
-			Statement link) {
-		return new RunBefores(link, new TestMethod(getTestClass()), target);
+	public void sort(final Sorter sorter) {
+		Collections.sort(fTestMethods, new Comparator<Method>() {
+			public int compare(Method o1, Method o2) {
+				return sorter.compare(methodDescription(o1), methodDescription(o2));
+			}
+		});
 	}
 
-	protected Notifier notifying(FrameworkMethod method, Statement link) {
-		return method.isIgnored() ? new IgnoreTestNotifier()
-				: new RunTestNotifier(link);
+	protected TestClass getTestClass() {
+		return fTestClass;
 	}
-}
+}
\ No newline at end of file
@@ -9,7 +9,7 @@
 import java.util.List;
 
 import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
 import org.junit.internal.runners.links.Statement;
 import org.junit.internal.runners.model.FrameworkMethod;
 import org.junit.internal.runners.model.TestClass;
@@ -74,7 +74,7 @@ public Parameterized(Class<?> klass) throws Throwable {
 		validate();
 	}
 	
-	private static class TestClassRunnerForParameters extends JUnit4ClassRunner {
+	private static class TestClassRunnerForParameters extends BlockJUnit4ClassRunner {
 		private final int fParameterSetNumber;
 
 		private final List<Object[]> fParameterList;
@@ -3,6 +3,6 @@
  *
  * @since 4.0
  * @see org.junit.runner.Runner
- * @see org.junit.internal.runners.JUnit4ClassRunner
+ * @see org.junit.internal.runners.BlockJUnit4ClassRunner
  */
 package org.junit.runners;
\ No newline at end of file
@@ -8,6 +8,7 @@
 import org.junit.tests.assertion.AssertionTest;
 import org.junit.tests.assertion.BothTest;
 import org.junit.tests.assertion.EachTest;
+import org.junit.tests.deprecated.JUnit4ClassRunnerTest;
 import org.junit.tests.description.AnnotatedDescriptionTest;
 import org.junit.tests.description.SuiteDescriptionTest;
 import org.junit.tests.description.TestDescriptionTest;
@@ -105,7 +106,8 @@
 	AllMembersSupplierTest.class,
 	MatcherTest.class,
 	ObjectContractTest.class,
-	TheoriesPerformanceTest.class
+	TheoriesPerformanceTest.class,
+	JUnit4ClassRunnerTest.class
 })
 public class AllTests {
 	public static Test suite() {
@@ -0,0 +1,51 @@
+package org.junit.tests.deprecated;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
+import org.junit.Test;
+import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.runner.JUnitCore;
+import org.junit.runner.Result;
+import org.junit.runner.RunWith;
+
+/*
+ * This is a simple smoke test to make sure the old JUnit4ClassRunner basically works.
+ * Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.
+ */
+public class JUnit4ClassRunnerTest {
+
+	@RunWith(JUnit4ClassRunner.class)
+	public static class Example {
+		@Test public void success() {}
+		@Test public void failure() {
+			fail();
+		}
+	}
+	
+	@Test
+	public void runWithOldJUnit4ClassRunner() {
+		Result result= JUnitCore.runClasses(Example.class);
+		assertThat(result.getRunCount(), is(2));
+		assertThat(result.getFailureCount(), is(1));
+	}
+
+	@RunWith(JUnit4ClassRunner.class)
+	public static class UnconstructableExample {
+		public UnconstructableExample() {
+			throw new UnsupportedOperationException();
+		}
+		@Test public void success() {}
+		@Test public void failure() {
+			fail();
+		}
+	}
+
+	
+	@Test
+	public void runWithOldJUnit4ClassRunnerAndBadConstructor() {
+		Result result= JUnitCore.runClasses(UnconstructableExample.class);
+		assertThat(result.getRunCount(), is(2));
+		assertThat(result.getFailureCount(), is(2));
+	}
+}
@@ -9,7 +9,7 @@
 import junit.framework.TestResult;
 import org.junit.Before;
 import org.junit.Test;
-import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
 import org.junit.runner.Description;
 import org.junit.runner.RunWith;
 import org.junit.runner.Runner;
@@ -91,7 +91,7 @@ public void generatedErrorTestsMatchUp() {
 		assertTrue(shouldFail == listener.getError());
 	}
 	
-	public static class InitializesWithError extends JUnit4ClassRunner {
+	public static class InitializesWithError extends BlockJUnit4ClassRunner {
 		public InitializesWithError(Class<?> klass) throws Exception {
 			super(klass);
 			throw new Exception();
@@ -14,7 +14,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
@@ -85,7 +85,7 @@ public static Collection<Object[]> params() {
 	
 	private List<Throwable> validateAllMethods(Class<?> clazz) {
 		try {
-			new JUnit4ClassRunner(clazz);
+			new BlockJUnit4ClassRunner(clazz);
 		} catch (InitializationError e) {
 			return e.getCauses();
 		}
@@ -17,7 +17,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.internal.runners.BlockJUnit4ClassRunner;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
@@ -88,7 +88,7 @@ static public class SubShadows extends SuperWrong {
 
 	private List<Throwable> validateAllMethods(Class<?> clazz) {
 		try {
-			new JUnit4ClassRunner(clazz);
+			new BlockJUnit4ClassRunner(clazz);
 		} catch (InitializationError e) {
 			return e.getCauses();
 		}
"
https://github.com/square/retrofit/commit/00d3f9070e15e514430e5dbb2aec602547c3c92d,AndroidLog: Added getTag() and logChunk() methods  for easier subclassing. ,https://api.github.com/repos/square/retrofit/commits/00d3f9070e15e514430e5dbb2aec602547c3c92d,"@@ -16,7 +16,15 @@ public AndroidLog(String tag) {
   @Override public void log(String message) {
     for (int i = 0, len = message.length(); i < len; i += LOG_CHUNK_SIZE) {
       int end = Math.min(len, i + LOG_CHUNK_SIZE);
-      Log.d(tag, message.substring(i, end));
+      logChunk(message.substring(i, end));
     }
   }
+
+  public void logChunk(String chunk) {
+    Log.d(getTag(), chunk);
+  }
+
+  public String getTag() {
+    return tag;
+  }
 }
"
https://github.com/square/okhttp/commit/18f3564a4f2b17c3067e7f02337e3909ba5cb3ba,Update deploy_snapshot.sh to temporarily ignore javadoc errors and compile tests but not run ( <pr_link> ) ,https://api.github.com/repos/square/okhttp/commits/18f3564a4f2b17c3067e7f02337e3909ba5cb3ba,"@@ -21,6 +21,6 @@ elif [ ""$TRAVIS_BRANCH"" != ""$BRANCH"" ]; then
   echo ""Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'.""
 else
   echo ""Deploying snapshot...""
-  mvn clean source:jar javadoc:jar deploy --settings="".buildscript/settings.xml"" -Dmaven.test.skip=true
+  mvn clean package source:jar javadoc:jar deploy --settings="".buildscript/settings.xml"" -Dmaven.javadoc.failOnError=false -DskipTests
   echo ""Snapshot deployed!""
 fi
"
https://github.com/apache/dubbo/commit/793bf8244411c33b675e08f1499122bc82654d44,Defensive check to solve issue <issue_link> ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/793bf8244411c33b675e08f1499122bc82654d44,
https://github.com/square/okhttp/commit/c8638813ff5f90715417e489b342aae5e410c5b2,Build setup tweak to work around release plugin bug.  <enter> http://jira.codehaus.org/browse/MRELEASE-812 ,https://api.github.com/repos/square/okhttp/commits/c8638813ff5f90715417e489b342aae5e410c5b2,
https://github.com/junit-team/junit4/commit/610b38e6c9753ab01b8aef093d2fcaeabe3a7a32,Updated release notes  <enter> Signed-off-by: Kent Beck <kent@threeriversinstitute.org> ,https://api.github.com/repos/junit-team/junit4/commits/610b38e6c9753ab01b8aef093d2fcaeabe3a7a32,
https://github.com/square/okhttp/commit/0665b628fafec38271d7a66421ae04c7fd35dd29,Add support for following HTTP 307 temporary redirects.  <enter> Fixes Android bug 41739. ,https://api.github.com/repos/square/okhttp/commits/0665b628fafec38271d7a66421ae04c7fd35dd29,
https://github.com/square/okhttp/commit/59e68cd2bcba789e7faca70f8910afd2edeed2be,"Introduce Exchange.  <enter> This is the payoff that preceding changes have been working towards. This splits StreamAllocation into three parts: <enter>  - ExchangeFinder: strategy to allocate connections for exchanges  - Exchange: a single request/response pair  - Transmitter: a sequence of exchanges for a Call <enter> The refactoring isn't totally complete, but this should be the last big one. <enter>  <issue_link> ",https://api.github.com/repos/square/okhttp/commits/59e68cd2bcba789e7faca70f8910afd2edeed2be,
https://github.com/square/okhttp/commit/e36d7ecc26be18021da3555fc8b14381df7af34d,"Fix flakiness in CallTest.cancelTagImmediatelyAfterEnqueue()  <enter> There's a race where the HTTP engine has been created, but not yet connected and the cancel isn't as immediate as it could be. Fix the test by making sure there's a response to be retrieved. <enter> With the upcoming connection pool changes we might make the implementation more robust. <enter>  Closes :  <issue_link> ",https://api.github.com/repos/square/okhttp/commits/e36d7ecc26be18021da3555fc8b14381df7af34d,
https://github.com/spring-projects/spring-boot/commit/8a0f0354dfed2fc6d4cb1b046ec03fe5b7ff1146,"Disable Log4J2's shutdown hook by default  <enter> Log4J2 enables its shutdown hook by default. When the JVM is exiting, this creates a race between logging that happens during the application context being closed and Log4J2 being shut down such that the logging is lost. <enter> This commit updates SpringBootConfigurationFactory so that it produces a custom sub-class of DefaultConfiguration that disables the shutdown hook by default. In addition to solving the problem described above, this also aligns the Log4J2 logging system with the logging.register-shutdown-hook property which defaults to false. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/8a0f0354dfed2fc6d4cb1b046ec03fe5b7ff1146,
https://github.com/square/retrofit/commit/54c8e17ad51bd35e75009233c3be6cdc3afe310e,Update documentation for handling of @field and @part values. ,https://api.github.com/repos/square/retrofit/commits/54c8e17ad51bd35e75009233c3be6cdc3afe310e,
https://github.com/junit-team/junit4/commit/16a2b51b9d9425cd7dacad85e2df97985996ca8d,"Disable parts of doclint for the site's javadoc.  <enter> This is a follow-up to  <otherCommit_link> . That commit is missing to apply the doclint rules to site generation. Hence the site goal fails because of doclint issues. Now doclint is disabled for all groups but accessibility and reference for the site generation, too. ",https://api.github.com/repos/junit-team/junit4/commits/16a2b51b9d9425cd7dacad85e2df97985996ca8d,
https://github.com/square/okhttp/commit/5569a0d20f4669ddde8227d8777de54ddf373181,Remove obsolete @JvmField ,https://api.github.com/repos/square/okhttp/commits/5569a0d20f4669ddde8227d8777de54ddf373181,
https://github.com/square/retrofit/commit/26d19ea8877696a253be8c00b2baed6b359baaa2,Java 7 is required since <otherCommit_link> ,https://api.github.com/repos/square/retrofit/commits/26d19ea8877696a253be8c00b2baed6b359baaa2,
https://github.com/square/okhttp/commit/4ab6a8258b0df3a3528029f810e1f48952dba2d7,Remove old SSL protocol method. ,https://api.github.com/repos/square/okhttp/commits/4ab6a8258b0df3a3528029f810e1f48952dba2d7,
https://github.com/square/okhttp/commit/18b2660873ed8f028ee72981c882ed676aa08030,"New CertificateAuthorityCouncil class to normalize certificate chains.  <enter> The goal of this is to get the root CA certificate into the certificate chain, so that it can be considered by the certificate pinner. The work to integrate CertificateAuthorityCouncil with CertificatePinner will come in a follow-up PR. <enter> See:  <issue_link> ",https://api.github.com/repos/square/okhttp/commits/18b2660873ed8f028ee72981c882ed676aa08030,
https://github.com/spring-projects/spring-boot/commit/205fa2507b019f5e1348f6bc554fdd18691152ba,Remove maven-eclipse-plugin as it has been retired  <enter> Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/205fa2507b019f5e1348f6bc554fdd18691152ba,
https://github.com/square/okhttp/commit/cf63fcc48ae3e1dc3fb32120ca2fb04877fa041e,Remove creation of 'fat' jar.  <enter> Since the 'okhttp-protocols' module no longer exists we do not need to create this. ,https://api.github.com/repos/square/okhttp/commits/cf63fcc48ae3e1dc3fb32120ca2fb04877fa041e,
https://github.com/junit-team/junit4/commit/5eee07b3e21f196b8cb937fb88eb8cf4be694f76,"Optimize ParentRunner.filter for nested suites  <enter> Prior to this change, applying a filter to a nested suite would create redundant nested filters ",https://api.github.com/repos/junit-team/junit4/commits/5eee07b3e21f196b8cb937fb88eb8cf4be694f76,
https://github.com/square/retrofit/commit/b6748ac88759a4768c1003930bb5c921ac49d8d1,Mark GSON as provided since we jarjar it in. ,https://api.github.com/repos/square/retrofit/commits/b6748ac88759a4768c1003930bb5c921ac49d8d1,
https://github.com/junit-team/junit4/commit/24dfdd762e753c83babca3768d4b508cf5c6a86c,Fix dead link to the ant task in FAQ ( <pr_link> )  <enter> Documentation to the ant junit task has been moved to another location. ,https://api.github.com/repos/junit-team/junit4/commits/24dfdd762e753c83babca3768d4b508cf5c6a86c,
https://github.com/square/okhttp/commit/50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d,"Move out of the libcore package.  <enter> To promote the code into AOSP, we'll keep this package as-is and do the jarjar in Android instead. ",https://api.github.com/repos/square/okhttp/commits/50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d,
https://github.com/square/okhttp/commit/5ba145aa6c737878281c3fc655657002320b71c0,"Limit recovery attempts for REFUSED_STREAM errors  <enter> We limit per-connection retries but not per-call retries, so this was creating large numbers of connections each of which called the server and accepted yet another REFUSED_STREAM. <enter> Instead we fail sooner with a StreamResetException. <enter> This shows that the ExchangeFinder interface is still somewhat inadequate to support all of the use cases we have. ",https://api.github.com/repos/square/okhttp/commits/5ba145aa6c737878281c3fc655657002320b71c0,
https://github.com/apache/dubbo/commit/5caa422add46efa9b6de8c0e763e1ccecbcbfacd,just for modify comments and imports ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/5caa422add46efa9b6de8c0e763e1ccecbcbfacd,
https://github.com/square/retrofit/commit/745e29b7832c3cc37e7b6d395aded79a908c3bbc,"Remove deprecated error identifier.  <enter> This whole class is probably going to die or morph, but killing off tech debt before major refactorings makes me feel good. ",https://api.github.com/repos/square/retrofit/commits/745e29b7832c3cc37e7b6d395aded79a908c3bbc,
https://github.com/spring-projects/spring-boot/commit/5afe4743cbf4ff69ffe4bbcefa4508b1a4ac6f4b,Remove deprecated configuration properties  <enter> This commit removes the following deprecated properties: <enter> * `server.connection-timeout` * `server.use-forward-headers` * `server.jetty.max-http-post-size` * `server.tomcat.max-http-post-size` <enter>  Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/5afe4743cbf4ff69ffe4bbcefa4508b1a4ac6f4b,
https://github.com/spring-projects/spring-boot/commit/24e873cd7c2608e642fd6e90460bc98079ba4e27,Move files from /.eclipse into /eclipse  <enter> Move the `eclipse.properties` file from `.eclipse` into `eclipse` since the IDE plugin supports both. ,https://api.github.com/repos/spring-projects/spring-boot/commits/24e873cd7c2608e642fd6e90460bc98079ba4e27,
https://github.com/square/okhttp/commit/0e0f3a2d8d95278bf362eaeb08f13516e383fafd,"Push OkHttp 3.14.x into the sea. It is no longer supported. ( <pr_link> )  <enter> OkHttp 4.x is our only branch receiving security fixes, bug fixes, and new features. <enter> OkHttp 3.12.x gets security fixes only. ",https://api.github.com/repos/square/okhttp/commits/0e0f3a2d8d95278bf362eaeb08f13516e383fafd,
https://github.com/square/retrofit/commit/246bef5bf34c0598a91038b2e15bace7718408d4,Remove old ProGuard nonsense.  <enter> As of API 26 the android.jar contains the classes checked by Platform and used by Platform.Java8. And we don't encourage throwing checked exceptions from the service method but instead routing them through your call adapter. ,https://api.github.com/repos/square/retrofit/commits/246bef5bf34c0598a91038b2e15bace7718408d4,
https://github.com/square/retrofit/commit/2e15cf9e75e4204aa492ecc1cbe53053f95a2a8f,Promote Android logging to a class which knows about chunking.  <enter> Remove the concept of chunking from calling code. This is an Android-specific implementation detail which is now only performed when needed. ,https://api.github.com/repos/square/retrofit/commits/2e15cf9e75e4204aa492ecc1cbe53053f95a2a8f,
https://github.com/square/retrofit/commit/9d683b75b111e60d30da8a03335d2ce71f5e8585,"Migrate forced suspension mechanism from yield to Dispatcher.Default  <enter> Since it's possible for certain dispatchers to completely avoid yielding, and currently the immediate dispatchers exhibit this behavior, we need an alternate mechanism of forcing suspension or UndeclaredThrowableExceptions will still be seen. <enter> Retrofit does not have its own thread pool onto which we can defer resuming. Instead we rely to Dispatchers.Default and forcibly suspend the caller using low-level coroutine intrinsics. ",https://api.github.com/repos/square/retrofit/commits/9d683b75b111e60d30da8a03335d2ce71f5e8585,
https://github.com/spring-projects/spring-boot/commit/ae3225e76e6f5e7d7680bfd9b5cca9da13a6efbc,"Mention that Lettuce requires commons-pool2  <enter> We intend to remove this limitation in a future milestone but as the Lettuce auto-configuration requires `commons-pool2`, this commit updates the How-To to mention that. <enter> See  <pr_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/ae3225e76e6f5e7d7680bfd9b5cca9da13a6efbc,
https://github.com/junit-team/junit4/commit/1360f9b696f2fb1bc32b16b070ffb3363a88864f,Update Maven GPG plugin from 1.4 to 1.5.  <enter> Just to keep up-to-date. Release notes:  http://jira.codehaus.org/browse/MGPG/fixforversion/17635 ,https://api.github.com/repos/junit-team/junit4/commits/1360f9b696f2fb1bc32b16b070ffb3363a88864f,
https://github.com/square/okhttp/commit/16f1d048165d2bf0aee4833ff7d8b415f537ce64,"api has changed, fixing the example ",https://api.github.com/repos/square/okhttp/commits/16f1d048165d2bf0aee4833ff7d8b415f537ce64,
https://github.com/square/okhttp/commit/32a2b1d8d000a19d4a340cc1d77a68973a9d65dc,"OkBuffer API sketch.  <enter> I'm unhappy with java.io:  * No timeouts.  * Every layer needs to copy bytes around. Always copying bytes.  * Features like mark/reset and available() are clumsy.  * Its awkard in mixed text/binary protocols like HTTP because    character decoding is separate and takes over the stream. <enter> Unfortunately java.nio isn't better, just different:  * It's complex.  * Buffers are fixed size.  * No built-in buffer pooling.  * Features like mark/reset/position are clumsy. <enter> This is an obnoxious attempt at a 3rd I/O interface, mostly inspired by InputStream and OutputStream, but using growable buffers instead of byte arrays as the core data container. ",https://api.github.com/repos/square/okhttp/commits/32a2b1d8d000a19d4a340cc1d77a68973a9d65dc,
https://github.com/junit-team/junit4/commit/d2b75f93d21d2584efab1129aacd1f3020c37fca,"Document limitationBuild with Maven 3.1.1 (using Maven Wrapper) <enter>
This makes the build independent from the Maven version that is
installed on the build machine. E.g. Travis has Maven 3.5.6 installed
that does not support Java 6 anymore.
Maven version 3.1.1 is used because all newer version don't support Java 1.5.",https://api.github.com/repos/junit-team/junit4/commits/d2b75f93d21d2584efab1129aacd1f3020c37fca,
https://github.com/spring-projects/spring-boot/commit/893654bdd1d71fdf42b21d8ca16c4c18faf6a3ea,Update documentation for new HealthIndicator support ,https://api.github.com/repos/spring-projects/spring-boot/commits/893654bdd1d71fdf42b21d8ca16c4c18faf6a3ea,
https://github.com/junit-team/junit4/commit/8a367c1b918f02135d333f3cea8b576c20287361,"Revert 'ExternalResource: declare after() to throw Throwable ( <pr_link> )'  <enter> Revert commit  <otherCommit_link> . It breaks code that extends ExternalResource, overrides after() and calls super.after() in after(). ",https://api.github.com/repos/junit-team/junit4/commits/8a367c1b918f02135d333f3cea8b576c20287361,
https://github.com/junit-team/junit4/commit/a90b496a6595856066504baf4f737fb853a6e45d,"Ensure exceptions from methodBlock() don't result in unrooted tests.  <enter> The introduction of the runLeaf() method in BlockJUnit4ClassRunner in JUnit 4.9 introduced a regression with regard to exception handling. <enter> Specifically, the invocation of methodBlock() is no longer executed within a try-catch block as was the case in previous versions of JUnit. <enter> Custom modifications to methodBlock() or the methods it invokes may in fact throw exceptions. In such cases, exceptions thrown from methodBlock() cause the current test execution to abort immediately. As a result, the failing test method is unrooted in test reports, and subsequent test methods are never invoked. Furthermore, RunListeners registered with JUnit are not notified. <enter> This commit addresses this issue by wrapping the invocation of methodBlock() within a try-catch block. If an exception is not thrown, the resulting Statement is passed to runLeaf(). If an exception is thrown, it is wrapped in a Fail statement which is passed to runLeaf(). <enter>  Closes   <issue_link>   Closes   <pr_link> ",https://api.github.com/repos/junit-team/junit4/commits/a90b496a6595856066504baf4f737fb853a6e45d,
https://github.com/junit-team/junit4/commit/0d6cd750d53486f01f12ddfee8657d94b5940574,Remove old todo ,https://api.github.com/repos/junit-team/junit4/commits/0d6cd750d53486f01f12ddfee8657d94b5940574,
https://github.com/square/okhttp/commit/0d069f3b7bc524320fc76051408384f8ece77412,Prefer ByteString.encodeString.  <enter> This saves cloning the byte array because the byte array can't be modified by the caller. ,https://api.github.com/repos/square/okhttp/commits/0d069f3b7bc524320fc76051408384f8ece77412,
https://github.com/spring-projects/spring-boot/commit/85c0b44dcbbe4d201f8b7fd72a97c31c2d07a3ec,"Test that LaunchedURLClassLoader works when thread is interrupted  <enter> Previously, RandomAccessDataFile used a semaphore and acquired it interruptibly. This meant that an interrupted thread was unable to access the file. Notably, this would prevent LaunchedURLClassLoader from loading classes or resources on an interrupted thread. <enter> The previous commit ( <otherCommit_link> ) updates RandomAccessDataFile to acquire the semaphore uninterruptibly. This commit adds a test to LaunchedURLClassLoader to verify that it can now load a resource from an interrupted thread. <enter>  Closes   <pr_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/85c0b44dcbbe4d201f8b7fd72a97c31c2d07a3ec,
https://github.com/spring-projects/spring-boot/commit/f9d94c6ed080c45bc96a76e134d9db5bb038f900,Remove duplicate word in docs ,https://api.github.com/repos/spring-projects/spring-boot/commits/f9d94c6ed080c45bc96a76e134d9db5bb038f900,
https://github.com/spring-projects/spring-boot/commit/2a85a2557d37e133a10a513fc71b5ccf4ee2d4ff,"Fix health indicator auto-configuration order  <enter> Previously, the health auto-configuration `AutoconfigureOrder` entry for couchbase was referring to the standard couchbase auto-configuration that is not responsible to configure the `CouchbaseOperations` bean. Yet, the health indicator implementation was relying on the presence of such a bean. <enter> This commit fixes the `AutoconfigureOrder` entry so that it refers to `CouchbaseDataAutoConfiguration` now. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/2a85a2557d37e133a10a513fc71b5ccf4ee2d4ff,
https://github.com/spring-projects/spring-boot/commit/fe3d2c39a0f4cf016c8ceb27dbeab5508c85e65f,Fix broken links in the documentation ,https://api.github.com/repos/spring-projects/spring-boot/commits/fe3d2c39a0f4cf016c8ceb27dbeab5508c85e65f,
https://github.com/spring-projects/spring-boot/commit/715cf7da7564daaa8c349d34bd826b27ad71b183,"Do not enable cglib if spring.aop.proxy-target-class is configured  <enter> This commit makes sure to honour the `spring.aop.proxy-target-class` property if set by the user. Previously, the `PersistenceExceptionTranslationPostProcessor` was always configured to use cglib, regardless of the value of that property. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/715cf7da7564daaa8c349d34bd826b27ad71b183,
https://github.com/spring-projects/spring-boot/commit/e69ec6bb09e93aa5d240cfdb826e93cebb91278e,"Log classpath once environment has been prepared  <enter> Previously, the classpath would be logged in response to the ApplicationStartedEvent. At this point, logging could be disabled while the logging system is being initialized, or because the log levels configured in the environment have not yet been applied. <enter> This commit moves the logging to happen in response to an ApplicationEnvironmentPreparedEvent by which point the logging system has been initialized and its levels have been configured. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/e69ec6bb09e93aa5d240cfdb826e93cebb91278e,
https://github.com/square/retrofit/commit/948a0db7ef1d46c66237ed2feb9f6f08ee159c68,"Allow service interfaces to extend other interfaces  <enter> With a higher minSdkVersion, the bug which prevented this on Android no longer exists. ",https://api.github.com/repos/square/retrofit/commits/948a0db7ef1d46c66237ed2feb9f6f08ee159c68,
https://github.com/spring-projects/spring-boot/commit/da4f8514b293ef1c99deb0024e8147d4e553aa49,Add byte-buddy managed dependency  <enter> Add a managed dependency for byte-buddy since Mockito needs 1.6 and Hibernate pulls in 1.5. <enter> See  <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/da4f8514b293ef1c99deb0024e8147d4e553aa49,
https://github.com/square/okhttp/commit/09f424f12e48e2640915bf61c86a9ecd928e459e,fix README.md typo ( <pr_link> ) ,https://api.github.com/repos/square/okhttp/commits/09f424f12e48e2640915bf61c86a9ecd928e459e,
https://github.com/square/retrofit/commit/0fff59140b5791ad0f1b1c7bf7826db2e00a73f1,Pull out ServiceMethod base class  <enter> This will allow us to support multiple forms of invocation beyond HTTP calls. ,https://api.github.com/repos/square/retrofit/commits/0fff59140b5791ad0f1b1c7bf7826db2e00a73f1,
https://github.com/spring-projects/spring-boot/commit/8561929164846ef4b3323a8b3f88a09ea1441785,"Improve Spring Session sample  <enter> This commit improves the Spring Session sample by providing multiple build profiles that make it possible to easily try out different session stores. By default, JDBC session store backed by an in-memory embedded H2 database is used. <enter> See  <pr_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/8561929164846ef4b3323a8b3f88a09ea1441785,
https://github.com/spring-projects/spring-boot/commit/fa6ee8e34d5f76ee57dd9f9c84bb047c5ee3d356,Clarify h2-console requires a servlet-based web app  <enter> Fixes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/fa6ee8e34d5f76ee57dd9f9c84bb047c5ee3d356,
https://github.com/spring-projects/spring-boot/commit/46fbca66a69d102db55f7c454565f82ff5be6b98,Fix typo 'a' -> 'an',https://api.github.com/repos/spring-projects/spring-boot/commits/46fbca66a69d102db55f7c454565f82ff5be6b98,
https://github.com/junit-team/junit4/commit/cb0c4e9f7c9be8be7c11e4934f6bd71a312102ec,"For <issue_link> , remove FrameworkMethod.getParameterSignatures()  <enter> Having this method in place made a class from the 'core' of JUnit (org.junit.runners.model) depend on something from 'experimental' -- a dependency going in the wrong direction. ",https://api.github.com/repos/junit-team/junit4/commits/cb0c4e9f7c9be8be7c11e4934f6bd71a312102ec,
https://github.com/apache/dubbo/commit/80776517e923a7bb77a307b74d3b5fdfa1c2b22d,"temporarily change spring-context-support dependency back to SNAPSHOT, the formal release turns to be broken.",https://api.github.com/repos/apache/dubbo/commits/80776517e923a7bb77a307b74d3b5fdfa1c2b22d,
https://github.com/apache/dubbo/commit/ff76661ef4ad2af0b92c208dc0740bb00e93020b,change version to 2.7.6-SNAPSHOT to prepare for next major release ,https://api.github.com/repos/apache/dubbo/commits/ff76661ef4ad2af0b92c208dc0740bb00e93020b,
https://github.com/square/okhttp/commit/9b4e74f8c8ce6fff4281c2d7369fb25f6772a64e,"A Pipe.  <enter> This is something we need to implement HttpURLConnection atop the native OkHttp API. The application thread wants to be active, writing to its OutputStream. But in OkHttp's API, this work wants to happen in the RequestBody.writeTo() callback. To make this work we give the HttpUrlConnection OutputStream the sink end of the pipe, and the RequestBody the source end of the pipe. It's a bit of plumbing, but the benefit is that backpressure, timeouts, and failures will propagate as expected. ",https://api.github.com/repos/square/okhttp/commits/9b4e74f8c8ce6fff4281c2d7369fb25f6772a64e,
https://github.com/apache/dubbo/commit/b4afeb982b943ca8c6bbd261302a9e161c2e98a9,"follow up for pr#4339, remove the space ( <pr_link> ) ",https://api.github.com/repos/apache/dubbo/commits/b4afeb982b943ca8c6bbd261302a9e161c2e98a9,
https://github.com/square/okhttp/commit/dac5aed3d5f9307b9d1ab0a8c7840b232d053ef3,"Move connection pooling logic.  <enter> Previously we had this ugly, awkward release() method that attempted to manage connection pooling, discarding streams for caching, and closing broken streams. <enter> Move connection reuse to HttpConnection, with policy informed by HttpEngine. It specifies what to do when the connection becomes idle: pool, close or hold. The connection does what it's told. ",https://api.github.com/repos/square/okhttp/commits/dac5aed3d5f9307b9d1ab0a8c7840b232d053ef3,
https://github.com/square/retrofit/commit/ffab8145393225741167a003577696549573e857,Fix spelling ,https://api.github.com/repos/square/retrofit/commits/ffab8145393225741167a003577696549573e857,
https://github.com/spring-projects/spring-boot/commit/f34508ff8a1d85b43a0beccfc8d7377c2c993450,Remove outdated key  <enter> The `spring.metrics.export.redis.aggregate-key-pattern` is no longer defined but was still referenced in the documentation. ,https://api.github.com/repos/spring-projects/spring-boot/commits/f34508ff8a1d85b43a0beccfc8d7377c2c993450,
https://github.com/apache/dubbo/commit/5668d740766f6303e789f072100cd235e4b67582,"Fix export provider error, change to catch throwable, handle NoClassDefFoundError ( <pr_link> ) ",https://api.github.com/repos/apache/dubbo/commits/5668d740766f6303e789f072100cd235e4b67582,
https://github.com/apache/dubbo/commit/54b0d7e3f4bc8f348c6260f649c6e3174d5b8a03,Remove duplicate dependency from [dubbo-bom] and [dubbo-demo-xml-consumer] ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/54b0d7e3f4bc8f348c6260f649c6e3174d5b8a03,
https://github.com/spring-projects/spring-boot/commit/8e2e493946357bcefb53d0b0a608becad7719413,"Remove HSQLDB dependency from Batch Starter  <enter> This commit removes HSQLDB dependency from Batch Starter as most apps that use Spring Batch will prefer to use a RDBMS of their choice to store batch metadata. <enter> Additionally, explicit spring-jdbc dependency has been replaced with JDBC Starter dependency. <enter> See  <pr_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/8e2e493946357bcefb53d0b0a608becad7719413,
https://github.com/square/retrofit/commit/8bd6c990a728955f91646156b78244061ea91a2a,Prepare next development version ,https://api.github.com/repos/square/retrofit/commits/8bd6c990a728955f91646156b78244061ea91a2a,
https://github.com/square/retrofit/commit/b3fcdca9939f376d9f825bb6ccaeeaa97c0f8325,"Fix inconsistencies in javadocs.  <enter> These changes were made with consistency in mind, in relation to the rest of the project:  - Change self-closing <p/> tags to regular <p> tags.  - Add missing <p> tags. ",https://api.github.com/repos/square/retrofit/commits/b3fcdca9939f376d9f825bb6ccaeeaa97c0f8325,
https://github.com/apache/dubbo/commit/48cb8e41a76b49b184f2b97e61b42eb109a16229,refactor package  <enter> git-svn-id:  http://code.alibabatech.com/svn/dubbo/trunk@1395  1a56cb94-b969-4eaa-88fa-be21384802f2 ,https://api.github.com/repos/apache/dubbo/commits/48cb8e41a76b49b184f2b97e61b42eb109a16229,
https://github.com/apache/dubbo/commit/93b1cf014af7cce13f12816ab7114881765d4471,"Move UT in config-api to bootstrap temporarily, to solve the unreasonable dependency problem between modules. For long term run, we should refactor the config-api module to stop it from depending on other modules.",https://api.github.com/repos/apache/dubbo/commits/93b1cf014af7cce13f12816ab7114881765d4471,
https://github.com/junit-team/junit4/commit/46036e7146f9dd0ca44baaec490692b967edd0ce,"javadoc'ed, and with better names ",https://api.github.com/repos/junit-team/junit4/commits/46036e7146f9dd0ca44baaec490692b967edd0ce,
https://github.com/spring-projects/spring-boot/commit/9d4ada793902c15f6b62ae0dd4ad45ca0ef5b197,"Add Tomcat 7 and Jetty 8 samples  <enter> Switch the Tomcat 8 and Jetty 9 samples to Tomcat 7 and Jetty 8. Since Tomcat 8 and Jetty 9 are now the default versions the previous samples are no longer relevant, however, we do need integration tests to check that we remain compatible with Tomcat 7 and Jetty 8. <enter> See  <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/9d4ada793902c15f6b62ae0dd4ad45ca0ef5b197,
https://github.com/apache/dubbo/commit/81e61cc5c3d83b716ca2e712ccdc444c0fff208a,remove unnecessary null check  before instance of (#4321) <enter>  <enter> Signed-off-by: jimin.jm <slievrly@163.com>,https://api.github.com/repos/apache/dubbo/commits/81e61cc5c3d83b716ca2e712ccdc444c0fff208a,
https://github.com/spring-projects/spring-boot/commit/9a9111af2132ff50afe4aa0704be4bce19cf76fa,"Support path discovery for main dispatcher servlet  <enter> Add an `DispatcherServletPath` interface which provides a much more consistent way to discover the path of the main dispatcher servet. <enter> Prior to this commit, auto-configurations would often make use of the `ServerProperties` class to discover the dispatcher servlet path. This mechanism isn't very explicit and also makes it hard for us to relocate that property in Spring Boot 2.1. <enter> This commit also reverts most of  <otherCommit_link>  since it is now clear that the supporting multiple dispatcher servlet paths will be much more involved that we originally anticipated. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/9a9111af2132ff50afe4aa0704be4bce19cf76fa,
https://github.com/spring-projects/spring-boot/commit/fcf468062602966c508c260ef54da55e2d48c49a,Polish 'Document how to add metadata for collection and enum default values' <enter>  Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/fcf468062602966c508c260ef54da55e2d48c49a,
https://github.com/junit-team/junit4/commit/e15b287ccec2a1f4866a8bd1cd2a313a6163163d,"Only use a property where multiple entries need syncing  <enter> * The hamcrest version is only used in one place, i.e. the dependency. * Using properties to define dependency versions can cause issues for others. * Using properties to define a shared version across multiple dependencies causes less issues when you have multiple dependencies that need to be kept in sync. * We only have one dependency here and it doesn't need syncing to any other dependency * Therefore the right thing is to just specify the version in the dependency * End users can still override the dependency in their poms. ",https://api.github.com/repos/junit-team/junit4/commits/e15b287ccec2a1f4866a8bd1cd2a313a6163163d,
https://github.com/junit-team/junit4/commit/fd2c4fbbf74f01eecef1680fa1365052d0302d19,Added some names to list of contributors ,https://api.github.com/repos/junit-team/junit4/commits/fd2c4fbbf74f01eecef1680fa1365052d0302d19,
https://github.com/square/retrofit/commit/eccfe208bcb7c54d357c60842aa6e33cc15424cd,"Switch to a better, custom validating subscriber.  <enter> TestSubscriber is a poor implementation for correctness testing. This new subscriber ensures all events are tested by being a JUnit rule. It also consumes events as they're validated so that assertion becomes more like a script than a ledger. <enter> This also switches tests to use unsafeSubscribe to ensure that any contract violations are not being suppressed. The latest version of RxJava is required for accessing this method on Completable. ",https://api.github.com/repos/square/retrofit/commits/eccfe208bcb7c54d357c60842aa6e33cc15424cd,
https://github.com/square/retrofit/commit/46cdff20b53a84e816d6022541347b3c06a5a52b,"Fatal errors should crash the dispatcher thread  <enter> This is an imperfect fix as uncaught exceptions reaching OkHttpCall which are not fatal still only log, but most of the adapters are defending against anything getting this far already. <enter> Also contained is a fix for the RxJava 2 async adapter. Non-200 responses delivered to the body observer would be forwarded to onError. If that callback threw a fatal exception, it would be re-delivered to the body observer despite it having already called a downstream terminal method. The fatal error should have been propagated by the async observer instead of attempting to make its way back downstream. ",https://api.github.com/repos/square/retrofit/commits/46cdff20b53a84e816d6022541347b3c06a5a52b,
https://github.com/spring-projects/spring-boot/commit/3b07e4e633ebcbdb0836ed7ad0b21fc8f0b42a9e,Fix typos in the documentation: though -> through  <enter> Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/3b07e4e633ebcbdb0836ed7ad0b21fc8f0b42a9e,
https://github.com/square/okhttp/commit/e3e829d2060542d50f33d1a9864f7ace82c9db5c,"API change: Make OkHttpClient accessors final  <enter> If we want these to be vals to Kotlin, they can't be open. I think the motivation to make these non-final was pretty weak, and I don't mind breaking API compatibility here. ",https://api.github.com/repos/square/okhttp/commits/e3e829d2060542d50f33d1a9864f7ace82c9db5c,
https://github.com/square/retrofit/commit/d80636923c595ed665adc6066f1377a6a1304f6a,Move source/target config out of error-prone block  <enter> Error-prone only works on pre-12 at the moment and we need this configuration to apply for all JDKs. ,https://api.github.com/repos/square/retrofit/commits/d80636923c595ed665adc6066f1377a6a1304f6a,
https://github.com/junit-team/junit4/commit/6ee76dc22e56457cb5904eb6c5c0bf97939880cb,Update build_tests.sh to test 'ant profile' ,https://api.github.com/repos/junit-team/junit4/commits/6ee76dc22e56457cb5904eb6c5c0bf97939880cb,
https://github.com/square/okhttp/commit/855c114f4f6fce3e0e1ae71479f89c9d5ad066d6,"Read/write access for byte, short and int.  <enter> This is big-endian only because that's all we use in OkHttp. ",https://api.github.com/repos/square/okhttp/commits/855c114f4f6fce3e0e1ae71479f89c9d5ad066d6,
https://github.com/square/okhttp/commit/37c01895cca5ec2bec26a3d381611f0938acd6d0,Define async APIs and switch Job to use HttpEngine directly.  <enter> Using HttpEngine directly introduces some duplicated code with HttpURLConnection. It also breaks the response cache. I think this is the best route going forward; and eventually we could invert this relationship to have HttpURLConnection depending on Job directly rather than vice versa. ,https://api.github.com/repos/square/okhttp/commits/37c01895cca5ec2bec26a3d381611f0938acd6d0,
https://github.com/junit-team/junit4/commit/236e75bd968935cf8728c3f7aaaccaefd2f9c737,Adapt links to reflect repo rename ,https://api.github.com/repos/junit-team/junit4/commits/236e75bd968935cf8728c3f7aaaccaefd2f9c737,
https://github.com/junit-team/junit4/commit/bcf2c17851197328bb7bc008f916a6648de193aa,Converted tabs to spaces  <enter> Converted tabs to spaces for newly added code to be in line with guidelines. ,https://api.github.com/repos/junit-team/junit4/commits/bcf2c17851197328bb7bc008f916a6648de193aa,
https://github.com/spring-projects/spring-boot/commit/abd7bc0466722b2a6e2b145a630fdb342a7f1656,Add OAuth2 resource server sample  <enter> Shows how to use @EnableResourceServer in a pure resource server and configure the secure paths. ,https://api.github.com/repos/spring-projects/spring-boot/commits/abd7bc0466722b2a6e2b145a630fdb342a7f1656,
https://github.com/spring-projects/spring-boot/commit/8e8bf8e1779ffcef2ec35c6921b6b596c0c8353a,Uses the latest version of Tomcat 7 in the sample ,https://api.github.com/repos/spring-projects/spring-boot/commits/8e8bf8e1779ffcef2ec35c6921b6b596c0c8353a,
https://github.com/square/retrofit/commit/6108179c09dae0ccdd7e8d97d4a3b79f9f4443a4,"Use custom exception type when triggering mock failure.  <enter> Since we omit the stack trace, this more clearly indicates the source being from Retrofit's mock behavior. ",https://api.github.com/repos/square/retrofit/commits/6108179c09dae0ccdd7e8d97d4a3b79f9f4443a4,
https://github.com/square/retrofit/commit/49bba7d60f2a920e138e9388c515ee58fc8c4bcf,Rewrite RxJava call adapter tests to be more understandable. ,https://api.github.com/repos/square/retrofit/commits/49bba7d60f2a920e138e9388c515ee58fc8c4bcf,
https://github.com/square/okhttp/commit/32b7675b726a1ca62f5080581f6daaf9b7c6a48e,Use ResponseBody to model the response body everywhere.  <enter> This makes cache writing and gzip layering work a bit nicer because there are fewer fields in HttpEngine to track the various competing streams. ,https://api.github.com/repos/square/okhttp/commits/32b7675b726a1ca62f5080581f6daaf9b7c6a48e,
https://github.com/square/okhttp/commit/59a6804c91328c2d1eb096054590b213ab711d22,Tests for canceling async requests. ,https://api.github.com/repos/square/okhttp/commits/59a6804c91328c2d1eb096054590b213ab711d22,
https://github.com/square/okhttp/commit/40ff76547064c3fb5acb9047a6f679dd4379a4d0,Make HttpConnection.connect return full working connections.  <enter> Previously the returned connections required the caller to do extra work: setting up tunnels (which could require auth) and performing an SSL handshake. With this change we make a complete working connection in HttpConnection.connect(). <enter> This will make it easier to fix fallback when a single domain has multiple IP addresses and some of those addresses are not reachable. <enter> This will also make it easier to do SPDY through HTTP proxies. ,https://api.github.com/repos/square/okhttp/commits/40ff76547064c3fb5acb9047a6f679dd4379a4d0,
https://github.com/apache/dubbo/commit/3308a197751eeb97baddf157f53813a3447d159f,fix typo:metodName ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/3308a197751eeb97baddf157f53813a3447d159f,
https://github.com/spring-projects/spring-boot/commit/49ef93602e4db89944a5897fb250121186161d2c,Add external-file-property to LogFileMvcEndpoint  <enter> Add an additional property to LogFileMvcEndpoint to allow log files to be read from an external location. This is helpful when a launch.script is used to start the boot-application and the logfile is written by a redirect of stdout/stderr. <enter>  Fixes   <issue_link>   Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/49ef93602e4db89944a5897fb250121186161d2c,
https://github.com/spring-projects/spring-boot/commit/5b2de5c81dc1cc3ab4e8c21ae615bc4d19567347,"Configure PathPattern for RSocket routing  <enter> This commit configures a `PathPatternRouteMatcher` in the RSocket support if spring-web is on the classpath. This `RouteMatcher` implementation is more efficient than the `SimpleRouteMatcher`, which is based on the `AntPathMatcher`. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/5b2de5c81dc1cc3ab4e8c21ae615bc4d19567347,
https://github.com/junit-team/junit4/commit/d3d7a8b1389e53055d4de9de3aa319053b4a5524,Identify reflection package jdk.internal.reflect  <enter> JDK 9 uses classes from the package jdk.internal.reflect instead of sun.reflect. ,https://api.github.com/repos/junit-team/junit4/commits/d3d7a8b1389e53055d4de9de3aa319053b4a5524,
https://github.com/spring-projects/spring-boot/commit/644ab5f3e4319610632b60cbbc4f9141f3ba3470,Align SessionsEndpoint with Spring Session API improvements  <enter> This commit aligns SessionsEndpoint with FindByIndexNameSessionRepository API improvements that simplifies retrieval of sessions by principal name. <enter>  Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/644ab5f3e4319610632b60cbbc4f9141f3ba3470,
https://github.com/apache/dubbo/commit/a5cc7a26179aab97b3bee3fcc93fe90ac0ecb29f,reduce the level of request data in timeout log ( <pr_link> )  <enter> to control the size of log ,https://api.github.com/repos/apache/dubbo/commits/a5cc7a26179aab97b3bee3fcc93fe90ac0ecb29f,
https://github.com/apache/dubbo/commit/9396ace4fc00ca8f2e331b49ddabcb1e138e9e1c,fix typo ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/9396ace4fc00ca8f2e331b49ddabcb1e138e9e1c,
https://github.com/square/retrofit/commit/46598adb1da0f6d2498d9f8b815b170bf95fe1f8,Use the annotations directly for parameter handling.  <enter> Before we attempted to normalize the parameter annotations into a name and type model. The introduction of multi-part transfer encodings required something more expressive so the annotation instances themselves were used. This change removes the name and type in favor of using the annotation for everything. <enter> Deprecate the pre-encoded annotations in favor of boolean fields on the corresponding 'regular' annotation. ,https://api.github.com/repos/square/retrofit/commits/46598adb1da0f6d2498d9f8b815b170bf95fe1f8,
https://github.com/junit-team/junit4/commit/7e77e49c40afb951ae5a5cbdf75ebb4a478e2bb7,Updated README.html ,https://api.github.com/repos/junit-team/junit4/commits/7e77e49c40afb951ae5a5cbdf75ebb4a478e2bb7,
https://github.com/spring-projects/spring-boot/commit/a79f71cbe802a8d87bc22e6eba67553ccedd54a7,Add @IntegrationComponentScan auto-configuration  <enter> Update Spring Integration auto-configuration so that `@IntegrationComponentScan` from `AutoConfigurationPackages` is implicitly applied. Prior to this commit `@MessagingGateway` interfaces would only get picked up if `@IntegrationComponentScan` was added alongside with the `@SpringBootApplication`. <enter>  Fixes   <issue_link>   Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/a79f71cbe802a8d87bc22e6eba67553ccedd54a7,
https://github.com/spring-projects/spring-boot/commit/b0579c1cf38aa6815ee180a2e61640cfbc2447d2,"Ensure JPA vendor properties are period separated  <enter> If you bind to Map<String,Object> you get a nested Map instead of period-separated keys. This change just makes JpaProperties expose a Map<String,String> so the keys are sane. <enter>  Fixes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/b0579c1cf38aa6815ee180a2e61640cfbc2447d2,
https://github.com/junit-team/junit4/commit/2568203bdebd5a4a4ad9aa74b1d8369d22f668a3,Replaced IllegalArgumentException for IOException  <enter> It's more consistent to throw an IOException instead of an IllegalArgumentException ,https://api.github.com/repos/junit-team/junit4/commits/2568203bdebd5a4a4ad9aa74b1d8369d22f668a3,
https://github.com/square/retrofit/commit/1d64f9763e1f5aa3d049710df8366f425109672f,Use a dummy value to further validation optional delegation  <enter> Prior to this other things might cause a null value. This ensures the value can only come from only place. ,https://api.github.com/repos/square/retrofit/commits/1d64f9763e1f5aa3d049710df8366f425109672f,
https://github.com/apache/dubbo/commit/9157beac5da52530fc6336e419bf02d57e9cce6c,refactor package  <enter> git-svn-id:  http://code.alibabatech.com/svn/dubbo/trunk@1386  1a56cb94-b969-4eaa-88fa-be21384802f2 ,https://api.github.com/repos/apache/dubbo/commits/9157beac5da52530fc6336e419bf02d57e9cce6c,
https://github.com/spring-projects/spring-boot/commit/1a764d9c06f2a96722c04b8d8bb1edf89e424628,Default Tomcat to not save SESSIONS.ser file  <enter> Update TomcatEmbeddedServletContainerFactory so that session data isn't serialized by default. Prior to this commit the SESSIONS.ser file would either be written to `/tmp` or into `baseDir` (if one was set). <enter> By not saving session data we align Tomcat with the other embedded servlet containers and reduce the risk of sensitive information being left in `/tmp`. <enter>  Fixes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/1a764d9c06f2a96722c04b8d8bb1edf89e424628,
https://github.com/square/okhttp/commit/02b08fbde7b1726d7a4c0dc971152751ac82ca0a,"Allow HTAB in header values.  <enter> RFC 7230 section 3.2 allows HTAB ('	', 'u0009') inside header values as long as there is not more than one in a row:    https://tools.ietf.org/html/rfc7230#section-3.2  <enter> Before this CL, OkHttp previously disallowed HTAB in header values. This CL changes behavior to allow any number of consecutive HTABs inside a header value; this is more permissive than the RFC, but is consistent with how OkHttp currently treats space characters (' ', 'u0020'). ",https://api.github.com/repos/square/okhttp/commits/02b08fbde7b1726d7a4c0dc971152751ac82ca0a,
https://github.com/spring-projects/spring-boot/commit/985c8f75982da4fabc1c8a5958a57706d4d4feab,Polish RSocket support ,https://api.github.com/repos/spring-projects/spring-boot/commits/985c8f75982da4fabc1c8a5958a57706d4d4feab,
https://github.com/square/okhttp/commit/0137eb9dbad165caea7189c5c3e09382563ef8bd,Remove unnecessary use of grouping parentheses  <enter> Let's remove warnings found by errorprone. <enter> - attempt ``` okhttp/okhttp/src/test/java/okhttp3/CallTest.java:2056: warning: [UnnecessaryParentheses] Unnecessary use of grouping parentheses             sink.writeUtf8('attempt ' + (attempt++));                                         ^     (see  https://errorprone.info/bugpattern/UnnecessaryParentheses )   Did you mean 'sink.writeUtf8('attempt ' + attempt++);'? ``` <enter> - isEaualTo ``` okhttp/src/test/java/okhttp3/OkHttpClientTest.java:287: warning: [UnnecessaryParentheses] Unnecessary use of grouping parentheses       assertThat(expected.getMessage()).isEqualTo(('protocols must not contain null'));                                                   ^     (see  https://errorprone.info/bugpattern/UnnecessaryParentheses ) ``` ,https://api.github.com/repos/square/okhttp/commits/0137eb9dbad165caea7189c5c3e09382563ef8bd,
https://github.com/spring-projects/spring-boot/commit/123ffd736c0a435f24f8d9c647e5d384de8cab4a,Exclude @ManagedResources from Endpoint MBeans  <enter> If an Endpoint is already @ManagedResource then it doesn't need an additional (probably wrong) MBEan registration based on the invoke() method. ,https://api.github.com/repos/spring-projects/spring-boot/commits/123ffd736c0a435f24f8d9c647e5d384de8cab4a,
https://github.com/junit-team/junit4/commit/13bda470bfa1fe989ce80d616fb096af1b937146,Make ParallelComputer more beautiful by creating a Decorator  <enter> extension point in ParentRunner <enter> Signed-off-by: Kent Beck <kent@threeriversinstitute.org> ,https://api.github.com/repos/junit-team/junit4/commits/13bda470bfa1fe989ce80d616fb096af1b937146,
https://github.com/apache/dubbo/commit/243e57130646c69c047910dd079f19cbadc57613,Remove unnecessary null check. ,https://api.github.com/repos/apache/dubbo/commits/243e57130646c69c047910dd079f19cbadc57613,
https://github.com/spring-projects/spring-boot/commit/e3899df22c1f8de17081fababcbd5c406a3c8541,"Configure Spring Data Couchbase explicitly  <enter> This commit configures Spring Data Couchbase explicitly rather than relying on the abstract configuration class. This has the advantage of simplifying the auto-configuration and let it us proxy-free configuration classes. <enter> Spring Boot no longer uses or interacts with CouchbaseConfigurer. Users relying on that to teach Spring Boot which components to use should rely on `@Primary` flag instead in case of multiple beans of the same type. <enter> `CouchbaseConfiguration` is no longer public as extending from it is no longer necessary. If the `CouchbaseEnvironment` has to be customized, a `CouchbaseEnvironmentBuilderCustomizer` bean can be registered to tune the auto-configured environment. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/e3899df22c1f8de17081fababcbd5c406a3c8541,
https://github.com/apache/dubbo/commit/09722e3a93ad4ba40edf38ebdbfd7afee4977ee6,Remove unnecessary dependencies ,https://api.github.com/repos/apache/dubbo/commits/09722e3a93ad4ba40edf38ebdbfd7afee4977ee6,
https://github.com/spring-projects/spring-boot/commit/12bfca56d617f935e0a53760bf18f300eba8a430,Remove unnecessary null check  <enter> See  <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/12bfca56d617f935e0a53760bf18f300eba8a430,
https://github.com/spring-projects/spring-boot/commit/036aace2cca7f33c0e96d3b222376b48947b735f,Add details in Jest ElasticSearch HealthIndicator  <enter> This commit polishes the previous one and aligns the Jest HealthIndicator with the changes made for the REST variant. <enter>  Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/036aace2cca7f33c0e96d3b222376b48947b735f,
https://github.com/square/retrofit/commit/a19609a16359af66aec5410459899291b2c45cf1,Add example of using JSON converter as a String converter.  <enter> This also adds the Retrofit instance as a param to the string converter to allow it to delegate to others directly. This brings it into parity with the method signatures of the other converter methods anyway. ,https://api.github.com/repos/square/retrofit/commits/a19609a16359af66aec5410459899291b2c45cf1,
https://github.com/apache/dubbo/commit/8b6f4456d5664f4e7f32b0e772befc4b12086aaa,Minor improvement on test cases: <pr_link> <enter> 1. Use org.junit.Assert instead of junit.framework.Assert(@Deprecated since Junit 4) <enter> 2. Use assertTrue and other assert methods through static import to make codes easier to read,https://api.github.com/repos/apache/dubbo/commits/8b6f4456d5664f4e7f32b0e772befc4b12086aaa,
https://github.com/junit-team/junit4/commit/a3e01b1ebea12f5fdfb6349e9e72623ac1f3b232,Cleaning up indentation  <enter> The inline method refactoring conducted by eclipse introduced some extra tabs. <enter> Incomplete - task : Issue 551: Resolve sensitive equality in MethodSorter test. ,https://api.github.com/repos/junit-team/junit4/commits/a3e01b1ebea12f5fdfb6349e9e72623ac1f3b232,
https://github.com/junit-team/junit4/commit/638e82435a01af83e77c23e9f8d7b658a89eb4bf,"Use %n in string.format() ( <pr_link> )  <enter> In format strings, it is generally preferable better to use %n, which will produce the platform-specific line separator. ",https://api.github.com/repos/junit-team/junit4/commits/638e82435a01af83e77c23e9f8d7b658a89eb4bf,
https://github.com/spring-projects/spring-boot/commit/7019894f0ec7f6fd27121d94aa08022bd3040af9,"Clarify the role of spring-boot-starter-cache  <enter> The cache abstraction is a core feature of the Spring Framework. Basic features such as `@EnableCaching` are therefore available by default with no extra dependencies necessary. <enter> However, the actual cache adapters for JCache, Ehcache 2.x, Caffeine and Guava are located in a separated module, `spring-context-support`. Spring Boot provides that artifact via the `spring-boot-starter-cache` starter. <enter> It is quite easy to 'only' add the cache library dependencies and forget about this extra dependencies since `@EnableCaching` is available by default. This commit clarifies the role of the starer in each section so that it is more obvious. We're already explaining this at the beginning of the section but it seems that's not enough. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/7019894f0ec7f6fd27121d94aa08022bd3040af9,
https://github.com/square/retrofit/commit/8eed9f264c13710fc0ac8251b3c5382a129a10ce,Add missing Call wrappers as return type ,https://api.github.com/repos/square/retrofit/commits/8eed9f264c13710fc0ac8251b3c5382a129a10ce,
https://github.com/square/okhttp/commit/99f2bafe1c0abb2791131dde5a702d3bb3ba28f3,"Fix isClosed() when a cache has not been initialized  <enter> isClosed() now means 'has close() been called', after commit  <otherCommit_link>  it meant 'has not been initialized or close() has been called'. <enter> Introduced explicit closed state. Minor tweak to use initialized state to determine whether cleanup will do anything. Added a test. ",https://api.github.com/repos/square/okhttp/commits/99f2bafe1c0abb2791131dde5a702d3bb3ba28f3,
https://github.com/square/retrofit/commit/6f8a9a664c0198992b8478e0671cc4a7db4f1d8e,Add missing import. ,https://api.github.com/repos/square/retrofit/commits/6f8a9a664c0198992b8478e0671cc4a7db4f1d8e,
https://github.com/junit-team/junit4/commit/5785d9df8fe25f68567272850cd65b4dc07da617,Deprecate rule ExpectedException ( <pr_link> )  <enter> The method Assert.assertThrows provides a nicer way for verifying exceptions. In addition the use of ExpectedException is error-prone when used with other rules like TestWatcher because the order of rules is important in that case. ,https://api.github.com/repos/junit-team/junit4/commits/5785d9df8fe25f68567272850cd65b4dc07da617,
https://github.com/square/okhttp/commit/6909923b89d98fef39600a170aa50e566dbb730a,Update CHANGELOG.md ,https://api.github.com/repos/square/okhttp/commits/6909923b89d98fef39600a170aa50e566dbb730a,
https://github.com/square/retrofit/commit/fb746cb2f67a51c100e368844ac26dedb9e8eac4,"Expose success type on RetrofitError.  <enter> There's a bit of a test gap going on for all the variants of successful and erroneous handling of sync, async, and rx. This new behavior is fully tested in all three but more general behavior testing for them will be needed in in a follow-up. ",https://api.github.com/repos/square/retrofit/commits/fb746cb2f67a51c100e368844ac26dedb9e8eac4,
https://github.com/square/okhttp/commit/2ec2027fc00e24a83cd7bb7fef8b11e7c751bc13,Add missing copyright headers.  <enter> <issue_link> ,https://api.github.com/repos/square/okhttp/commits/2ec2027fc00e24a83cd7bb7fef8b11e7c751bc13,
https://github.com/square/okhttp/commit/aaf2695b00dfd69df6fd915ba16665eee8c1962d,"Fix ResponseCacheTest for Android  <enter> Pull  <pr_link>  broke ResponseCacheTest on Android. <enter> The test was asserting a header generated using a copy of the old broken implementation. <enter> The test now just uses HttpDate, which now has its own tests. ",https://api.github.com/repos/square/okhttp/commits/aaf2695b00dfd69df6fd915ba16665eee8c1962d,
https://github.com/spring-projects/spring-boot/commit/5e9b8c3340d25fbf0e7d64b306ae7b3557188b9a,Add missing depdendency ,https://api.github.com/repos/spring-projects/spring-boot/commits/5e9b8c3340d25fbf0e7d64b306ae7b3557188b9a,
https://github.com/spring-projects/spring-boot/commit/e370b592d66ad9b01ff2bfff4b5991f0ac3a9751,"Introduce defined extension point for modifying the environment  <enter> The commit introduces a new extension point, EnvironmentPostProcessor, that can be implemented by classes that want to modify the environment. Implementations of EnvironmentPostProcessor are loaded via spring.factories and called in response to the ApplicationEnvironmentPreparedEvent. Application listeners that wish to work with the post-processed environment can continue to listen to ApplicationEnvironmentPreparedEvent and order themselves to run after EnvironmentPostProcessingApplicationListener. <enter> Existing ApplicationListeners that modify the environment have, where possible, been updated to implement EnvironmentPostProcessor instead. <enter>  Closes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/e370b592d66ad9b01ff2bfff4b5991f0ac3a9751,
https://github.com/apache/dubbo/commit/b0064d78a3b929eb3b25e0de9055412cb61f48ce,Make code of process callback of method cleaner in DubboBeanDefinitionParser ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/b0064d78a3b929eb3b25e0de9055412cb61f48ce,
https://github.com/square/retrofit/commit/7e31520f844b5c8eedc3b8fe82e2e48c79e47a5a,Get rid of the now-useless HttpServiceMethod.Builder  <enter> A simple static factory will do. ,https://api.github.com/repos/square/retrofit/commits/7e31520f844b5c8eedc3b8fe82e2e48c79e47a5a,
https://github.com/junit-team/junit4/commit/0733bbffdadf05a6ebe0c38942904071a4060af4,<pr_link> Fix many warnings (Eclipse 4.2/Juno based)  <enter> - Enh: add new 'staticondemandthreshold' setting to eclipse project jdt.ui preference settings file (although this is in fact not related to kcooney's import ordering change comment) ,https://api.github.com/repos/junit-team/junit4/commits/0733bbffdadf05a6ebe0c38942904071a4060af4,
https://github.com/spring-projects/spring-boot/commit/4f9258a345130a5b031a3c4170dcb7046a1bd9b8,Fixup version numbers following release ,https://api.github.com/repos/spring-projects/spring-boot/commits/4f9258a345130a5b031a3c4170dcb7046a1bd9b8,
https://github.com/apache/dubbo/commit/5b4816dfa6ae92d0b94af4ed41c07ca6c9d0fcb9,fix:Remove unused variable parameters in AbstractProxyInvoker ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/5b4816dfa6ae92d0b94af4ed41c07ca6c9d0fcb9,
https://github.com/square/okhttp/commit/59b1c1dc5290b9f96ebeefb7ea2369d58042fed3,Pom version updates. Drop unused dependencies. ,https://api.github.com/repos/square/okhttp/commits/59b1c1dc5290b9f96ebeefb7ea2369d58042fed3,
https://github.com/junit-team/junit4/commit/5ea3196f1cdbc32bc3a91b96bedc1964d3bb76d1,Used assertArrayEquals to avoid converting an array to a list.  <enter> Incomplete - task : Issue 551: Resolve sensitive equality in MethodSorter test. ,https://api.github.com/repos/junit-team/junit4/commits/5ea3196f1cdbc32bc3a91b96bedc1964d3bb76d1,
https://github.com/square/retrofit/commit/365a0cd97bd8ee597e937ebf88170b30685047f4,Add UrlConnection Client.  <enter> Use this on Android 2.2 and prior and when on the JVM. <enter> Also update our sample to use GitHub contributors rather than the Twitter API because the latter is shutting down and subject to lame rate limiting when on common networks. <enter> Bump some dependencies to their latest versions. ,https://api.github.com/repos/square/retrofit/commits/365a0cd97bd8ee597e937ebf88170b30685047f4,
https://github.com/spring-projects/spring-boot/commit/a9c9c383f4c7afe0119bded0d005d1481acf71ed,"Polish pom.xml  <enter> Aplly consistent formatting, drop JDK 8 support and cleanup repo locations to use spring.io. ",https://api.github.com/repos/spring-projects/spring-boot/commits/a9c9c383f4c7afe0119bded0d005d1481acf71ed,
https://github.com/spring-projects/spring-boot/commit/7c13c01cb6a62b86478aa53d3516ae8aaea48bca,Fix mapping of Cassandra's idle-timeout and heartbeat-interval  <enter> Previous to this commit the connection idle timeout and heartbeat interval were mapped to seconds whereas Cassandra expects ms for all duration types. <enter> This commit fixes the mapping and removes the default duration unit since it should be considered ms like every other duration properties. <enter>  Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/7c13c01cb6a62b86478aa53d3516ae8aaea48bca,
https://github.com/square/okhttp/commit/e74e3f3bf744ef7f4d8ee724a7cf2347e486cfab,"Move cache writing out of the transport.  <enter> This is necessary to unblock network interceptors, where the interceptor may elect to rewrite the response body. If we've already cached the original response body, we're too late. ",https://api.github.com/repos/square/okhttp/commits/e74e3f3bf744ef7f4d8ee724a7cf2347e486cfab,
https://github.com/spring-projects/spring-boot/commit/15de956566b0737d3e53a816a6be60ed3e41c759,Fix typo `Assert4J` -> `AssertJ`  <enter> See  <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/15de956566b0737d3e53a816a6be60ed3e41c759,
https://github.com/square/retrofit/commit/9b6bd6bbbe752fceaa4517b3eda7cd678679198d,"Use ServerError directly in sessionExpired and serverError.  <enter> This is a short step on the road to HTTP body format agnostic support. And it's not a pretty step, either. ",https://api.github.com/repos/square/retrofit/commits/9b6bd6bbbe752fceaa4517b3eda7cd678679198d,
https://github.com/square/retrofit/commit/3bdad39745db76928fce0f31b3c2a8e8922c40b3,Properly name ignored exception in 'catch' block. ,https://api.github.com/repos/square/retrofit/commits/3bdad39745db76928fce0f31b3c2a8e8922c40b3,
https://github.com/square/okhttp/commit/abb0a790802996d1039c35424b70b0f3f06b94b7,First step towards HTTP/2 automatic pings. ( <pr_link> )  <enter> This changes the executor services in HTTP/2 connection to split up listener executors (of which there may be many threads) from writer executors (of which there is one per connection). <enter> This adds a scheduled executor job to send pings on an interval. We don't yet fail the connection if pongs are not received. <enter> For follow-up there's some work to remove exising APIs to send pings through the HTTP/2 APIs. These are unused and make it awkard to confirm that only the automatic pings are being replied to. <enter> See  <issue_link> ,https://api.github.com/repos/square/okhttp/commits/abb0a790802996d1039c35424b70b0f3f06b94b7,
https://github.com/spring-projects/spring-boot/commit/26345d39003514348ca0be2f9c350c92b5cf3ef7,Polish docs  <enter> This commit replaces tabs to spaces in a yaml example for configuring endpoint web exposure include. <enter>  Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/26345d39003514348ca0be2f9c350c92b5cf3ef7,
https://github.com/spring-projects/spring-boot/commit/599792097cfc690d2adf52a6c4d4f98c44a77162,Upgrade Spring WS to 2.2.1.RELEASE  <enter> Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/599792097cfc690d2adf52a6c4d4f98c44a77162,
https://github.com/junit-team/junit4/commit/3d7de190844d92de87ca197cfd1fce74ae432f0f,Add test for handling InitializationError  <enter> The code was changed by commit  <otherCommit_link>  but unfortunately the test was not part of the commit. The test is based on Philip Graf's test in pull request  <pr_link> . <enter> Co-authored-by: Philip Graf <git@acanda.ch> ,https://api.github.com/repos/junit-team/junit4/commits/3d7de190844d92de87ca197cfd1fce74ae432f0f,
https://github.com/square/retrofit/commit/fe6d0f9b2a68063a086fa9da80d04293fbe3becf,Introduce factory for converter concept.  <enter> This is still highly-inefficient in its internal use and there are no tests proving that we now fail earlier in configuring a service method. Both of those will come in follow up commits ,https://api.github.com/repos/square/retrofit/commits/fe6d0f9b2a68063a086fa9da80d04293fbe3becf,
https://github.com/square/retrofit/commit/30fabb8e9a87b644d0b78d0962efe6aef027f04b,Revert version to 0.6 to match previous ant/ivy build.  <enter> Add a description too... ,https://api.github.com/repos/square/retrofit/commits/30fabb8e9a87b644d0b78d0962efe6aef027f04b,
https://github.com/square/okhttp/commit/489c92400f579bace0950c910de2dca03959785e,Revise the upgrading guide for OkHttp 4.x.  <enter> Also change the old OkHttp 3.x Javadoc to set the new docs as canonical.  https://publicobject.com/2017/02/14/canonical-urls-for-javadocs/ ,https://api.github.com/repos/square/okhttp/commits/489c92400f579bace0950c910de2dca03959785e,
https://github.com/spring-projects/spring-boot/commit/4f747d426e0f1b45ec341c021f699c7f25a8c3c2,Drop back to Surefire 2.19.1 as 2.19.2 was rebranded as 2.20 ,https://api.github.com/repos/spring-projects/spring-boot/commits/4f747d426e0f1b45ec341c021f699c7f25a8c3c2,
https://github.com/square/okhttp/commit/4b204037e6415a486df4eadb0c659c666e6b9aba,Remove overlapping package-info.java ,https://api.github.com/repos/square/okhttp/commits/4b204037e6415a486df4eadb0c659c666e6b9aba,
https://github.com/square/retrofit/commit/3b5a795892ac079320f6e4fb0d715a6d1a619122,Adding a human-readable name to the Server interface ,https://api.github.com/repos/square/retrofit/commits/3b5a795892ac079320f6e4fb0d715a6d1a619122,
https://github.com/square/retrofit/commit/f939189f3b825beb66a499686b9f6ca0f3a70cc1,Expose static factory for Invocation  <enter> Also rework the internals of how an Invocation gets instantiated and set as a tag on the Request. This will make a future change easier to land. ,https://api.github.com/repos/square/retrofit/commits/f939189f3b825beb66a499686b9f6ca0f3a70cc1,
https://github.com/junit-team/junit4/commit/5af049cac0c976c586d955607fa459aacb778d3c,Remove unnecessary comments,https://api.github.com/repos/junit-team/junit4/commits/5af049cac0c976c586d955607fa459aacb778d3c,
https://github.com/square/okhttp/commit/ea014716fd2a8712ee39888725f91bed43148cd3,"Remove CBC-mode ECDSA cipher suites  <enter> This removes the following cipher suites as supported-by-default:   TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA   TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA <enter> This tracks a similar change in Chromium 56:    https://developers.google.com/web/updates/2016/12/chrome-56-deprecations#remove_cbc-mode_ecdsa_ciphers_in_tls  <enter> OkHttp's updated cipher suites, plus comparisons to Android, Java, Chromium, Firefox, and Square's server-site configuration is here:    https://tinyurl.com/okhttp-cipher-suites  <enter>  Closes :  <issue_link> ",https://api.github.com/repos/square/okhttp/commits/ea014716fd2a8712ee39888725f91bed43148cd3,
https://github.com/apache/dubbo/commit/3747cc36fada387a52363fc7dfc97a4c6c2b2670,Remove useless config item in xsd ,https://api.github.com/repos/apache/dubbo/commits/3747cc36fada387a52363fc7dfc97a4c6c2b2670,
https://github.com/apache/dubbo/commit/51e2e80158c1d2f10cf8c38ae533e8c09ef91e9a,Remove unnecessary null check. ,https://api.github.com/repos/apache/dubbo/commits/51e2e80158c1d2f10cf8c38ae533e8c09ef91e9a,
https://github.com/square/okhttp/commit/112f020c411c9d14f34e480b98325777b25a7434,Change the cache to have non-shared semantics.  <enter> This means we'll cache responses that use an 'Authorization' header. This means OkHttp's cache shouldn't be used on middleboxes that sit between user agents and the origin server; in practice this is never a use case for OkHttp. <enter>  Fixes   <issue_link> ,https://api.github.com/repos/square/okhttp/commits/112f020c411c9d14f34e480b98325777b25a7434,
https://github.com/apache/dubbo/commit/57c13e07430a58e77249b96af9574b3db04e6dba,Remove unused import for unit test ( <pr_link> )  <enter> * clear unused import ,https://api.github.com/repos/apache/dubbo/commits/57c13e07430a58e77249b96af9574b3db04e6dba,
https://github.com/junit-team/junit4/commit/eedd1f68fbd014beca60c979e8173c271ea5cf2d,"Upate TestName to make the 'name' field volatile.  <enter> This ensures that the name is published across threads correctly--for instance, if a parallelized runner is used. <enter>  Closes   <pr_link> ",https://api.github.com/repos/junit-team/junit4/commits/eedd1f68fbd014beca60c979e8173c271ea5cf2d,
https://github.com/square/retrofit/commit/999c72be0468664c711159cd53deff79e62ee4a1,Refactor Rx tests to avoid the use of blocking operators. ,https://api.github.com/repos/square/retrofit/commits/999c72be0468664c711159cd53deff79e62ee4a1,
https://github.com/square/okhttp/commit/ff7946416d86aedcf154b868ba869241cd4816e9,"Add some pings to force happens-before in SPDY tests.  <enter> Previously we were relying on accidents to get our tests to pass. There may still be some that require work, but this should fix the three tests that I saw fail. <enter>  <issue_link> ",https://api.github.com/repos/square/okhttp/commits/ff7946416d86aedcf154b868ba869241cd4816e9,
https://github.com/square/retrofit/commit/c3633423b4a52566446bc6d540904f1f5f715205,"Re-work unresolvable type detection in parameters  <enter> In order to natively support Kotlin's 'suspend' modifier in the future, we need to allow wildcards to be used for the last parameter. As a result, we only validate the shape of a type once a Retrofit annotation is detected. ",https://api.github.com/repos/square/retrofit/commits/c3633423b4a52566446bc6d540904f1f5f715205,
https://github.com/square/okhttp/commit/53e12cca33f7d24cd8ea6c6ead262559b3553fbb,Request entity tests for the Apache client shim. ,https://api.github.com/repos/square/okhttp/commits/53e12cca33f7d24cd8ea6c6ead262559b3553fbb,
https://github.com/spring-projects/spring-boot/commit/3eb5c348fb93a416d5dcd0003d3273570a217589,"Align test with Spring MVC's internals once again  <enter> The internals have been updated so that the field that was originally used, interceptors, can be used again. <enter> This reverts commit  <otherCommit_link> . ",https://api.github.com/repos/spring-projects/spring-boot/commits/3eb5c348fb93a416d5dcd0003d3273570a217589,
https://github.com/spring-projects/spring-boot/commit/c25736d84f92e6d9158927b63e690cb5f2bae65e,Add test for nested properties ,https://api.github.com/repos/spring-projects/spring-boot/commits/c25736d84f92e6d9158927b63e690cb5f2bae65e,
https://github.com/square/okhttp/commit/353ec0b0cdbf46ddbc2755e482c62ec711badf90,"Fix for SslContextBuilder/MockWebServer disagreeing about localhost  <enter> MockWebServer binds to getByName('localhost'), SslContextBuilder was using InetAddress.getByName(null) (null == any loopback). On Android, null returns IPv6 loopback, which has the name 'ip6-localhost'. ",https://api.github.com/repos/square/okhttp/commits/353ec0b0cdbf46ddbc2755e482c62ec711badf90,
https://github.com/apache/dubbo/commit/5a9ea9373084613b6da4bf34861b1b8a013274b5,Polish release notes in CHANGES.md ,https://api.github.com/repos/apache/dubbo/commits/5a9ea9373084613b6da4bf34861b1b8a013274b5,
https://github.com/apache/dubbo/commit/c21cc05ec9ff4f96f34af9027714bb525cd0edf5,replace ServiceAnnotationBeanPostProcessor log.isInfoEnabled->log.isWarnEnabled ( <pr_link> ) <enter> simplify ExtensionLoader code segment ,https://api.github.com/repos/apache/dubbo/commits/c21cc05ec9ff4f96f34af9027714bb525cd0edf5,
https://github.com/square/okhttp/commit/60f5406dcc094d0431420139bd002e8bdd4ea5d5,"Move TLS retries / fallback into Connection.  <enter> API changes: 1) Added: Address.getCertificatePinner() 2) Incompatible API change: Address constructor no longer includes ConnectionSpecs. Removed getConnectionSpecs(). 3) Added: ConnectionSpec.isCompatible(SSLSocket) 4) Added: TlsVersion.javaName() <enter> Implicit / semantic / internal changes: <enter> 1) Connection now handles all attempts to connect via a route (effectively a {proxy, socket address} pair), rather than just one attempt. i.e. Connection now handles all the TLS negotiation fallbacks internally. <enter> 2) Route no longer deals with TLS versions. Individual TLS failures are not counted against a Route. If no connection attempts to a route were successful the failure is counted against the route. <enter> 3) The code makes a distinction between when various IOExceptions occur, with the intention making retries a bit smarter. It is now more obvious which exceptions happen during setup (RequestException), connection (RouteException), HTTP communication and thus which can be retried and whether the request might have been sent. ",https://api.github.com/repos/square/okhttp/commits/60f5406dcc094d0431420139bd002e8bdd4ea5d5,
https://github.com/square/retrofit/commit/778a67e3c27226aecf5292ba4c3785a5d3c53067,Update README.md,https://api.github.com/repos/square/retrofit/commits/778a67e3c27226aecf5292ba4c3785a5d3c53067,
https://github.com/apache/dubbo/commit/6140bc2a653cc3066d15ceeff5a3f06962fb32ad,"Fix concurrent problem of zookeeper configcenter, wait to start until cache being fully populated. ",https://api.github.com/repos/apache/dubbo/commits/6140bc2a653cc3066d15ceeff5a3f06962fb32ad,
https://github.com/spring-projects/spring-boot/commit/deef784403419ed57cb733089c0326d8b0781dd2,"Blitz some more special characters from the metric names  <enter> When MVC path matchers are used as metric keys, they can still contain invalid characters and patterns (like asterisks). This change removes some more special characters and also tidies up the names a bit so no key part starts or ends with '-' (which is ugly). <enter>  Fixes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/deef784403419ed57cb733089c0326d8b0781dd2,
https://github.com/square/okhttp/commit/82f773376e19bb7e10916627349fad06e45f90cb,Add HTTP/2 and TLSv1.3 columns to our security providers doc ,https://api.github.com/repos/square/okhttp/commits/82f773376e19bb7e10916627349fad06e45f90cb,
https://github.com/junit-team/junit4/commit/4411c102d489c2272d7e38606e912a54be4defa8,"Restore folder `javadoc/latest` for Javadoc.  <enter> This folder has been used for many years. There are links to Javadoc at that folder (e.g.  http://stackoverflow.com/questions/156503/how-do-you-assert-that-a-certain-exception-is-thrown-in-junit-4-tests/2935935#2935935  ). Restoring the folder `javadoc/latest` will hopefully restore the Javadoc pages in Google Search, too. ",https://api.github.com/repos/junit-team/junit4/commits/4411c102d489c2272d7e38606e912a54be4defa8,
https://github.com/square/okhttp/commit/6a79c3223c5ff2d556bbab8eb9909fffc4ca4387,Update README.md -> Mockito moved to Github ,https://api.github.com/repos/square/okhttp/commits/6a79c3223c5ff2d556bbab8eb9909fffc4ca4387,
https://github.com/apache/dubbo/commit/635bc7983287d47d1d2c637a85fe21aabacdcd27,Remove the shutdown logic from spring bean destroy to avoid competition. ,https://api.github.com/repos/apache/dubbo/commits/635bc7983287d47d1d2c637a85fe21aabacdcd27,
https://github.com/junit-team/junit4/commit/87245d66c7a17b27478da3bf7030e1b2dc86da55,Added script for uploading docs ,https://api.github.com/repos/junit-team/junit4/commits/87245d66c7a17b27478da3bf7030e1b2dc86da55,
https://github.com/junit-team/junit4/commit/4cb9a65f450efa5f2a42128856c7b56e6d283386,"Fixed a bug in Theories classes with constructor parameters, where the method parameters and constructor parameters were switched ",https://api.github.com/repos/junit-team/junit4/commits/4cb9a65f450efa5f2a42128856c7b56e6d283386,
https://github.com/junit-team/junit4/commit/9ee381470d56efa800420e5e22721e402aca01c2,"Remove fast-tests maven target.  <enter> Many of our tests store data in static fields, so the tests cannot be run in parallel. <enter>  Fixes   <issue_link> ",https://api.github.com/repos/junit-team/junit4/commits/9ee381470d56efa800420e5e22721e402aca01c2,
https://github.com/square/retrofit/commit/580d31ae906ac28f608427d4c4d2318a0e8b658a,Rename main class to Retrofit. ,https://api.github.com/repos/square/retrofit/commits/580d31ae906ac28f608427d4c4d2318a0e8b658a,
https://github.com/junit-team/junit4/commit/467c3f8efe1a87e3029df282e4df60ad98bc4142,Deprecate Assert#assertThat  <enter> The method 'assertThat' is used for writing assertions with Hamcrest. Hamcrest is an independent assertion library and contains an own 'assertThat' method in the class 'org.hamcrest.MatcherAssert'. It is available both in the old Hamcrest 1.3 release and in the current Hamcrest 2.1. Therefore the JUnit team recommends to use Hamcrest's own 'assertThat' directly. ,https://api.github.com/repos/junit-team/junit4/commits/467c3f8efe1a87e3029df282e4df60ad98bc4142,
https://github.com/apache/dubbo/commit/9ca9bb04b926ba33c6755aff8373314e60f2be89,Fix typo <issue_link> ,https://api.github.com/repos/apache/dubbo/commits/9ca9bb04b926ba33c6755aff8373314e60f2be89,
https://github.com/spring-projects/spring-boot/commit/3d437711363ade1717a7e11b7b781d240bad4983,"Register an AuthenticationManager in security autoconfig  <enter> This is quite a big step, but I think it helps a lot. Since Spring Boot always creates an AuthenticationManager if it doesn't find one already registered, it makes sense to also make it into a  @bean . Spring Security does not register its AuthenticationManager by default though, so we have to do that for it if the user has created one with an  @Autowired  AuthenticationManagerBuilder, but not registered it as a  @bean . <enter> Having the  @bean  (marked  @primary  to prevent issues with  @Autowired ) makes it easier to reason about what Spring Boot has done for you, and easier to default in simple use cases to the boot-created AuthenticationManager. For example, if I want an OAuth2 Authorization Server with password grant, it makes total sense for the AuthenticationManager for users to be the same as the  @primary  one. Now it is easy to set that up (just  @autowire  it). ",https://api.github.com/repos/spring-projects/spring-boot/commits/3d437711363ade1717a7e11b7b781d240bad4983,
https://github.com/junit-team/junit4/commit/41092ce4e01cc57d8aa1911e2f1169e0f355b1ae,Move TestClassTest to package org.junit.runners.model.  <enter> It is common to add tests to the same package as the class under test. ,https://api.github.com/repos/junit-team/junit4/commits/41092ce4e01cc57d8aa1911e2f1169e0f355b1ae,
https://github.com/square/retrofit/commit/704c484b56b0cf2d1f26f4315b3569c08e5cdc6a,Prepare version 2.8.1 ,https://api.github.com/repos/square/retrofit/commits/704c484b56b0cf2d1f26f4315b3569c08e5cdc6a,
https://github.com/junit-team/junit4/commit/3e08f69912d69189e895c279b1bece0c7c0840f4,"Create a class TestWithParameters.  <enter> This class keeps the data together that are needed for creating a runner for a single data set of a parameterized test. This makes it also clear, that the computation of the name is not the responsibility of the runner but of the Parameterized class. ",https://api.github.com/repos/junit-team/junit4/commits/3e08f69912d69189e895c279b1bece0c7c0840f4,
https://github.com/junit-team/junit4/commit/5e4f8e7fb82919d992887fca1741bb04ef1c8f4a,New Suite implementation makes ClassesRequest crazy simple ,https://api.github.com/repos/junit-team/junit4/commits/5e4f8e7fb82919d992887fca1741bb04ef1c8f4a,
https://github.com/apache/dubbo/commit/4a8da59573cb0f1d793809439abb2f2162f2d80f,"Proofread README.md file with multiple fixes ( <pr_link> )  <enter> Fixed typo, grammatical, punctuations, and semantic coherence to improve readability and content quality. <enter> Signed-off-by: Aditya Kumar Roy <akroy@umass.edu> ",https://api.github.com/repos/apache/dubbo/commits/4a8da59573cb0f1d793809439abb2f2162f2d80f,
https://github.com/apache/dubbo/commit/6912d9a14fe2c35dee306da9a8e953ba29d736da,Upgrade tomcat version to 8.5.31. ( <pr_link> ) ,https://api.github.com/repos/apache/dubbo/commits/6912d9a14fe2c35dee306da9a8e953ba29d736da,
https://github.com/apache/dubbo/commit/f490df87de45b57be8c224581a8a1a7dd9a20946,"keep demo simple, and switch to use zookeeper as registry center ( <pr_link> )  <enter> * keep demo simple, and switch to use zookeeper as registry center <enter> * remove comment ",https://api.github.com/repos/apache/dubbo/commits/f490df87de45b57be8c224581a8a1a7dd9a20946,
https://github.com/spring-projects/spring-boot/commit/0515ca0dd02fec54d438d45afbf95db1b5f41353,Auto configure micrometer cache metrics  <enter> Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/0515ca0dd02fec54d438d45afbf95db1b5f41353,
https://github.com/spring-projects/spring-boot/commit/0741c90489c94c7a15a415013301f40f93caae05,Avoid blocking on a Mono indefinitely  <enter> Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/0741c90489c94c7a15a415013301f40f93caae05,
https://github.com/spring-projects/spring-boot/commit/0a55e3e7365a44d2b1986954912f938be5a77398,Polish 'Clarify edge case docs on ConditionalOnClass'  <enter> Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/0a55e3e7365a44d2b1986954912f938be5a77398,
https://github.com/spring-projects/spring-boot/commit/0f9e8315bca4e3c8be824c2c1a1b7ec6defdc734,Replace use of deprecated Reactor MonoProcessor in tests  <enter> Fixes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/0f9e8315bca4e3c8be824c2c1a1b7ec6defdc734,
https://github.com/spring-projects/spring-boot/commit/11b7fd832d15856244bcaf3b1ec031e9eb1b6dc6,"Report non-matching outer class conditions  <enter> Update ConditionEvaluationReport so that, whenever a negative outcome is added for a source, any existing outcomes for inner classes of that source are updated with a non-matching outcome that indicates that the outer configuration did not match. <enter> Conditions are evaluated in two phases; PARSE_CONFIGURATION first and REGISTER_BEAN second. If a parent class’s conditions match in PARSE_CONFIGURATION then its inner classes will have their PARSE_CONFIGURATION conditions evaluated. If they all match, the inner class will be reported as a positive match in the auto-configuration report even if the outer class does not match as a result of the subsequent evaluation of a REGISTER_BEAN condition. <enter>  Fixes   <issue_link> ",https://api.github.com/repos/spring-projects/spring-boot/commits/11b7fd832d15856244bcaf3b1ec031e9eb1b6dc6,
https://github.com/spring-projects/spring-boot/commit/14bd404b71fcb967d4af282e839a763112ecd40c,Document AWS Elastic Beanstalk deployment  <enter> Update the reference documentation to include details of Amazon Elastic Beanstalk. <enter>  Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/14bd404b71fcb967d4af282e839a763112ecd40c,
https://github.com/spring-projects/spring-boot/commit/1c0bcc13cfa3aa00a8fea96e2ecb2e1867859a96,Set UserDetailsService in default AuthenticationManagerBuilder  <enter> Only affects the default AuthenticationManagerBuilder (so when users are not overriding the default global user details). Makes the UserDetailsService effectively available as it would be if we used AuthenticationManagerBuilder.inMemoryAuthentication() as a shared object in the HttpSecurity. <enter>  Fixes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/1c0bcc13cfa3aa00a8fea96e2ecb2e1867859a96,
https://github.com/spring-projects/spring-boot/commit/56ded38f5d6b6cc1d3e7a6bd6d131a7dac33b0c9,Generate default values from Duration and Period .ZERO  <enter> Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/56ded38f5d6b6cc1d3e7a6bd6d131a7dac33b0c9,
https://github.com/spring-projects/spring-boot/commit/8014b21ad96cf109735e092bb1d4e1c251634064,Upgrade to Maven Enforcer Plugin 3.0.0-M2  <enter> Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/8014b21ad96cf109735e092bb1d4e1c251634064,
https://github.com/spring-projects/spring-boot/commit/e28b98c59d43190b5ca8ea3ae4deac50c9737766,Remove multi config runApplication extension  <enter> Closes   <pr_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/e28b98c59d43190b5ca8ea3ae4deac50c9737766,
https://github.com/spring-projects/spring-boot/commit/e2cb7a75458d83c1358faf9e19194b9ab8fe0454,Align default scopes for Google with changes in Spring Security 5.0.1  <enter> Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/e2cb7a75458d83c1358faf9e19194b9ab8fe0454,
https://github.com/spring-projects/spring-boot/commit/e79ef9b73baca23e11db3c60fd3af2ca3a3dfb70,Add option to exclude devtools from fat jar  <enter> Add an `excludeDevtools` property to both the Maven and Gradle plugin that removes `org.springframework.boot:spring-boot-devtools` (if necessary) when repackaging the application. <enter>  Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/e79ef9b73baca23e11db3c60fd3af2ca3a3dfb70,
https://github.com/spring-projects/spring-boot/commit/f0c53726420e84267ba9ccff1640ed0bdf7f5fd7,Align with Spring Framework 5's new Commons Logging adapter  <enter> Closes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/f0c53726420e84267ba9ccff1640ed0bdf7f5fd7,
https://github.com/spring-projects/spring-boot/commit/f9094143d72a99bb52ad6414568ee2c93611115c,Remove undefined FILE appender from basic log4j config  <enter> Fixes   <issue_link> ,https://api.github.com/repos/spring-projects/spring-boot/commits/f9094143d72a99bb52ad6414568ee2c93611115c,
https://github.com/square/okhttp/commit/067aa1f4495f9c93bafca183a6d655fa81b139d6,Throw UnknownHostException again from HttpURLConnection  <enter> This is to address issue  <issue_link> . ,https://api.github.com/repos/square/okhttp/commits/067aa1f4495f9c93bafca183a6d655fa81b139d6,
https://github.com/square/okhttp/commit/5373160d20aa3f6036ff5ebc91137888c4abffbe,"Whole operation timeouts  <enter> Strictly-speaking this change is backwards-incompatible because it adds a new method to the Call interface. The method returns the call's timeout. <enter> The trickiest part of this is signaling the end of the call, which occurs after the last byte is consumed of the last follow up request, or when the call fails. Fortunately this is made easier by borrowing the sites used by EventListener, which already plots out where calls end. <enter>  <issue_link> ",https://api.github.com/repos/square/okhttp/commits/5373160d20aa3f6036ff5ebc91137888c4abffbe,
https://github.com/square/okhttp/commit/ff959f8fd550b8f55a47038ea4235b1b2ed2eaa8,Android Additional Tests ( <pr_link> ) ,https://api.github.com/repos/square/okhttp/commits/ff959f8fd550b8f55a47038ea4235b1b2ed2eaa8,
