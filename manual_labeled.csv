url,message
https://github.com/junit-team/junit4/commit/3171c4b29cb207e71fc2f752f0fbcb235bc8e784,"Relicense JUnit from CPL to EPL  <enter> EPL is the successor version of the CPL this makes re-licensing possible without seeking the approval of all contributors. <enter> CPL is actively hurting JUnit adaptation, it the following cases the deciding factor against JUnit was CPL. In both cases EPL would have been fine. * Netbeans can't ship JUnit [4] * OpenJDK uses TestNG instead of JUnit [5] <enter> Mike Milinkovich from the Eclipse Foundation wrote [1] <enter> > Back in 2009, the CPL was superseded by the EPL. This means that the > EPL is the successor version of the CPL. It also means that using the > CPL is the licensing equivalent of using deprecated code. > > Because the EPL is the successor version to the CPL, the 'new version > re-licensing' clause in Section 7 of the CPL applies. In other words, > you can re-license your project without seeking the approval of all > of your contributors. > The CPL and EPL basically differ by about one sentence, which you can > see here. The difference relates to the scope of patent licenses > terminated should someone sue another party for patent infringement. > This is the kind of stuff that lawyers love, but most developers > don't really care about. <enter> On the migration from CPL to EPL Mike Milinkovich wrote [2] <enter> > There was a two step process that was followed to make this happen. > First, following the terms of the CPL, IBM assigned the > responsibility to serve as the Agreement Steward of the CPL to the > Eclipse Foundation. Second, the Eclipse Foundation officially > recognized the EPL 1.0 as the new version of the CPL 1.0. In OSI > license terminology, the EPL now supersedes the CPL. > > A quick read of the two licenses will quickly show that they are very > very close. Other than their names and (previously) their Agreement > Stewards, the only substantive difference is the breadth of the > patent license termination in the event of a patent law suit. (See > the second paragraph of Section 7.) For more information on the > relationship between the CPL and the EPL see the EPL FAQ. <enter> You can find more information about the difference at [3]. <enter> The new `LICENSE.txt` is based on a plain text version of the EPL with formatted so that the diff is a clean as possible. <enter> I'll submit another pull request for the gh-pages branch. <enter>  [1]  http://mmilinkov.wordpress.com/2013/02/13/jruby-moves-to-the-epl/   [2]  http://mmilinkov.wordpress.com/2009/04/16/one-small-step-towards-reducing-license-proliferation/   [3]  http://www.eclipse.org/legal/eplfaq.php#EPLDIFFER   [4]  https://netbeans.org/community/releases/70/relnotes.html#deprecated   [5]  http://openjdk.java.net/jtreg/build.html "
https://github.com/spring-projects/spring-boot/commit/6c8f8c9d827a5340f9e6493c14d8c252d1f0d52a,"Better diagnotics when ESCF subclass breaks with custom management port  <enter> When a custom management.port is used, the child context is configured with an EmbeddedServletContainerFactory bean that has the same class as the parent context’s EmbeddedServletContainerFactory bean. This ensures that the child context uses the same type of embedded container as its parent when there are multiple embedded containers on the classpath. It also causes a failure when the custom EmbeddedServletContainerFactory subclass cannot be instantiated, for example because it’s an anonymous inner-class. <enter> This commit improves the diagnostics so that we fail fast with an information exception message when we detect that the embedded servlet container factory bean’s class cannot be instantiated. <enter>  Closes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/6dc14af92dbfa7b5281072d9fdde241ce0da3679,"Update view of bean types when an override is detected  <enter> Previously, when a bean was overridden and its type changes, BeanTypeRegistry could be left with a stale view of the bean's type. This would lead to incorrect bean condition evaluation as conditions would match or not match based on the bean's old type. <enter> This commit updates the type registry to refresh its view of a bean's type when its definition changes. <enter>  Closes   <issue_link> "
https://github.com/square/okhttp/commit/868ee844458eda9ee7b1b6f9a5238b7c3f84c0e4,"Drop our one remaining DSS cipher suite.  <enter> Tracking Chrome and Firefox, which have also dropped this cipher suite. <enter> This is the only cipher suite change since the last update. See our cipher suites spreadsheet for a comparison:  https://goo.gl/dWXbi0  <enter>  Closes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/e233ea7f546fcbc5fccf972bc70c26373103444c,Fix undertow access_log file name  <enter> Undertow 1.3.2 changed the default access log file suffix from '.log' to just 'log'. Thus we need to adapt the file name pattern to include the missing dot. <enter>  Closes   <pr_link> 
https://github.com/spring-projects/spring-boot/commit/247c596f8ceb657800e86d0ca59d4816aa67026b,Remove duplicate console appender from Actuator sample's logback config  <enter> Closes   <issue_link> 
https://github.com/junit-team/junit4/commit/591fcae09c6470a03ade7d608773f8f633409bc2,Added more Javadoc to Assert for messages and when they are displayed.  <enter> Put versiontag back into Version. 
https://github.com/junit-team/junit4/commit/870289f3272917f312de6902b8b6bdc43552d4b7,Simplify Filter implementation for backward compatibility 
https://github.com/square/retrofit/commit/c0cc4cb5bbf688a11dda5531f009300b20005e61,RxJava 1.0.14 with an important Android fix.  <enter> Just in case someone is relying on the transitive dependency. 
https://github.com/apache/dubbo/commit/e8d85386bc7869d3a6e5b27c12ec7784c74bc2d6,Format code ( <pr_link> ) 
https://github.com/square/okhttp/commit/6cf56de5d0701ff26aa6043c552e17c4665c1287,"Return HttpResponseCache to previous (e.g. KitKat) behavior  <enter> This change required to handle this Android scenario: <enter> When this version of OkHttp is packaged into Android in a future release (in com.android.okhttp...) there is a possibility that an older version of OkHttp bundled with application (in com.squareup.okhttp...) will pick up the newer HttpResponseCache via ResponseCache.getDefault(). It will attempt to use the get() / put() methods. Commit  <otherCommit_link>  was intended to restore HttpResponseCache get() and put() and avoid the UnsupportedOperationException that would be thrown. <enter> Unfortunately, it didn't quite do it: <enter> In KitKat and older versions OkHttp, in HttpResponseCache the behavior was to ignore any calls to put(URI, URLConnection) including any HttpURLConnection/HttpsURLConnection that wasn't its own (i.e. only ones from com.android.okhttp would be cached). The previous fix to HttpResponseCache re-introduced get()/put() but didn't implement the necessary instanceof checks. <enter> Jesse also informs me that coexistance with other implementations of HttpURLConnection is not required (since OkHttp replaces the HTTP implementation on the desktop). I have also since discovered that HttpResponseCache didn't implement the cache-control logic required to follow the letter of the Java API anyway, which means that HttpResponseCache is not suitable for use in cases where the Http(s)URLConnection implementation expects a fully compliant implementation. <enter> Also addressed nits from  <otherCommit_link> . "
https://github.com/square/okhttp/commit/137e7de0454f10160370f105ac7d9d2fc5403c84,"New API, HandshakeCertificates.addPlatformTrustedCertificates()  <enter> Also rename HeldCertificate.Builder.issuedBy() to signedBy(). 'Issued' is the word used by certificates; 'signed' is the word used by cryptographers. I prefer 'signed'. "
https://github.com/spring-projects/spring-boot/commit/4d172ca7429bfc15692ce7f1247beeb355faa924,"Remove duplicate resources from classpath  <enter> We had been making a special case for logback.xml anyway, so extending that to simply deleting recursively all of src/main/resources (or equivalent) from target/classes (or equivalent) seems like it's perfectly justifiable. <enter>  Fixes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/b39ecdf0060189367e396f0dcc455760006f2659,Rename preferred-mapper property so its clear it only applies to JSON  <enter> preferred-mapper has been renamed to preferred-json-mapper to make it clear that it only affects the JSON mapper and that the XML mapper that will be used (if any) is unaffected <enter> See  <issue_link> 
https://github.com/square/retrofit/commit/ebc0128add0d416a846ff661888910d16751dd34,Clean out Java 8 READMEs to further discourage use 
https://github.com/spring-projects/spring-boot/commit/f8a53cf775b03c9258b42be194e05e0ee1779f35,Update actuator security documentation  <enter> Update documentation to align with the new role based method. <enter> See  <issue_link> 
https://github.com/junit-team/junit4/commit/fa35d6d84a0b2c59254cb479633d0e20bc6e12e9,"Delete .cvsignore files, because we're using Git now. "
https://github.com/spring-projects/spring-boot/commit/ee4205a0498440f3003ace8c5ccf36cbe74eab00,Remove unnecessary logging by start-docker script 
https://github.com/apache/dubbo/commit/9897aa3d7273e3eb96910cfdc09709a77cae50b0,"remove appConfigs cache to support one service/reference registered more than one time (if users don't explicitly add id, cache can not work properly) "
https://github.com/junit-team/junit4/commit/2b6fa701e84625c511b03079296774cc0904ef1a,"Bug: ParentRunner lost test Class from a separate class loader ( <pr_link> )  <enter> * Bug: ParentRunner lost test Class from a separate class loader <enter> When junit.jar located in one ClassLoader but runing tests in another ParentRunner can lost information about run class. For example if use @ClassRule and request test class(org.junit.runner.Description#getTestClass) we can get null, because ParentRunner instead of set Class as is to Description tranform it to class name string, as result org.junit.runner.Description#getTestClass execute Class.forName and can't find test class. <enter> Spring-test fail with exception if we try use SpringClassRule <enter> ``` java.lang.NullPointerException  at org.springframework.test.context.junit4.rules.SpringClassRule.validateSpringMethodRuleConfiguration(SpringClassRule.java:186)  at org.springframework.test.context.junit4.rules.SpringClassRule.apply(SpringClassRule.java:134)  at org.junit.rules.RunRules.applyAll(RunRules.java:26)  at org.junit.rules.RunRules.<init>(RunRules.java:15)  at org.junit.runners.ParentRunner.withClassRules(ParentRunner.java:245)  at org.junit.runners.ParentRunner.classBlock(ParentRunner.java:194)  at org.junit.runners.ParentRunner.run(ParentRunner.java:362)  at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ``` <enter> As solution, now ParentRunner create Descriptor with explicit specify Class, name and uses annotations. <enter> * Restore backward compatibility with sub class of ParentRunner that override getName method * Add ParentRunnerClassLoaderTest to AllClassesTests suite "
https://github.com/square/okhttp/commit/0685dfaa7ff71a8f16b1b71f417b08eff13ec55f,Move TLSv1 and TLSv1.1 to COMPATIBLE_TLS.  <enter> We no longer connect to TLSv1.0 or TLSv1.1 servers out-of-the-box; instead it is necessary to enable COMPATIBLE_TLS in the OkHttpClient configuration. <enter> This is in the path to later removing these TLS versions completely; that is scheduled for March 2020 by some browsers. <enter>  <issue_link> 
https://github.com/square/retrofit/commit/2d6b02f7cf59235358ef4d574930ce7545ce8619,RxJava 1.0.  <enter> (cherry picked from commit  <otherCommit_link> ) <enter> Conflicts:  <tab> pom.xml 
https://github.com/square/okhttp/commit/6651a9c15e06e8d1829aa00f970998be2f33b225,Change MediaType's failure mode to not crash on charset problems.  <enter> As-is it throws unchecked exceptions on unexpected charsets. This is a problem because it can cause a misbehaving webserver to crash the client. <enter> I don't expect this to break existing clients; returning 'null' has always been a possibility; it's just returned in more cases. 
https://github.com/spring-projects/spring-boot/commit/3d27391d47910f73c1e889b76030a53038a38f25,Allow StringSequence.isEmpty() to be compatible with JDK 15  <enter> JDK 15 introduces isEmpty() on CharSequence which clashes with the one declared in StringSequence because it is not public. <enter> See  <pr_link> 
https://github.com/square/okhttp/commit/c6c7ce7dadf2ccaa04122f57a278a4a96d1f5c50,"DiskLruCache snapshot() method removing entries that are being cached (<pr_link> ) <enter> Fixed a bug I found. When using DiskLruCache, hasNext() method of Iterator<Snapshot> returned by snapshot() method iterates through lruEntries, however if entry is not completed yet, it is removed (together with dirtyFiles) as cleanFiles don't exist yet - during saving response to disk. This caused sometimes file not being cached at all. "
https://github.com/spring-projects/spring-boot/commit/3a8a1272855a82c1d454920b423c49ced826428a,Implement simpler exclusion logic for Gradle  <enter> Simplify the exclusion logic used in Gradle by implementing implicit exclusions rather than trying to detect transitive excludes. <enter> This commit reverts much of the code originally included to  fix   <issue_link>  which adds far too much complexity to the build and still doesn't solve the underlying issue. <enter>  Fixes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/c4f756daee43f89e0ba832ceac17bac216fc899b,"Fix MavenSettings’ handling of profiles activated by a file  <enter> Previously, MavenSettings used a FileProfileActivator with no PathTransformer. If a settings.xml file contains a file-activated profile this would result in an NPE within Maven. This was made worse by the NPE not being included in the resulting failure message which hampered diagnosis of the problem. <enter> This commit updates MavenSettings to configure its FileProfileActivator with a PathTransformer. It also improves the failure message that’s created from any problems that are reported by Maven while determining the active profiles to include a problem’s exception if it has one. <enter>  Closes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/32b32b714275d0efaa1f5afba10e88e09101f224,Notify the use of logback specific system property  <enter> Logback documentation explains how to initialize the logging system and namely how the `logback.configurationFile` system property can be used to specify the configuration file to use. <enter> Spring Boot has an abstraction on top of that. A user can define the `logging.path` property regardless of the logging infrastructure it is using. <enter> Users following the logback documentation can be confused at first so we're not logging a warning when we found out that the logback specific property has been specified. <enter>  Closes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/e5a253e68951dcf975b9844b3b39afac2222b503,"Improve diagnostics when OnBeanCondition type deduction fails  <enter> When @ConditionalOnBean or @ConditionalOnMissingBean are used on a  @bean  method, they will, in the absence of any other configuration, attempt to deduce the bean's type by examining the method's return type. This deduction can fail. See  <issue_link> ,  <issue_link> , and  <issue_link>  for some examples of possible failure causes. Previously, this failure was only logged as a debug message leaving the user with a misleading message suggesting that the @ConditionalOnBean or @ConditionalOnMissingBean annotation was not configured correctly. <enter> This commit improves the diagnostics by mention the possibility of type deduction in the exception message and including the exception that caused deduction to fail as the cause. <enter>  Closes   <issue_link> "
https://github.com/junit-team/junit4/commit/3189af007b26d74ca459f823d57ef77b9c1697b8,Remove redundant field fCause 
https://github.com/square/okhttp/commit/30ecba897fb624df201f0a014b54a604418a0e73,Use Request and Response types in OkResponseCache.  <enter> This breaks support for java.net.ResponseCache implementations. That's good. That API is akward and can't support important features like conditional GETs and hit tracking. 
https://github.com/junit-team/junit4/commit/435d41f0d45cfdbc1a38e1ad4eb1d5300da533f9,"Use Google's Maven Central mirror <enter>  <enter> We are using Maven 3.1.1 which by default uses HTTP instead of HTTPS for <enter> resolving artifacts from Maven Central. Maven Central recently <enter> discontinued HTTP support. Therefore the build on Travis started <enter> failing. By using an HTTPS mirror of Maven Central the build on Travis <enter> will work again. <enter>  <enter> I chose Google's mirror because Travis uses this mirror by default, too. <enter> I did not upgrade to a new version of Maven because there is no newer <enter> version with Java 5 support and it should be possible to build JUnit 4 <enter> with Java 5 so that we can easily ensure that it works with Java 5."
https://github.com/apache/dubbo/commit/6764744115bffdcd7cde85112611dade6002fe5c,update version to 2.1.6  <enter> git-svn-id:  http://code.alibabatech.com/svn/dubbo/trunk@1550  1a56cb94-b969-4eaa-88fa-be21384802f2 
https://github.com/square/okhttp/commit/15940665526348d815b26d509ce44c79926c612b,Merge: Fix HttpURLConnection CloseGuard warning due to lack of close on GZIPInputStream <enter> Original AOSP/libcore commit by Brian Carlstrom: java.lang.Throwable: Explicit termination method 'end' not called   at dalvik.system.CloseGuard.open(CloseGuard.java:184)   at java.util.zip.Inflater.<init>(Inflater.java:82)   at java.util.zip.GZIPInputStream.<init>(GZIPInputStream.java:96)   at java.util.zip.GZIPInputStream.<init>(GZIPInputStream.java:81)   at libcore.net.http.HttpEngine.initContentStream(HttpEngine.java:523)   at libcore.net.http.HttpEngine.readResponse(HttpEngine.java:831)   at libcore.net.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:274)   at libcore.net.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:486)   at ... <enter> Bug: 6602529 Change-Id: I9b49cbca561f8780d08844e566820087fdffc4d7 
https://github.com/junit-team/junit4/commit/18b23a7ed22080e7412e24060c66cef7fc3b1b93,Fix <issue_link> - correct link to 4.12 release notes 
https://github.com/spring-projects/spring-boot/commit/c3e447c84c8a3d46ef300184787d3c6be8b792fc,"Order char encoding filter so it sets encoding before request is read  <enter> For the character encoding filter to work, it's vital that it sets the request's encoding before any other filters attempt to read the request. This commit updates the order of OrderedCharacterEncodingFilter to be HIGHEST_PRECEDENCE and improves the existing test to check that the ordering is as required. <enter>  Closes   <issue_link> "
https://github.com/square/okhttp/commit/18f2b5e6e69de28f420298862378abfd243096ce,"Fix source compatibility for some Kotlin callsites. ( <pr_link> )  <enter> We had a problem where boolean vals needed to be reverted back to boolean funs. I'd like to go back to vals later, but supporting existing source patterns is more important. <enter> We also had a problem where single abstract method types (SAM types) could be supplied as lambas when calling into Java but not when calling into Kotlin. <enter> I found these by pointing KotlinSourceCompatibilityTest at the OkHttp <enter> Get there like this:   git co  <otherCommit_link> ^   git co  <otherCommit_link>  okhttp/build.gradle   git co  <otherCommit_link>  build.gradle "
https://github.com/square/okhttp/commit/7a3bb19ea44f6771a20d3f5c323cc8bd15d73a56,"Prevent MockSpdyPeer interfering with Android tests  <enter> On Android we run the OkHttp tests as an instrumented test case. The default UncaughtExceptionHandler on Android will quit the app, causing the current test to fail. <enter> MockSpdyPeer creates a thread that fails for various reasons that are not related to / required for the actual test. Often the exception is thrown during a subsequent test. <enter> This change logs the exception but prevent it from propagating out of the top of the call stack. This decreases overall flakiness. "
https://github.com/apache/dubbo/commit/203078981bb23517703e7bbb60925b8542bc8983,Ignore testStatusChecker since it is unstable and consider removing it later. 
https://github.com/square/okhttp/commit/29ab48bf0dfbac1b249f2233de08fa948bad11d8,"Fix a race condition in Connection.isExpired().  <enter> This was causing some SPDY connections to be evicted early, and preventing connection reuse. <enter> The spdyConnectionReuse test becomes flaky with the fix that makes MockWebServer use different sequenceNumbers for different requests on the same socket. With the fix the test is no longer flaky. The old test wasn't good enough to detect what it wanted to detect! <enter> This race has existed in the code since we added more aggressive time-based expiration in January 2013. In my basic tests the race impacted ~20% of connections on a desktop VM. It may have been more on mobile. "
https://github.com/junit-team/junit4/commit/1254795902e56eb545e1fe696827924bc5e82b66,"Mark ThreadGroups created by FailOnTimeout as daemon groups ( <pr_link> )  <enter> Mark ThreadGroup created by FailOnTimeout as a daemon group. <enter> Previously, FailOnTimeout destroyed the ThreadGroup, which could cause race conditions if the ThreadGroup was referenced by other threads. <enter>  Fixes   <issue_link> "
https://github.com/junit-team/junit4/commit/1ef449139923a22333f262dc8c75fa057903040c,Increase running time of statement. Fixes <issue_link> .  <enter> The time between starting the statement and calling the future is arbitrary. Now the execution time of the statement is very very long. This ensures that the statement is not already finished when the future is called. 
https://github.com/square/okhttp/commit/2594c6c695f2898bba947ea86a7aaac8dcfd4dc4,Don't call callEnd() twice when application interceptors proceed twice.  <enter> I'm working towards reducing the role StreamAllocation plays. <enter>  <issue_link> 
https://github.com/square/okhttp/commit/1ab086360755fcb13356617fe6d738171889d810,"Add a test for interceptors throwing unchecked exceptions.  <enter> Our behavior here is not good. Right now it looks like we're leaking resources; nothing is releasing the socket in a 'finally' clause when interceptors crash. We're also not notifying the callback that the call has failed; that's left hanging. <enter> That said, we don't expect applications to recover from these exceptions. <enter>  Closes   <issue_link> "
https://github.com/square/retrofit/commit/863030b551bc2e3447c5dde55d6bcc312218de6f,Add docs about null responses. 
https://github.com/spring-projects/spring-boot/commit/296dc7132b8e444df0e6173740fa6bba5a5f1bd1,Allow JSON Testers to be `@Autowired`  <enter> Switch `@AutoConfigureJsonTesters` to use regular `@Autowired` injection for JSON testers. Prior to this commit JSON Tester fields were initialized directly which caused IDE issues and was also a little confusing. <enter>  Fixes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/12724bf33211d68899d710fda376bd5636731e4c,"Fix ordering of keys in PropertySourcesPropertyValues  <enter> Since  @ConfigurationProperties  binding uses a single instance of PropertySourcesPropertyValues per bean, there doesn't seem to be any issue with using a normal LinkedHashMap. Then the order passed in as PropertySources will be preserved. <enter>  Fixes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/1de2316a0b4c2d5896c34b954208a4c550466f22,"Refine validator and MVC validator configuration  <enter> This commit ensures that a primary JSR 303 and Spring Validator will be exposed if the auto-configuration kicks in. As `LocalValidatorFactoryBean` exposes 3 contracts (JSR-303 `Validator` and `ValidatorFactory` as well as the `Spring` validator one), this makes sure that those types can be injected by type. <enter> `LocalValidatorFactoryBean` exposes 3 contracts and we're only checking for the absence of a `javax.validation.Validator` to auto-configure a `LocalValidatorFactoryBean`. If no standard JSR validator exists but a Spring's `Validator` exists and is primary, we shouldn't flag the auto-configured one as `@Primary`. Previous iterations on this feature have made sure that we'll auto-configure at most one `javax.validation.Validator` so not flagging it `@Primary` is no problem. <enter> This commit also restores and adds tests that validates `ValidationAutoConfiguration` will configure a JSR validator even if a Spring Validator is present. <enter> This effectively  fixes   <issue_link>  in a different way. <enter>  Closes   <issue_link>   Closes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/05e6af23cf2e60d5c61388fbb954bd56f00b9f94,Prepend without replacing in HttpMessageConverters  <enter> It was incorrect to simply replace existing instances because you can't tell from the instance which media types and java types it supports. This fix just prepends the custom converters so they get higher priority. <enter>  Fixes   <issue_link> 
https://github.com/square/retrofit/commit/238a9e59e69d61479a4505dba5f5659a599c699f,"Doc error. `@QueryMap` with `encoded=true` will stop default url encoding. So, calling with `foo.list(ImmutableMap.of('foo', 'foo+bar'))` yields '/search?foo=foo+bar' instead of '/search?foo=foo%2Bbar'. "
https://github.com/square/retrofit/commit/f4ee9e28a6380662ea0ab8a9a02adbd021ef55e8,Added more tests for RxJava Single type support  <enter> Single.toBlocking() is present since RxJava 1.0.16 version. 
https://github.com/spring-projects/spring-boot/commit/09200361defde95ec48bd9169ab5db7590c9440b,"Align expectations of various JMX configurations  <enter> They all want to create an MBeanServer and when that happens user sees no MBeans, or sometimes just one set (Spring Core, Spring Integration or Spring Boot). To harmonise them we create a  @bean  of type MBeanServer and link to it in the other autoconfigs <enter>  Fixes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/2516dc033f909281702dfd2f99e8d0f05d59af8b,"Fix documentation example  <enter> Previously, the nested private static class would cause an error at startup stating that it was not accessible when trying to bind the property from the environment. The nested class should be public. <enter>  Closes   <pr_link> "
https://github.com/apache/dubbo/commit/fa157deadf65d00c9884d611430ec78e585840ff,Refactor: remove NetUtils.getHostAddress() and relace it with NetUtils.getLocalHost() ( <pr_link> ) 
https://github.com/apache/dubbo/commit/f9f10ba5225e80c34953f56123ac1702c13e45c7,"In order to facilitate the consumer to better locate the failure of provider token check, the token value called by consumer will be printed out in the exception information ( <pr_link> ) "
https://github.com/square/okhttp/commit/bffee2336725dde0f74933d5a7d12536c9bcbd06,"Introduce intermediate storage for frame contents.  <enter> This eliminates the need to always send a frame for every FrameSink#write and to always send an empty frame for FrameSink#close. Now, we only emit bytes once Okio reports complete segments. "
https://github.com/square/okhttp/commit/ba5d3e278b027ee7a2cb741a1bec3646f9d11e16,Migrate from Travis to GitHub Action for publishing 
https://github.com/square/okhttp/commit/fd509b937c4a5438fe02ddf06ade5ad56736af5d,Inject a leading . for better matching under JavaNetCookieJar  <enter> Closes :  <issue_link> 
https://github.com/junit-team/junit4/commit/078e45bd31a9920e00633ad6ce658e22529304f2,Brought in old JUnit4ClassRunner for compatibility. Renamed new JUnit4ClassRunner to BlockJUnit4ClassRunner. 
https://github.com/square/retrofit/commit/00d3f9070e15e514430e5dbb2aec602547c3c92d,AndroidLog: Added getTag() and logChunk() methods  for easier subclassing. 
https://github.com/square/okhttp/commit/18f3564a4f2b17c3067e7f02337e3909ba5cb3ba,Update deploy_snapshot.sh to temporarily ignore javadoc errors and compile tests but not run ( <pr_link> ) 
https://github.com/apache/dubbo/commit/793bf8244411c33b675e08f1499122bc82654d44,Defensive check to solve issue <issue_link> ( <pr_link> ) 
https://github.com/square/okhttp/commit/c8638813ff5f90715417e489b342aae5e410c5b2,Build setup tweak to work around release plugin bug.  <enter> http://jira.codehaus.org/browse/MRELEASE-812 
https://github.com/junit-team/junit4/commit/610b38e6c9753ab01b8aef093d2fcaeabe3a7a32,Updated release notes  <enter> Signed-off-by: Kent Beck <kent@threeriversinstitute.org> 
https://github.com/square/okhttp/commit/0665b628fafec38271d7a66421ae04c7fd35dd29,Add support for following HTTP 307 temporary redirects.  <enter> Fixes Android bug 41739. 
https://github.com/square/okhttp/commit/59e68cd2bcba789e7faca70f8910afd2edeed2be,"Introduce Exchange.  <enter> This is the payoff that preceding changes have been working towards. This splits StreamAllocation into three parts: <enter>  - ExchangeFinder: strategy to allocate connections for exchanges  - Exchange: a single request/response pair  - Transmitter: a sequence of exchanges for a Call <enter> The refactoring isn't totally complete, but this should be the last big one. <enter>  <issue_link> "
https://github.com/square/okhttp/commit/e36d7ecc26be18021da3555fc8b14381df7af34d,"Fix flakiness in CallTest.cancelTagImmediatelyAfterEnqueue()  <enter> There's a race where the HTTP engine has been created, but not yet connected and the cancel isn't as immediate as it could be. Fix the test by making sure there's a response to be retrieved. <enter> With the upcoming connection pool changes we might make the implementation more robust. <enter>  Closes :  <issue_link> "
https://github.com/spring-projects/spring-boot/commit/8a0f0354dfed2fc6d4cb1b046ec03fe5b7ff1146,"Disable Log4J2's shutdown hook by default  <enter> Log4J2 enables its shutdown hook by default. When the JVM is exiting, this creates a race between logging that happens during the application context being closed and Log4J2 being shut down such that the logging is lost. <enter> This commit updates SpringBootConfigurationFactory so that it produces a custom sub-class of DefaultConfiguration that disables the shutdown hook by default. In addition to solving the problem described above, this also aligns the Log4J2 logging system with the logging.register-shutdown-hook property which defaults to false. <enter>  Closes   <issue_link> "
https://github.com/square/retrofit/commit/54c8e17ad51bd35e75009233c3be6cdc3afe310e,Update documentation for handling of @field and @part values. 
https://github.com/junit-team/junit4/commit/16a2b51b9d9425cd7dacad85e2df97985996ca8d,"Disable parts of doclint for the site's javadoc.  <enter> This is a follow-up to  <otherCommit_link> . That commit is missing to apply the doclint rules to site generation. Hence the site goal fails because of doclint issues. Now doclint is disabled for all groups but accessibility and reference for the site generation, too. "
https://github.com/square/okhttp/commit/5569a0d20f4669ddde8227d8777de54ddf373181,Remove obsolete @JvmField 
https://github.com/square/retrofit/commit/26d19ea8877696a253be8c00b2baed6b359baaa2,Java 7 is required since <otherCommit_link> 
https://github.com/square/okhttp/commit/4ab6a8258b0df3a3528029f810e1f48952dba2d7,Remove old SSL protocol method. 
https://github.com/square/okhttp/commit/18b2660873ed8f028ee72981c882ed676aa08030,"New CertificateAuthorityCouncil class to normalize certificate chains.  <enter> The goal of this is to get the root CA certificate into the certificate chain, so that it can be considered by the certificate pinner. The work to integrate CertificateAuthorityCouncil with CertificatePinner will come in a follow-up PR. <enter> See:  <issue_link> "
https://github.com/spring-projects/spring-boot/commit/205fa2507b019f5e1348f6bc554fdd18691152ba,Remove maven-eclipse-plugin as it has been retired  <enter> Closes   <pr_link> 
https://github.com/square/okhttp/commit/cf63fcc48ae3e1dc3fb32120ca2fb04877fa041e,Remove creation of 'fat' jar.  <enter> Since the 'okhttp-protocols' module no longer exists we do not need to create this. 
https://github.com/junit-team/junit4/commit/5eee07b3e21f196b8cb937fb88eb8cf4be694f76,"Optimize ParentRunner.filter for nested suites  <enter> Prior to this change, applying a filter to a nested suite would create redundant nested filters "
https://github.com/square/retrofit/commit/b6748ac88759a4768c1003930bb5c921ac49d8d1,Mark GSON as provided since we jarjar it in. 
https://github.com/junit-team/junit4/commit/24dfdd762e753c83babca3768d4b508cf5c6a86c,Fix dead link to the ant task in FAQ ( <pr_link> )  <enter> Documentation to the ant junit task has been moved to another location. 
https://github.com/square/okhttp/commit/50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d,"Move out of the libcore package.  <enter> To promote the code into AOSP, we'll keep this package as-is and do the jarjar in Android instead. "
https://github.com/square/okhttp/commit/5ba145aa6c737878281c3fc655657002320b71c0,"Limit recovery attempts for REFUSED_STREAM errors  <enter> We limit per-connection retries but not per-call retries, so this was creating large numbers of connections each of which called the server and accepted yet another REFUSED_STREAM. <enter> Instead we fail sooner with a StreamResetException. <enter> This shows that the ExchangeFinder interface is still somewhat inadequate to support all of the use cases we have. "
https://github.com/apache/dubbo/commit/5caa422add46efa9b6de8c0e763e1ccecbcbfacd,just for modify comments and imports ( <pr_link> ) 
https://github.com/square/retrofit/commit/745e29b7832c3cc37e7b6d395aded79a908c3bbc,"Remove deprecated error identifier.  <enter> This whole class is probably going to die or morph, but killing off tech debt before major refactorings makes me feel good. "
https://github.com/spring-projects/spring-boot/commit/5afe4743cbf4ff69ffe4bbcefa4508b1a4ac6f4b,Remove deprecated configuration properties  <enter> This commit removes the following deprecated properties: <enter> * `server.connection-timeout` * `server.use-forward-headers` * `server.jetty.max-http-post-size` * `server.tomcat.max-http-post-size` <enter>  Closes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/24e873cd7c2608e642fd6e90460bc98079ba4e27,Move files from /.eclipse into /eclipse  <enter> Move the `eclipse.properties` file from `.eclipse` into `eclipse` since the IDE plugin supports both. 
https://github.com/square/okhttp/commit/0e0f3a2d8d95278bf362eaeb08f13516e383fafd,"Push OkHttp 3.14.x into the sea. It is no longer supported. ( <pr_link> )  <enter> OkHttp 4.x is our only branch receiving security fixes, bug fixes, and new features. <enter> OkHttp 3.12.x gets security fixes only. "
https://github.com/square/retrofit/commit/246bef5bf34c0598a91038b2e15bace7718408d4,Remove old ProGuard nonsense.  <enter> As of API 26 the android.jar contains the classes checked by Platform and used by Platform.Java8. And we don't encourage throwing checked exceptions from the service method but instead routing them through your call adapter. 
https://github.com/square/retrofit/commit/2e15cf9e75e4204aa492ecc1cbe53053f95a2a8f,Promote Android logging to a class which knows about chunking.  <enter> Remove the concept of chunking from calling code. This is an Android-specific implementation detail which is now only performed when needed. 
https://github.com/square/retrofit/commit/9d683b75b111e60d30da8a03335d2ce71f5e8585,"Migrate forced suspension mechanism from yield to Dispatcher.Default  <enter> Since it's possible for certain dispatchers to completely avoid yielding, and currently the immediate dispatchers exhibit this behavior, we need an alternate mechanism of forcing suspension or UndeclaredThrowableExceptions will still be seen. <enter> Retrofit does not have its own thread pool onto which we can defer resuming. Instead we rely to Dispatchers.Default and forcibly suspend the caller using low-level coroutine intrinsics. "
https://github.com/spring-projects/spring-boot/commit/ae3225e76e6f5e7d7680bfd9b5cca9da13a6efbc,"Mention that Lettuce requires commons-pool2  <enter> We intend to remove this limitation in a future milestone but as the Lettuce auto-configuration requires `commons-pool2`, this commit updates the How-To to mention that. <enter> See  <pr_link> "
https://github.com/junit-team/junit4/commit/1360f9b696f2fb1bc32b16b070ffb3363a88864f,Update Maven GPG plugin from 1.4 to 1.5.  <enter> Just to keep up-to-date. Release notes:  http://jira.codehaus.org/browse/MGPG/fixforversion/17635 
https://github.com/square/okhttp/commit/16f1d048165d2bf0aee4833ff7d8b415f537ce64,"api has changed, fixing the example "
https://github.com/square/okhttp/commit/32a2b1d8d000a19d4a340cc1d77a68973a9d65dc,"OkBuffer API sketch.  <enter> I'm unhappy with java.io:  * No timeouts.  * Every layer needs to copy bytes around. Always copying bytes.  * Features like mark/reset and available() are clumsy.  * Its awkard in mixed text/binary protocols like HTTP because    character decoding is separate and takes over the stream. <enter> Unfortunately java.nio isn't better, just different:  * It's complex.  * Buffers are fixed size.  * No built-in buffer pooling.  * Features like mark/reset/position are clumsy. <enter> This is an obnoxious attempt at a 3rd I/O interface, mostly inspired by InputStream and OutputStream, but using growable buffers instead of byte arrays as the core data container. "
https://github.com/junit-team/junit4/commit/d2b75f93d21d2584efab1129aacd1f3020c37fca,"Document limitationBuild with Maven 3.1.1 (using Maven Wrapper) <enter>
This makes the build independent from the Maven version that is
installed on the build machine. E.g. Travis has Maven 3.5.6 installed
that does not support Java 6 anymore.
Maven version 3.1.1 is used because all newer version don't support Java 1.5."
https://github.com/spring-projects/spring-boot/commit/893654bdd1d71fdf42b21d8ca16c4c18faf6a3ea,Update documentation for new HealthIndicator support 
https://github.com/junit-team/junit4/commit/8a367c1b918f02135d333f3cea8b576c20287361,"Revert 'ExternalResource: declare after() to throw Throwable ( <pr_link> )'  <enter> Revert commit  <otherCommit_link> . It breaks code that extends ExternalResource, overrides after() and calls super.after() in after(). "
https://github.com/junit-team/junit4/commit/a90b496a6595856066504baf4f737fb853a6e45d,"Ensure exceptions from methodBlock() don't result in unrooted tests.  <enter> The introduction of the runLeaf() method in BlockJUnit4ClassRunner in JUnit 4.9 introduced a regression with regard to exception handling. <enter> Specifically, the invocation of methodBlock() is no longer executed within a try-catch block as was the case in previous versions of JUnit. <enter> Custom modifications to methodBlock() or the methods it invokes may in fact throw exceptions. In such cases, exceptions thrown from methodBlock() cause the current test execution to abort immediately. As a result, the failing test method is unrooted in test reports, and subsequent test methods are never invoked. Furthermore, RunListeners registered with JUnit are not notified. <enter> This commit addresses this issue by wrapping the invocation of methodBlock() within a try-catch block. If an exception is not thrown, the resulting Statement is passed to runLeaf(). If an exception is thrown, it is wrapped in a Fail statement which is passed to runLeaf(). <enter>  Closes   <issue_link>   Closes   <pr_link> "
https://github.com/junit-team/junit4/commit/0d6cd750d53486f01f12ddfee8657d94b5940574,Remove old todo 
https://github.com/square/okhttp/commit/0d069f3b7bc524320fc76051408384f8ece77412,Prefer ByteString.encodeString.  <enter> This saves cloning the byte array because the byte array can't be modified by the caller. 
https://github.com/spring-projects/spring-boot/commit/85c0b44dcbbe4d201f8b7fd72a97c31c2d07a3ec,"Test that LaunchedURLClassLoader works when thread is interrupted  <enter> Previously, RandomAccessDataFile used a semaphore and acquired it interruptibly. This meant that an interrupted thread was unable to access the file. Notably, this would prevent LaunchedURLClassLoader from loading classes or resources on an interrupted thread. <enter> The previous commit ( <otherCommit_link> ) updates RandomAccessDataFile to acquire the semaphore uninterruptibly. This commit adds a test to LaunchedURLClassLoader to verify that it can now load a resource from an interrupted thread. <enter>  Closes   <pr_link> "
https://github.com/spring-projects/spring-boot/commit/f9d94c6ed080c45bc96a76e134d9db5bb038f900,Remove duplicate word in docs 
https://github.com/spring-projects/spring-boot/commit/2a85a2557d37e133a10a513fc71b5ccf4ee2d4ff,"Fix health indicator auto-configuration order  <enter> Previously, the health auto-configuration `AutoconfigureOrder` entry for couchbase was referring to the standard couchbase auto-configuration that is not responsible to configure the `CouchbaseOperations` bean. Yet, the health indicator implementation was relying on the presence of such a bean. <enter> This commit fixes the `AutoconfigureOrder` entry so that it refers to `CouchbaseDataAutoConfiguration` now. <enter>  Closes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/fe3d2c39a0f4cf016c8ceb27dbeab5508c85e65f,Fix broken links in the documentation 
https://github.com/spring-projects/spring-boot/commit/715cf7da7564daaa8c349d34bd826b27ad71b183,"Do not enable cglib if spring.aop.proxy-target-class is configured  <enter> This commit makes sure to honour the `spring.aop.proxy-target-class` property if set by the user. Previously, the `PersistenceExceptionTranslationPostProcessor` was always configured to use cglib, regardless of the value of that property. <enter>  Closes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/e69ec6bb09e93aa5d240cfdb826e93cebb91278e,"Log classpath once environment has been prepared  <enter> Previously, the classpath would be logged in response to the ApplicationStartedEvent. At this point, logging could be disabled while the logging system is being initialized, or because the log levels configured in the environment have not yet been applied. <enter> This commit moves the logging to happen in response to an ApplicationEnvironmentPreparedEvent by which point the logging system has been initialized and its levels have been configured. <enter>  Closes   <issue_link> "
https://github.com/square/retrofit/commit/948a0db7ef1d46c66237ed2feb9f6f08ee159c68,"Allow service interfaces to extend other interfaces  <enter> With a higher minSdkVersion, the bug which prevented this on Android no longer exists. "
https://github.com/spring-projects/spring-boot/commit/da4f8514b293ef1c99deb0024e8147d4e553aa49,Add byte-buddy managed dependency  <enter> Add a managed dependency for byte-buddy since Mockito needs 1.6 and Hibernate pulls in 1.5. <enter> See  <issue_link> 
https://github.com/square/okhttp/commit/09f424f12e48e2640915bf61c86a9ecd928e459e,fix README.md typo ( <pr_link> ) 
https://github.com/square/retrofit/commit/0fff59140b5791ad0f1b1c7bf7826db2e00a73f1,Pull out ServiceMethod base class  <enter> This will allow us to support multiple forms of invocation beyond HTTP calls. 
https://github.com/spring-projects/spring-boot/commit/8561929164846ef4b3323a8b3f88a09ea1441785,"Improve Spring Session sample  <enter> This commit improves the Spring Session sample by providing multiple build profiles that make it possible to easily try out different session stores. By default, JDBC session store backed by an in-memory embedded H2 database is used. <enter> See  <pr_link> "
https://github.com/spring-projects/spring-boot/commit/fa6ee8e34d5f76ee57dd9f9c84bb047c5ee3d356,Clarify h2-console requires a servlet-based web app  <enter> Fixes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/46fbca66a69d102db55f7c454565f82ff5be6b98,Fix typo 'a' -> 'an'
https://github.com/junit-team/junit4/commit/cb0c4e9f7c9be8be7c11e4934f6bd71a312102ec,"For <issue_link> , remove FrameworkMethod.getParameterSignatures()  <enter> Having this method in place made a class from the 'core' of JUnit (org.junit.runners.model) depend on something from 'experimental' -- a dependency going in the wrong direction. "
https://github.com/apache/dubbo/commit/80776517e923a7bb77a307b74d3b5fdfa1c2b22d,"temporarily change spring-context-support dependency back to SNAPSHOT, the formal release turns to be broken."
https://github.com/apache/dubbo/commit/ff76661ef4ad2af0b92c208dc0740bb00e93020b,change version to 2.7.6-SNAPSHOT to prepare for next major release 
https://github.com/square/okhttp/commit/9b4e74f8c8ce6fff4281c2d7369fb25f6772a64e,"A Pipe.  <enter> This is something we need to implement HttpURLConnection atop the native OkHttp API. The application thread wants to be active, writing to its OutputStream. But in OkHttp's API, this work wants to happen in the RequestBody.writeTo() callback. To make this work we give the HttpUrlConnection OutputStream the sink end of the pipe, and the RequestBody the source end of the pipe. It's a bit of plumbing, but the benefit is that backpressure, timeouts, and failures will propagate as expected. "
https://github.com/apache/dubbo/commit/b4afeb982b943ca8c6bbd261302a9e161c2e98a9,"follow up for pr#4339, remove the space ( <pr_link> ) "
https://github.com/square/okhttp/commit/dac5aed3d5f9307b9d1ab0a8c7840b232d053ef3,"Move connection pooling logic.  <enter> Previously we had this ugly, awkward release() method that attempted to manage connection pooling, discarding streams for caching, and closing broken streams. <enter> Move connection reuse to HttpConnection, with policy informed by HttpEngine. It specifies what to do when the connection becomes idle: pool, close or hold. The connection does what it's told. "
https://github.com/square/retrofit/commit/ffab8145393225741167a003577696549573e857,Fix spelling 
https://github.com/spring-projects/spring-boot/commit/f34508ff8a1d85b43a0beccfc8d7377c2c993450,Remove outdated key  <enter> The `spring.metrics.export.redis.aggregate-key-pattern` is no longer defined but was still referenced in the documentation. 
https://github.com/apache/dubbo/commit/5668d740766f6303e789f072100cd235e4b67582,"Fix export provider error, change to catch throwable, handle NoClassDefFoundError ( <pr_link> ) "
https://github.com/apache/dubbo/commit/54b0d7e3f4bc8f348c6260f649c6e3174d5b8a03,Remove duplicate dependency from [dubbo-bom] and [dubbo-demo-xml-consumer] ( <pr_link> ) 
https://github.com/spring-projects/spring-boot/commit/8e2e493946357bcefb53d0b0a608becad7719413,"Remove HSQLDB dependency from Batch Starter  <enter> This commit removes HSQLDB dependency from Batch Starter as most apps that use Spring Batch will prefer to use a RDBMS of their choice to store batch metadata. <enter> Additionally, explicit spring-jdbc dependency has been replaced with JDBC Starter dependency. <enter> See  <pr_link> "
https://github.com/square/retrofit/commit/8bd6c990a728955f91646156b78244061ea91a2a,Prepare next development version 
https://github.com/square/retrofit/commit/b3fcdca9939f376d9f825bb6ccaeeaa97c0f8325,"Fix inconsistencies in javadocs.  <enter> These changes were made with consistency in mind, in relation to the rest of the project:  - Change self-closing <p/> tags to regular <p> tags.  - Add missing <p> tags. "
https://github.com/apache/dubbo/commit/48cb8e41a76b49b184f2b97e61b42eb109a16229,refactor package  <enter> git-svn-id:  http://code.alibabatech.com/svn/dubbo/trunk@1395  1a56cb94-b969-4eaa-88fa-be21384802f2 
https://github.com/apache/dubbo/commit/93b1cf014af7cce13f12816ab7114881765d4471,"Move UT in config-api to bootstrap temporarily, to solve the unreasonable dependency problem between modules. For long term run, we should refactor the config-api module to stop it from depending on other modules."
https://github.com/junit-team/junit4/commit/46036e7146f9dd0ca44baaec490692b967edd0ce,"javadoc'ed, and with better names "
https://github.com/spring-projects/spring-boot/commit/9d4ada793902c15f6b62ae0dd4ad45ca0ef5b197,"Add Tomcat 7 and Jetty 8 samples  <enter> Switch the Tomcat 8 and Jetty 9 samples to Tomcat 7 and Jetty 8. Since Tomcat 8 and Jetty 9 are now the default versions the previous samples are no longer relevant, however, we do need integration tests to check that we remain compatible with Tomcat 7 and Jetty 8. <enter> See  <issue_link> "
https://github.com/apache/dubbo/commit/81e61cc5c3d83b716ca2e712ccdc444c0fff208a,remove unnecessary null check  before instance of (#4321) <enter>  <enter> Signed-off-by: jimin.jm <slievrly@163.com>
https://github.com/spring-projects/spring-boot/commit/9a9111af2132ff50afe4aa0704be4bce19cf76fa,"Support path discovery for main dispatcher servlet  <enter> Add an `DispatcherServletPath` interface which provides a much more consistent way to discover the path of the main dispatcher servet. <enter> Prior to this commit, auto-configurations would often make use of the `ServerProperties` class to discover the dispatcher servlet path. This mechanism isn't very explicit and also makes it hard for us to relocate that property in Spring Boot 2.1. <enter> This commit also reverts most of  <otherCommit_link>  since it is now clear that the supporting multiple dispatcher servlet paths will be much more involved that we originally anticipated. <enter>  Closes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/fcf468062602966c508c260ef54da55e2d48c49a,Polish 'Document how to add metadata for collection and enum default values' <enter>  Closes   <issue_link> 
https://github.com/junit-team/junit4/commit/e15b287ccec2a1f4866a8bd1cd2a313a6163163d,"Only use a property where multiple entries need syncing  <enter> * The hamcrest version is only used in one place, i.e. the dependency. * Using properties to define dependency versions can cause issues for others. * Using properties to define a shared version across multiple dependencies causes less issues when you have multiple dependencies that need to be kept in sync. * We only have one dependency here and it doesn't need syncing to any other dependency * Therefore the right thing is to just specify the version in the dependency * End users can still override the dependency in their poms. "
https://github.com/junit-team/junit4/commit/fd2c4fbbf74f01eecef1680fa1365052d0302d19,Added some names to list of contributors 
https://github.com/square/retrofit/commit/eccfe208bcb7c54d357c60842aa6e33cc15424cd,"Switch to a better, custom validating subscriber.  <enter> TestSubscriber is a poor implementation for correctness testing. This new subscriber ensures all events are tested by being a JUnit rule. It also consumes events as they're validated so that assertion becomes more like a script than a ledger. <enter> This also switches tests to use unsafeSubscribe to ensure that any contract violations are not being suppressed. The latest version of RxJava is required for accessing this method on Completable. "
https://github.com/square/retrofit/commit/46cdff20b53a84e816d6022541347b3c06a5a52b,"Fatal errors should crash the dispatcher thread  <enter> This is an imperfect fix as uncaught exceptions reaching OkHttpCall which are not fatal still only log, but most of the adapters are defending against anything getting this far already. <enter> Also contained is a fix for the RxJava 2 async adapter. Non-200 responses delivered to the body observer would be forwarded to onError. If that callback threw a fatal exception, it would be re-delivered to the body observer despite it having already called a downstream terminal method. The fatal error should have been propagated by the async observer instead of attempting to make its way back downstream. "
https://github.com/spring-projects/spring-boot/commit/3b07e4e633ebcbdb0836ed7ad0b21fc8f0b42a9e,Fix typos in the documentation: though -> through  <enter> Closes   <pr_link> 
https://github.com/square/okhttp/commit/e3e829d2060542d50f33d1a9864f7ace82c9db5c,"API change: Make OkHttpClient accessors final  <enter> If we want these to be vals to Kotlin, they can't be open. I think the motivation to make these non-final was pretty weak, and I don't mind breaking API compatibility here. "
https://github.com/square/retrofit/commit/d80636923c595ed665adc6066f1377a6a1304f6a,Move source/target config out of error-prone block  <enter> Error-prone only works on pre-12 at the moment and we need this configuration to apply for all JDKs. 
https://github.com/junit-team/junit4/commit/6ee76dc22e56457cb5904eb6c5c0bf97939880cb,Update build_tests.sh to test 'ant profile' 
https://github.com/square/okhttp/commit/855c114f4f6fce3e0e1ae71479f89c9d5ad066d6,"Read/write access for byte, short and int.  <enter> This is big-endian only because that's all we use in OkHttp. "
https://github.com/square/okhttp/commit/37c01895cca5ec2bec26a3d381611f0938acd6d0,Define async APIs and switch Job to use HttpEngine directly.  <enter> Using HttpEngine directly introduces some duplicated code with HttpURLConnection. It also breaks the response cache. I think this is the best route going forward; and eventually we could invert this relationship to have HttpURLConnection depending on Job directly rather than vice versa. 
https://github.com/junit-team/junit4/commit/236e75bd968935cf8728c3f7aaaccaefd2f9c737,Adapt links to reflect repo rename 
https://github.com/junit-team/junit4/commit/bcf2c17851197328bb7bc008f916a6648de193aa,Converted tabs to spaces  <enter> Converted tabs to spaces for newly added code to be in line with guidelines. 
https://github.com/spring-projects/spring-boot/commit/abd7bc0466722b2a6e2b145a630fdb342a7f1656,Add OAuth2 resource server sample  <enter> Shows how to use @EnableResourceServer in a pure resource server and configure the secure paths. 
https://github.com/spring-projects/spring-boot/commit/8e8bf8e1779ffcef2ec35c6921b6b596c0c8353a,Uses the latest version of Tomcat 7 in the sample 
https://github.com/square/retrofit/commit/6108179c09dae0ccdd7e8d97d4a3b79f9f4443a4,"Use custom exception type when triggering mock failure.  <enter> Since we omit the stack trace, this more clearly indicates the source being from Retrofit's mock behavior. "
https://github.com/square/retrofit/commit/49bba7d60f2a920e138e9388c515ee58fc8c4bcf,Rewrite RxJava call adapter tests to be more understandable. 
https://github.com/square/okhttp/commit/32b7675b726a1ca62f5080581f6daaf9b7c6a48e,Use ResponseBody to model the response body everywhere.  <enter> This makes cache writing and gzip layering work a bit nicer because there are fewer fields in HttpEngine to track the various competing streams. 
https://github.com/square/okhttp/commit/59a6804c91328c2d1eb096054590b213ab711d22,Tests for canceling async requests. 
https://github.com/square/okhttp/commit/40ff76547064c3fb5acb9047a6f679dd4379a4d0,Make HttpConnection.connect return full working connections.  <enter> Previously the returned connections required the caller to do extra work: setting up tunnels (which could require auth) and performing an SSL handshake. With this change we make a complete working connection in HttpConnection.connect(). <enter> This will make it easier to fix fallback when a single domain has multiple IP addresses and some of those addresses are not reachable. <enter> This will also make it easier to do SPDY through HTTP proxies. 
https://github.com/apache/dubbo/commit/3308a197751eeb97baddf157f53813a3447d159f,fix typo:metodName ( <pr_link> ) 
https://github.com/spring-projects/spring-boot/commit/49ef93602e4db89944a5897fb250121186161d2c,Add external-file-property to LogFileMvcEndpoint  <enter> Add an additional property to LogFileMvcEndpoint to allow log files to be read from an external location. This is helpful when a launch.script is used to start the boot-application and the logfile is written by a redirect of stdout/stderr. <enter>  Fixes   <issue_link>   Closes   <pr_link> 
https://github.com/spring-projects/spring-boot/commit/5b2de5c81dc1cc3ab4e8c21ae615bc4d19567347,"Configure PathPattern for RSocket routing  <enter> This commit configures a `PathPatternRouteMatcher` in the RSocket support if spring-web is on the classpath. This `RouteMatcher` implementation is more efficient than the `SimpleRouteMatcher`, which is based on the `AntPathMatcher`. <enter>  Closes   <issue_link> "
https://github.com/junit-team/junit4/commit/d3d7a8b1389e53055d4de9de3aa319053b4a5524,Identify reflection package jdk.internal.reflect  <enter> JDK 9 uses classes from the package jdk.internal.reflect instead of sun.reflect. 
https://github.com/spring-projects/spring-boot/commit/644ab5f3e4319610632b60cbbc4f9141f3ba3470,Align SessionsEndpoint with Spring Session API improvements  <enter> This commit aligns SessionsEndpoint with FindByIndexNameSessionRepository API improvements that simplifies retrieval of sessions by principal name. <enter>  Closes   <pr_link> 
https://github.com/apache/dubbo/commit/a5cc7a26179aab97b3bee3fcc93fe90ac0ecb29f,reduce the level of request data in timeout log ( <pr_link> )  <enter> to control the size of log 
https://github.com/apache/dubbo/commit/9396ace4fc00ca8f2e331b49ddabcb1e138e9e1c,fix typo ( <pr_link> ) 
https://github.com/square/retrofit/commit/46598adb1da0f6d2498d9f8b815b170bf95fe1f8,Use the annotations directly for parameter handling.  <enter> Before we attempted to normalize the parameter annotations into a name and type model. The introduction of multi-part transfer encodings required something more expressive so the annotation instances themselves were used. This change removes the name and type in favor of using the annotation for everything. <enter> Deprecate the pre-encoded annotations in favor of boolean fields on the corresponding 'regular' annotation. 
https://github.com/junit-team/junit4/commit/7e77e49c40afb951ae5a5cbdf75ebb4a478e2bb7,Updated README.html 
https://github.com/spring-projects/spring-boot/commit/a79f71cbe802a8d87bc22e6eba67553ccedd54a7,Add @IntegrationComponentScan auto-configuration  <enter> Update Spring Integration auto-configuration so that `@IntegrationComponentScan` from `AutoConfigurationPackages` is implicitly applied. Prior to this commit `@MessagingGateway` interfaces would only get picked up if `@IntegrationComponentScan` was added alongside with the `@SpringBootApplication`. <enter>  Fixes   <issue_link>   Closes   <pr_link> 
https://github.com/spring-projects/spring-boot/commit/b0579c1cf38aa6815ee180a2e61640cfbc2447d2,"Ensure JPA vendor properties are period separated  <enter> If you bind to Map<String,Object> you get a nested Map instead of period-separated keys. This change just makes JpaProperties expose a Map<String,String> so the keys are sane. <enter>  Fixes   <issue_link> "
https://github.com/junit-team/junit4/commit/2568203bdebd5a4a4ad9aa74b1d8369d22f668a3,Replaced IllegalArgumentException for IOException  <enter> It's more consistent to throw an IOException instead of an IllegalArgumentException 
https://github.com/square/retrofit/commit/1d64f9763e1f5aa3d049710df8366f425109672f,Use a dummy value to further validation optional delegation  <enter> Prior to this other things might cause a null value. This ensures the value can only come from only place. 
https://github.com/apache/dubbo/commit/9157beac5da52530fc6336e419bf02d57e9cce6c,refactor package  <enter> git-svn-id:  http://code.alibabatech.com/svn/dubbo/trunk@1386  1a56cb94-b969-4eaa-88fa-be21384802f2 
https://github.com/spring-projects/spring-boot/commit/1a764d9c06f2a96722c04b8d8bb1edf89e424628,Default Tomcat to not save SESSIONS.ser file  <enter> Update TomcatEmbeddedServletContainerFactory so that session data isn't serialized by default. Prior to this commit the SESSIONS.ser file would either be written to `/tmp` or into `baseDir` (if one was set). <enter> By not saving session data we align Tomcat with the other embedded servlet containers and reduce the risk of sensitive information being left in `/tmp`. <enter>  Fixes   <issue_link> 
https://github.com/square/okhttp/commit/02b08fbde7b1726d7a4c0dc971152751ac82ca0a,"Allow HTAB in header values.  <enter> RFC 7230 section 3.2 allows HTAB ('	', 'u0009') inside header values as long as there is not more than one in a row:    https://tools.ietf.org/html/rfc7230#section-3.2  <enter> Before this CL, OkHttp previously disallowed HTAB in header values. This CL changes behavior to allow any number of consecutive HTABs inside a header value; this is more permissive than the RFC, but is consistent with how OkHttp currently treats space characters (' ', 'u0020'). "
https://github.com/spring-projects/spring-boot/commit/985c8f75982da4fabc1c8a5958a57706d4d4feab,Polish RSocket support 
https://github.com/square/okhttp/commit/0137eb9dbad165caea7189c5c3e09382563ef8bd,Remove unnecessary use of grouping parentheses  <enter> Let's remove warnings found by errorprone. <enter> - attempt ``` okhttp/okhttp/src/test/java/okhttp3/CallTest.java:2056: warning: [UnnecessaryParentheses] Unnecessary use of grouping parentheses             sink.writeUtf8('attempt ' + (attempt++));                                         ^     (see  https://errorprone.info/bugpattern/UnnecessaryParentheses )   Did you mean 'sink.writeUtf8('attempt ' + attempt++);'? ``` <enter> - isEaualTo ``` okhttp/src/test/java/okhttp3/OkHttpClientTest.java:287: warning: [UnnecessaryParentheses] Unnecessary use of grouping parentheses       assertThat(expected.getMessage()).isEqualTo(('protocols must not contain null'));                                                   ^     (see  https://errorprone.info/bugpattern/UnnecessaryParentheses ) ``` 
https://github.com/spring-projects/spring-boot/commit/123ffd736c0a435f24f8d9c647e5d384de8cab4a,Exclude @ManagedResources from Endpoint MBeans  <enter> If an Endpoint is already @ManagedResource then it doesn't need an additional (probably wrong) MBEan registration based on the invoke() method. 
https://github.com/junit-team/junit4/commit/13bda470bfa1fe989ce80d616fb096af1b937146,Make ParallelComputer more beautiful by creating a Decorator  <enter> extension point in ParentRunner <enter> Signed-off-by: Kent Beck <kent@threeriversinstitute.org> 
https://github.com/apache/dubbo/commit/243e57130646c69c047910dd079f19cbadc57613,Remove unnecessary null check. 
https://github.com/spring-projects/spring-boot/commit/e3899df22c1f8de17081fababcbd5c406a3c8541,"Configure Spring Data Couchbase explicitly  <enter> This commit configures Spring Data Couchbase explicitly rather than relying on the abstract configuration class. This has the advantage of simplifying the auto-configuration and let it us proxy-free configuration classes. <enter> Spring Boot no longer uses or interacts with CouchbaseConfigurer. Users relying on that to teach Spring Boot which components to use should rely on `@Primary` flag instead in case of multiple beans of the same type. <enter> `CouchbaseConfiguration` is no longer public as extending from it is no longer necessary. If the `CouchbaseEnvironment` has to be customized, a `CouchbaseEnvironmentBuilderCustomizer` bean can be registered to tune the auto-configured environment. <enter>  Closes   <issue_link> "
https://github.com/apache/dubbo/commit/09722e3a93ad4ba40edf38ebdbfd7afee4977ee6,Remove unnecessary dependencies 
https://github.com/spring-projects/spring-boot/commit/12bfca56d617f935e0a53760bf18f300eba8a430,Remove unnecessary null check  <enter> See  <pr_link> 
https://github.com/spring-projects/spring-boot/commit/036aace2cca7f33c0e96d3b222376b48947b735f,Add details in Jest ElasticSearch HealthIndicator  <enter> This commit polishes the previous one and aligns the Jest HealthIndicator with the changes made for the REST variant. <enter>  Closes   <pr_link> 
https://github.com/square/retrofit/commit/a19609a16359af66aec5410459899291b2c45cf1,Add example of using JSON converter as a String converter.  <enter> This also adds the Retrofit instance as a param to the string converter to allow it to delegate to others directly. This brings it into parity with the method signatures of the other converter methods anyway. 
https://github.com/apache/dubbo/commit/8b6f4456d5664f4e7f32b0e772befc4b12086aaa,Minor improvement on test cases: <pr_link> <enter> 1. Use org.junit.Assert instead of junit.framework.Assert(@Deprecated since Junit 4) <enter> 2. Use assertTrue and other assert methods through static import to make codes easier to read
https://github.com/junit-team/junit4/commit/a3e01b1ebea12f5fdfb6349e9e72623ac1f3b232,Cleaning up indentation  <enter> The inline method refactoring conducted by eclipse introduced some extra tabs. <enter> Incomplete - task : Issue 551: Resolve sensitive equality in MethodSorter test. 
https://github.com/junit-team/junit4/commit/638e82435a01af83e77c23e9f8d7b658a89eb4bf,"Use %n in string.format() ( <pr_link> )  <enter> In format strings, it is generally preferable better to use %n, which will produce the platform-specific line separator. "
https://github.com/spring-projects/spring-boot/commit/7019894f0ec7f6fd27121d94aa08022bd3040af9,"Clarify the role of spring-boot-starter-cache  <enter> The cache abstraction is a core feature of the Spring Framework. Basic features such as `@EnableCaching` are therefore available by default with no extra dependencies necessary. <enter> However, the actual cache adapters for JCache, Ehcache 2.x, Caffeine and Guava are located in a separated module, `spring-context-support`. Spring Boot provides that artifact via the `spring-boot-starter-cache` starter. <enter> It is quite easy to 'only' add the cache library dependencies and forget about this extra dependencies since `@EnableCaching` is available by default. This commit clarifies the role of the starer in each section so that it is more obvious. We're already explaining this at the beginning of the section but it seems that's not enough. <enter>  Closes   <issue_link> "
https://github.com/square/retrofit/commit/8eed9f264c13710fc0ac8251b3c5382a129a10ce,Add missing Call wrappers as return type 
https://github.com/square/okhttp/commit/99f2bafe1c0abb2791131dde5a702d3bb3ba28f3,"Fix isClosed() when a cache has not been initialized  <enter> isClosed() now means 'has close() been called', after commit  <otherCommit_link>  it meant 'has not been initialized or close() has been called'. <enter> Introduced explicit closed state. Minor tweak to use initialized state to determine whether cleanup will do anything. Added a test. "
https://github.com/square/retrofit/commit/6f8a9a664c0198992b8478e0671cc4a7db4f1d8e,Add missing import. 
https://github.com/junit-team/junit4/commit/5785d9df8fe25f68567272850cd65b4dc07da617,Deprecate rule ExpectedException ( <pr_link> )  <enter> The method Assert.assertThrows provides a nicer way for verifying exceptions. In addition the use of ExpectedException is error-prone when used with other rules like TestWatcher because the order of rules is important in that case. 
https://github.com/square/okhttp/commit/6909923b89d98fef39600a170aa50e566dbb730a,Update CHANGELOG.md 
https://github.com/square/retrofit/commit/fb746cb2f67a51c100e368844ac26dedb9e8eac4,"Expose success type on RetrofitError.  <enter> There's a bit of a test gap going on for all the variants of successful and erroneous handling of sync, async, and rx. This new behavior is fully tested in all three but more general behavior testing for them will be needed in in a follow-up. "
https://github.com/square/okhttp/commit/2ec2027fc00e24a83cd7bb7fef8b11e7c751bc13,Add missing copyright headers.  <enter> <issue_link> 
https://github.com/square/okhttp/commit/aaf2695b00dfd69df6fd915ba16665eee8c1962d,"Fix ResponseCacheTest for Android  <enter> Pull  <pr_link>  broke ResponseCacheTest on Android. <enter> The test was asserting a header generated using a copy of the old broken implementation. <enter> The test now just uses HttpDate, which now has its own tests. "
https://github.com/spring-projects/spring-boot/commit/5e9b8c3340d25fbf0e7d64b306ae7b3557188b9a,Add missing depdendency 
https://github.com/spring-projects/spring-boot/commit/e370b592d66ad9b01ff2bfff4b5991f0ac3a9751,"Introduce defined extension point for modifying the environment  <enter> The commit introduces a new extension point, EnvironmentPostProcessor, that can be implemented by classes that want to modify the environment. Implementations of EnvironmentPostProcessor are loaded via spring.factories and called in response to the ApplicationEnvironmentPreparedEvent. Application listeners that wish to work with the post-processed environment can continue to listen to ApplicationEnvironmentPreparedEvent and order themselves to run after EnvironmentPostProcessingApplicationListener. <enter> Existing ApplicationListeners that modify the environment have, where possible, been updated to implement EnvironmentPostProcessor instead. <enter>  Closes   <issue_link> "
https://github.com/apache/dubbo/commit/b0064d78a3b929eb3b25e0de9055412cb61f48ce,Make code of process callback of method cleaner in DubboBeanDefinitionParser ( <pr_link> ) 
https://github.com/square/retrofit/commit/7e31520f844b5c8eedc3b8fe82e2e48c79e47a5a,Get rid of the now-useless HttpServiceMethod.Builder  <enter> A simple static factory will do. 
https://github.com/junit-team/junit4/commit/0733bbffdadf05a6ebe0c38942904071a4060af4,<pr_link> Fix many warnings (Eclipse 4.2/Juno based)  <enter> - Enh: add new 'staticondemandthreshold' setting to eclipse project jdt.ui preference settings file (although this is in fact not related to kcooney's import ordering change comment) 
https://github.com/spring-projects/spring-boot/commit/4f9258a345130a5b031a3c4170dcb7046a1bd9b8,Fixup version numbers following release 
https://github.com/apache/dubbo/commit/5b4816dfa6ae92d0b94af4ed41c07ca6c9d0fcb9,fix:Remove unused variable parameters in AbstractProxyInvoker ( <pr_link> ) 
https://github.com/square/okhttp/commit/59b1c1dc5290b9f96ebeefb7ea2369d58042fed3,Pom version updates. Drop unused dependencies. 
https://github.com/junit-team/junit4/commit/5ea3196f1cdbc32bc3a91b96bedc1964d3bb76d1,Used assertArrayEquals to avoid converting an array to a list.  <enter> Incomplete - task : Issue 551: Resolve sensitive equality in MethodSorter test. 
https://github.com/square/retrofit/commit/365a0cd97bd8ee597e937ebf88170b30685047f4,Add UrlConnection Client.  <enter> Use this on Android 2.2 and prior and when on the JVM. <enter> Also update our sample to use GitHub contributors rather than the Twitter API because the latter is shutting down and subject to lame rate limiting when on common networks. <enter> Bump some dependencies to their latest versions. 
https://github.com/spring-projects/spring-boot/commit/a9c9c383f4c7afe0119bded0d005d1481acf71ed,"Polish pom.xml  <enter> Aplly consistent formatting, drop JDK 8 support and cleanup repo locations to use spring.io. "
https://github.com/spring-projects/spring-boot/commit/7c13c01cb6a62b86478aa53d3516ae8aaea48bca,Fix mapping of Cassandra's idle-timeout and heartbeat-interval  <enter> Previous to this commit the connection idle timeout and heartbeat interval were mapped to seconds whereas Cassandra expects ms for all duration types. <enter> This commit fixes the mapping and removes the default duration unit since it should be considered ms like every other duration properties. <enter>  Closes   <issue_link> 
https://github.com/square/okhttp/commit/e74e3f3bf744ef7f4d8ee724a7cf2347e486cfab,"Move cache writing out of the transport.  <enter> This is necessary to unblock network interceptors, where the interceptor may elect to rewrite the response body. If we've already cached the original response body, we're too late. "
https://github.com/spring-projects/spring-boot/commit/15de956566b0737d3e53a816a6be60ed3e41c759,Fix typo `Assert4J` -> `AssertJ`  <enter> See  <pr_link> 
https://github.com/square/retrofit/commit/9b6bd6bbbe752fceaa4517b3eda7cd678679198d,"Use ServerError directly in sessionExpired and serverError.  <enter> This is a short step on the road to HTTP body format agnostic support. And it's not a pretty step, either. "
https://github.com/square/retrofit/commit/3bdad39745db76928fce0f31b3c2a8e8922c40b3,Properly name ignored exception in 'catch' block. 
https://github.com/square/okhttp/commit/abb0a790802996d1039c35424b70b0f3f06b94b7,First step towards HTTP/2 automatic pings. ( <pr_link> )  <enter> This changes the executor services in HTTP/2 connection to split up listener executors (of which there may be many threads) from writer executors (of which there is one per connection). <enter> This adds a scheduled executor job to send pings on an interval. We don't yet fail the connection if pongs are not received. <enter> For follow-up there's some work to remove exising APIs to send pings through the HTTP/2 APIs. These are unused and make it awkard to confirm that only the automatic pings are being replied to. <enter> See  <issue_link> 
https://github.com/spring-projects/spring-boot/commit/26345d39003514348ca0be2f9c350c92b5cf3ef7,Polish docs  <enter> This commit replaces tabs to spaces in a yaml example for configuring endpoint web exposure include. <enter>  Closes   <pr_link> 
https://github.com/spring-projects/spring-boot/commit/599792097cfc690d2adf52a6c4d4f98c44a77162,Upgrade Spring WS to 2.2.1.RELEASE  <enter> Closes   <pr_link> 
https://github.com/junit-team/junit4/commit/3d7de190844d92de87ca197cfd1fce74ae432f0f,Add test for handling InitializationError  <enter> The code was changed by commit  <otherCommit_link>  but unfortunately the test was not part of the commit. The test is based on Philip Graf's test in pull request  <pr_link> . <enter> Co-authored-by: Philip Graf <git@acanda.ch> 
https://github.com/square/retrofit/commit/fe6d0f9b2a68063a086fa9da80d04293fbe3becf,Introduce factory for converter concept.  <enter> This is still highly-inefficient in its internal use and there are no tests proving that we now fail earlier in configuring a service method. Both of those will come in follow up commits 
https://github.com/square/retrofit/commit/30fabb8e9a87b644d0b78d0962efe6aef027f04b,Revert version to 0.6 to match previous ant/ivy build.  <enter> Add a description too... 
https://github.com/square/okhttp/commit/489c92400f579bace0950c910de2dca03959785e,Revise the upgrading guide for OkHttp 4.x.  <enter> Also change the old OkHttp 3.x Javadoc to set the new docs as canonical.  https://publicobject.com/2017/02/14/canonical-urls-for-javadocs/ 
https://github.com/spring-projects/spring-boot/commit/4f747d426e0f1b45ec341c021f699c7f25a8c3c2,Drop back to Surefire 2.19.1 as 2.19.2 was rebranded as 2.20 
https://github.com/square/okhttp/commit/4b204037e6415a486df4eadb0c659c666e6b9aba,Remove overlapping package-info.java 
https://github.com/square/retrofit/commit/3b5a795892ac079320f6e4fb0d715a6d1a619122,Adding a human-readable name to the Server interface 
https://github.com/square/retrofit/commit/f939189f3b825beb66a499686b9f6ca0f3a70cc1,Expose static factory for Invocation  <enter> Also rework the internals of how an Invocation gets instantiated and set as a tag on the Request. This will make a future change easier to land. 
https://github.com/junit-team/junit4/commit/5af049cac0c976c586d955607fa459aacb778d3c,Remove unnecessary comments
https://github.com/square/okhttp/commit/ea014716fd2a8712ee39888725f91bed43148cd3,"Remove CBC-mode ECDSA cipher suites  <enter> This removes the following cipher suites as supported-by-default:   TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA   TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA <enter> This tracks a similar change in Chromium 56:    https://developers.google.com/web/updates/2016/12/chrome-56-deprecations#remove_cbc-mode_ecdsa_ciphers_in_tls  <enter> OkHttp's updated cipher suites, plus comparisons to Android, Java, Chromium, Firefox, and Square's server-site configuration is here:    https://tinyurl.com/okhttp-cipher-suites  <enter>  Closes :  <issue_link> "
https://github.com/apache/dubbo/commit/3747cc36fada387a52363fc7dfc97a4c6c2b2670,Remove useless config item in xsd 
https://github.com/apache/dubbo/commit/51e2e80158c1d2f10cf8c38ae533e8c09ef91e9a,Remove unnecessary null check. 
https://github.com/square/okhttp/commit/112f020c411c9d14f34e480b98325777b25a7434,Change the cache to have non-shared semantics.  <enter> This means we'll cache responses that use an 'Authorization' header. This means OkHttp's cache shouldn't be used on middleboxes that sit between user agents and the origin server; in practice this is never a use case for OkHttp. <enter>  Fixes   <issue_link> 
https://github.com/apache/dubbo/commit/57c13e07430a58e77249b96af9574b3db04e6dba,Remove unused import for unit test ( <pr_link> )  <enter> * clear unused import 
https://github.com/junit-team/junit4/commit/eedd1f68fbd014beca60c979e8173c271ea5cf2d,"Upate TestName to make the 'name' field volatile.  <enter> This ensures that the name is published across threads correctly--for instance, if a parallelized runner is used. <enter>  Closes   <pr_link> "
https://github.com/square/retrofit/commit/999c72be0468664c711159cd53deff79e62ee4a1,Refactor Rx tests to avoid the use of blocking operators. 
https://github.com/square/okhttp/commit/ff7946416d86aedcf154b868ba869241cd4816e9,"Add some pings to force happens-before in SPDY tests.  <enter> Previously we were relying on accidents to get our tests to pass. There may still be some that require work, but this should fix the three tests that I saw fail. <enter>  <issue_link> "
https://github.com/square/retrofit/commit/c3633423b4a52566446bc6d540904f1f5f715205,"Re-work unresolvable type detection in parameters  <enter> In order to natively support Kotlin's 'suspend' modifier in the future, we need to allow wildcards to be used for the last parameter. As a result, we only validate the shape of a type once a Retrofit annotation is detected. "
https://github.com/square/okhttp/commit/53e12cca33f7d24cd8ea6c6ead262559b3553fbb,Request entity tests for the Apache client shim. 
https://github.com/spring-projects/spring-boot/commit/3eb5c348fb93a416d5dcd0003d3273570a217589,"Align test with Spring MVC's internals once again  <enter> The internals have been updated so that the field that was originally used, interceptors, can be used again. <enter> This reverts commit  <otherCommit_link> . "
https://github.com/spring-projects/spring-boot/commit/c25736d84f92e6d9158927b63e690cb5f2bae65e,Add test for nested properties 
https://github.com/square/okhttp/commit/353ec0b0cdbf46ddbc2755e482c62ec711badf90,"Fix for SslContextBuilder/MockWebServer disagreeing about localhost  <enter> MockWebServer binds to getByName('localhost'), SslContextBuilder was using InetAddress.getByName(null) (null == any loopback). On Android, null returns IPv6 loopback, which has the name 'ip6-localhost'. "
https://github.com/apache/dubbo/commit/5a9ea9373084613b6da4bf34861b1b8a013274b5,Polish release notes in CHANGES.md 
https://github.com/apache/dubbo/commit/c21cc05ec9ff4f96f34af9027714bb525cd0edf5,replace ServiceAnnotationBeanPostProcessor log.isInfoEnabled->log.isWarnEnabled ( <pr_link> ) <enter> simplify ExtensionLoader code segment 
https://github.com/square/okhttp/commit/60f5406dcc094d0431420139bd002e8bdd4ea5d5,"Move TLS retries / fallback into Connection.  <enter> API changes: 1) Added: Address.getCertificatePinner() 2) Incompatible API change: Address constructor no longer includes ConnectionSpecs. Removed getConnectionSpecs(). 3) Added: ConnectionSpec.isCompatible(SSLSocket) 4) Added: TlsVersion.javaName() <enter> Implicit / semantic / internal changes: <enter> 1) Connection now handles all attempts to connect via a route (effectively a {proxy, socket address} pair), rather than just one attempt. i.e. Connection now handles all the TLS negotiation fallbacks internally. <enter> 2) Route no longer deals with TLS versions. Individual TLS failures are not counted against a Route. If no connection attempts to a route were successful the failure is counted against the route. <enter> 3) The code makes a distinction between when various IOExceptions occur, with the intention making retries a bit smarter. It is now more obvious which exceptions happen during setup (RequestException), connection (RouteException), HTTP communication and thus which can be retried and whether the request might have been sent. "
https://github.com/square/retrofit/commit/778a67e3c27226aecf5292ba4c3785a5d3c53067,Update README.md
https://github.com/apache/dubbo/commit/6140bc2a653cc3066d15ceeff5a3f06962fb32ad,"Fix concurrent problem of zookeeper configcenter, wait to start until cache being fully populated. "
https://github.com/spring-projects/spring-boot/commit/deef784403419ed57cb733089c0326d8b0781dd2,"Blitz some more special characters from the metric names  <enter> When MVC path matchers are used as metric keys, they can still contain invalid characters and patterns (like asterisks). This change removes some more special characters and also tidies up the names a bit so no key part starts or ends with '-' (which is ugly). <enter>  Fixes   <issue_link> "
https://github.com/square/okhttp/commit/82f773376e19bb7e10916627349fad06e45f90cb,Add HTTP/2 and TLSv1.3 columns to our security providers doc 
https://github.com/junit-team/junit4/commit/4411c102d489c2272d7e38606e912a54be4defa8,"Restore folder `javadoc/latest` for Javadoc.  <enter> This folder has been used for many years. There are links to Javadoc at that folder (e.g.  http://stackoverflow.com/questions/156503/how-do-you-assert-that-a-certain-exception-is-thrown-in-junit-4-tests/2935935#2935935  ). Restoring the folder `javadoc/latest` will hopefully restore the Javadoc pages in Google Search, too. "
https://github.com/square/okhttp/commit/6a79c3223c5ff2d556bbab8eb9909fffc4ca4387,Update README.md -> Mockito moved to Github 
https://github.com/apache/dubbo/commit/635bc7983287d47d1d2c637a85fe21aabacdcd27,Remove the shutdown logic from spring bean destroy to avoid competition. 
https://github.com/junit-team/junit4/commit/87245d66c7a17b27478da3bf7030e1b2dc86da55,Added script for uploading docs 
https://github.com/junit-team/junit4/commit/4cb9a65f450efa5f2a42128856c7b56e6d283386,"Fixed a bug in Theories classes with constructor parameters, where the method parameters and constructor parameters were switched "
https://github.com/junit-team/junit4/commit/9ee381470d56efa800420e5e22721e402aca01c2,"Remove fast-tests maven target.  <enter> Many of our tests store data in static fields, so the tests cannot be run in parallel. <enter>  Fixes   <issue_link> "
https://github.com/square/retrofit/commit/580d31ae906ac28f608427d4c4d2318a0e8b658a,Rename main class to Retrofit. 
https://github.com/junit-team/junit4/commit/467c3f8efe1a87e3029df282e4df60ad98bc4142,Deprecate Assert#assertThat  <enter> The method 'assertThat' is used for writing assertions with Hamcrest. Hamcrest is an independent assertion library and contains an own 'assertThat' method in the class 'org.hamcrest.MatcherAssert'. It is available both in the old Hamcrest 1.3 release and in the current Hamcrest 2.1. Therefore the JUnit team recommends to use Hamcrest's own 'assertThat' directly. 
https://github.com/apache/dubbo/commit/9ca9bb04b926ba33c6755aff8373314e60f2be89,Fix typo <issue_link> 
https://github.com/spring-projects/spring-boot/commit/3d437711363ade1717a7e11b7b781d240bad4983,"Register an AuthenticationManager in security autoconfig  <enter> This is quite a big step, but I think it helps a lot. Since Spring Boot always creates an AuthenticationManager if it doesn't find one already registered, it makes sense to also make it into a  @bean . Spring Security does not register its AuthenticationManager by default though, so we have to do that for it if the user has created one with an  @Autowired  AuthenticationManagerBuilder, but not registered it as a  @bean . <enter> Having the  @bean  (marked  @primary  to prevent issues with  @Autowired ) makes it easier to reason about what Spring Boot has done for you, and easier to default in simple use cases to the boot-created AuthenticationManager. For example, if I want an OAuth2 Authorization Server with password grant, it makes total sense for the AuthenticationManager for users to be the same as the  @primary  one. Now it is easy to set that up (just  @autowire  it). "
https://github.com/junit-team/junit4/commit/41092ce4e01cc57d8aa1911e2f1169e0f355b1ae,Move TestClassTest to package org.junit.runners.model.  <enter> It is common to add tests to the same package as the class under test. 
https://github.com/square/retrofit/commit/704c484b56b0cf2d1f26f4315b3569c08e5cdc6a,Prepare version 2.8.1 
https://github.com/junit-team/junit4/commit/3e08f69912d69189e895c279b1bece0c7c0840f4,"Create a class TestWithParameters.  <enter> This class keeps the data together that are needed for creating a runner for a single data set of a parameterized test. This makes it also clear, that the computation of the name is not the responsibility of the runner but of the Parameterized class. "
https://github.com/junit-team/junit4/commit/5e4f8e7fb82919d992887fca1741bb04ef1c8f4a,New Suite implementation makes ClassesRequest crazy simple 
https://github.com/apache/dubbo/commit/4a8da59573cb0f1d793809439abb2f2162f2d80f,"Proofread README.md file with multiple fixes ( <pr_link> )  <enter> Fixed typo, grammatical, punctuations, and semantic coherence to improve readability and content quality. <enter> Signed-off-by: Aditya Kumar Roy <akroy@umass.edu> "
https://github.com/apache/dubbo/commit/6912d9a14fe2c35dee306da9a8e953ba29d736da,Upgrade tomcat version to 8.5.31. ( <pr_link> ) 
https://github.com/apache/dubbo/commit/f490df87de45b57be8c224581a8a1a7dd9a20946,"keep demo simple, and switch to use zookeeper as registry center ( <pr_link> )  <enter> * keep demo simple, and switch to use zookeeper as registry center <enter> * remove comment "
https://github.com/spring-projects/spring-boot/commit/0515ca0dd02fec54d438d45afbf95db1b5f41353,Auto configure micrometer cache metrics  <enter> Closes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/0741c90489c94c7a15a415013301f40f93caae05,Avoid blocking on a Mono indefinitely  <enter> Closes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/0a55e3e7365a44d2b1986954912f938be5a77398,Polish 'Clarify edge case docs on ConditionalOnClass'  <enter> Closes   <pr_link> 
https://github.com/spring-projects/spring-boot/commit/0f9e8315bca4e3c8be824c2c1a1b7ec6defdc734,Replace use of deprecated Reactor MonoProcessor in tests  <enter> Fixes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/11b7fd832d15856244bcaf3b1ec031e9eb1b6dc6,"Report non-matching outer class conditions  <enter> Update ConditionEvaluationReport so that, whenever a negative outcome is added for a source, any existing outcomes for inner classes of that source are updated with a non-matching outcome that indicates that the outer configuration did not match. <enter> Conditions are evaluated in two phases; PARSE_CONFIGURATION first and REGISTER_BEAN second. If a parent class’s conditions match in PARSE_CONFIGURATION then its inner classes will have their PARSE_CONFIGURATION conditions evaluated. If they all match, the inner class will be reported as a positive match in the auto-configuration report even if the outer class does not match as a result of the subsequent evaluation of a REGISTER_BEAN condition. <enter>  Fixes   <issue_link> "
https://github.com/spring-projects/spring-boot/commit/14bd404b71fcb967d4af282e839a763112ecd40c,Document AWS Elastic Beanstalk deployment  <enter> Update the reference documentation to include details of Amazon Elastic Beanstalk. <enter>  Closes   <pr_link> 
https://github.com/spring-projects/spring-boot/commit/1c0bcc13cfa3aa00a8fea96e2ecb2e1867859a96,Set UserDetailsService in default AuthenticationManagerBuilder  <enter> Only affects the default AuthenticationManagerBuilder (so when users are not overriding the default global user details). Makes the UserDetailsService effectively available as it would be if we used AuthenticationManagerBuilder.inMemoryAuthentication() as a shared object in the HttpSecurity. <enter>  Fixes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/56ded38f5d6b6cc1d3e7a6bd6d131a7dac33b0c9,Generate default values from Duration and Period .ZERO  <enter> Closes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/8014b21ad96cf109735e092bb1d4e1c251634064,Upgrade to Maven Enforcer Plugin 3.0.0-M2  <enter> Closes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/e28b98c59d43190b5ca8ea3ae4deac50c9737766,Remove multi config runApplication extension  <enter> Closes   <pr_link> 
https://github.com/spring-projects/spring-boot/commit/e2cb7a75458d83c1358faf9e19194b9ab8fe0454,Align default scopes for Google with changes in Spring Security 5.0.1  <enter> Closes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/e79ef9b73baca23e11db3c60fd3af2ca3a3dfb70,Add option to exclude devtools from fat jar  <enter> Add an `excludeDevtools` property to both the Maven and Gradle plugin that removes `org.springframework.boot:spring-boot-devtools` (if necessary) when repackaging the application. <enter>  Closes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/f0c53726420e84267ba9ccff1640ed0bdf7f5fd7,Align with Spring Framework 5's new Commons Logging adapter  <enter> Closes   <issue_link> 
https://github.com/spring-projects/spring-boot/commit/f9094143d72a99bb52ad6414568ee2c93611115c,Remove undefined FILE appender from basic log4j config  <enter> Fixes   <issue_link> 
https://github.com/square/okhttp/commit/067aa1f4495f9c93bafca183a6d655fa81b139d6,Throw UnknownHostException again from HttpURLConnection  <enter> This is to address issue  <issue_link> . 
https://github.com/square/okhttp/commit/5373160d20aa3f6036ff5ebc91137888c4abffbe,"Whole operation timeouts  <enter> Strictly-speaking this change is backwards-incompatible because it adds a new method to the Call interface. The method returns the call's timeout. <enter> The trickiest part of this is signaling the end of the call, which occurs after the last byte is consumed of the last follow up request, or when the call fails. Fortunately this is made easier by borrowing the sites used by EventListener, which already plots out where calls end. <enter>  <issue_link> "
https://github.com/square/okhttp/commit/ff959f8fd550b8f55a47038ea4235b1b2ed2eaa8,Android Additional Tests ( <pr_link> ) 
